<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[初识JavaScript01]]></title>
      <url>/2017/12/27/JavaScript01/</url>
      <content type="html"><![CDATA[<h3 id="js作用域"><a href="#js作用域" class="headerlink" title="js作用域"></a>js作用域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;               //js没有块级作用域</span><br><span class="line">    alert(i);       //10</span><br><span class="line"></span><br><span class="line">    function f1(parameters) &#123;</span><br><span class="line">        var n = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    //因为页面一开始加载并不会执行f1方法</span><br><span class="line">    //alert(n); undefined</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>默认如果直接在script标签中定义变量，则属于“全局作用域范围”(全局执行环境)，即属于window对象。<br>1 . 全局作用域范围的变量直到网页关闭或浏览器关闭时才释放资源<br>2 . 一个页面中的多个script标签中的变量可以互相访问。<br>3 . JS有垃圾回收机制，会定时对可释放资源的变量回收。将变量设置为null则表示可以被回收了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function name(parameters) &#123;</span><br><span class="line">        var i = 0;</span><br><span class="line">        i++;</span><br><span class="line">        alert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    //方法无返回值，会返回undefined</span><br><span class="line">    alert(name());</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var i = 1;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //全局作用域范围的变量直到网页关闭或浏览器关闭时才释放资源</span><br><span class="line">    alert(i);//1</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>方法内部不使用var定义的变量相当于全局变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function f1(parameters) &#123;</span><br><span class="line">        i = 100;</span><br><span class="line">        //var i = 100;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    f1();</span><br><span class="line">    alert(i);//100</span><br><span class="line">    //alert(i);使用未定义</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>js中switch中的判断是严格判断就是全等于（===）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var i = 90;</span><br><span class="line">    switch (i) &#123;</span><br><span class="line">        case 90:</span><br><span class="line">            alert(&quot;number&quot;);</span><br><span class="line">            break;</span><br><span class="line">        case &quot;90&quot;:</span><br><span class="line">            alert(&quot;string&quot;);</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="js类型转换"><a href="#js类型转换" class="headerlink" title="js类型转换"></a>js类型转换</h3><p>注意点：<br>    1 Number（）将任意值转换成数字 如果该字符串不能完全转换为整型，则返回NaN<br>    2 String（）转换不成功返回undefined， toString（）报错<br>    3 Boolean（）转换当为0或为空（值为空或者null）时返回false，其余返回true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    alert(parseInt(&quot;90&quot;));              //90</span><br><span class="line">    alert(parseInt(&quot;90aaaaaaaaaa&quot;));    //90</span><br><span class="line">    alert(parseInt(&quot;aaaaaa&quot;));          //NaN</span><br><span class="line">    alert(parseInt(111, 2));            //代表给定一个二进制的数111输出十进制</span><br><span class="line">    alert(parseFloat(10.111));          //10.111</span><br><span class="line">    alert(Number(&quot;40addd&quot;));            //将任意值转换成数字 如果该字符串不能完全转换为整型，则返回NaN</span><br><span class="line">    //alert(isNaN(&quot;aaa&quot;));              //true</span><br><span class="line">    var str;</span><br><span class="line">    alert(String(str));                 //undefined</span><br><span class="line">    alert(str.toString());              //报错</span><br><span class="line"></span><br><span class="line">    //boolean</span><br><span class="line">    var b1 = Boolean(&quot;&quot;); //false - 空字符串</span><br><span class="line">    var b2 = Boolean(&quot;hello&quot;); //true - 非空字符串</span><br><span class="line">    var b1 = Boolean(50); //true - 非零数字</span><br><span class="line">    var b1 = Boolean(null); //false – null</span><br><span class="line">    var b1 = Boolean(0); //false - 零</span><br><span class="line">    var b1 = Boolean(new object()); //true - 对象 </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[LINQ]]></title>
      <url>/2017/12/26/Ten_LINQ_Myth/</url>
      <content type="html"><![CDATA[<h2 id="1-All-LINQ-queries-must-start-with-the-‘var’-keyword-In-fact-the-very-purpose-of-the-‘var’-keyword-is-to-start-a-LINQ-query"><a href="#1-All-LINQ-queries-must-start-with-the-‘var’-keyword-In-fact-the-very-purpose-of-the-‘var’-keyword-is-to-start-a-LINQ-query" class="headerlink" title="1 All LINQ queries must start with the ‘var’ keyword. In fact, the very purpose of the ‘var’ keyword is to start a LINQ query!"></a>1 All LINQ queries must start with the ‘var’ keyword. In fact, the very purpose of the ‘var’ keyword is to start a LINQ query!</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string[] people = new [] &#123; &quot;Tom&quot;, &quot;Dick&quot;, &quot;Harry&quot; &#125;;</span><br><span class="line">var filteredPeople = people.Where (p =&gt; p.Length &gt; 3); </span><br><span class="line">//is precisely equivalent to:</span><br><span class="line"></span><br><span class="line">string[] people = new [] &#123; &quot;Tom&quot;, &quot;Dick&quot;, &quot;Harry&quot; &#125;;</span><br><span class="line">IEnumerable&lt;string&gt; filteredPeople = people.Where (p =&gt; p.Length &gt; 3);</span><br></pre></td></tr></table></figure>
<h2 id="2-All-LINQ-queries-must-use-query-syntax"><a href="#2-All-LINQ-queries-must-use-query-syntax" class="headerlink" title="2 All LINQ queries must use query syntax."></a>2 All LINQ queries must use query syntax.</h2><ul>
<li><p><strong>lambda syntax</strong> </p>
</li>
<li><p><strong>query syntax</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//Here&apos;s an example of lambda syntax:</span><br><span class="line"></span><br><span class="line">string[] people = new [] &#123; &quot;Tom&quot;, &quot;Dick&quot;, &quot;Harry&quot; &#125;;</span><br><span class="line">var filteredPeople = people.Where (p =&gt; p.Length &gt; 3); </span><br><span class="line">Here&apos;s the same thing expressed in query syntax:</span><br><span class="line"></span><br><span class="line">//string[] people = new [] &#123; &quot;Tom&quot;, &quot;Dick&quot;, &quot;Harry&quot; &#125;;</span><br><span class="line">var filteredPeople = from p in people where p.Length &gt; 3 select p;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-To-retrieve-all-customers-from-the-customer-table-you-must-perform-a-query-similar-to-the-following"><a href="#3-To-retrieve-all-customers-from-the-customer-table-you-must-perform-a-query-similar-to-the-following" class="headerlink" title="3 To retrieve all customers from the customer table, you must perform a query similar to the following:"></a>3 To retrieve all customers from the customer table, you must perform a query similar to the following:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">The expression:</span><br><span class="line"></span><br><span class="line">from c in db.Customers select c </span><br><span class="line">is a frivolous query! You can simply go:</span><br><span class="line"></span><br><span class="line">db.Customers</span><br><span class="line">Similarly, the following LINQ to XML query:</span><br><span class="line"></span><br><span class="line">var xe = from e in myXDocument.Descendants (&quot;phone&quot;) select e;</span><br><span class="line">can be simplified to:</span><br><span class="line"></span><br><span class="line">var xe = myXDocument.Descendants (&quot;phone&quot;);</span><br><span class="line">And this:</span><br><span class="line"></span><br><span class="line">Customer customer = (from c in db.Customers where c.ID == 123 select c)</span><br><span class="line">                    .Single();</span><br><span class="line">can be simplified to:</span><br><span class="line"></span><br><span class="line">Customer customer = db.Customers.Single (c =&gt; c.ID == 123);</span><br></pre></td></tr></table></figure>
<h2 id="4-A-LINQ-to-SQL-or-EF-query-will-be-executed-in-one-round-trip-only-if-the-query-was-built-in-a-single-step"><a href="#4-A-LINQ-to-SQL-or-EF-query-will-be-executed-in-one-round-trip-only-if-the-query-was-built-in-a-single-step" class="headerlink" title="4 A LINQ to SQL or EF query will be executed in one round-trip only if the query was built in a single step."></a>4 A LINQ to SQL or EF query will be executed in one round-trip only if the query was built in a single step.</h2><p>LINQ follows a lazy evaluation model, which means queries execute not when constructed, but when enumerated. This means you can build up a query in as many steps as you like, and it won’t actually hit the server until you eventually start consuming the results.</p>
<p>For instance, the following query retrieves the names of all customers whose name starts with the letter ‘A’, and who have made at least two purchases. We build this query in three steps:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var query = db.Customers.Where (c =&gt; c.Name.StartsWith (&quot;A&quot;));</span><br><span class="line">query = query.Where (c =&gt; c.Purchases.Count() &gt;= 2);</span><br><span class="line">var result = query.Select (c =&gt; c.Name);</span><br><span class="line"></span><br><span class="line">foreach (string name in result)   // Only now is the query executed!</span><br><span class="line">   Console.WriteLine (name);</span><br></pre></td></tr></table></figure></p>
<h2 id="5-Because-SQL-emits-flat-result-sets-LINQ-queries-must-be-structured-to-emit-flat-result-sets-too"><a href="#5-Because-SQL-emits-flat-result-sets-LINQ-queries-must-be-structured-to-emit-flat-result-sets-too" class="headerlink" title="5 Because SQL emits flat result sets, LINQ queries must be structured to emit flat result sets, too."></a>5 Because SQL emits flat result sets, LINQ queries must be structured to emit flat result sets, too.</h2><p>For example, if you want to retrieve the names of customers in the state of WA along with all their purchases, you can simply do the following:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from c in db.Customers</span><br><span class="line">where c.State == &quot;WA&quot;</span><br><span class="line">select new</span><br><span class="line">&#123;</span><br><span class="line">   c.Name,</span><br><span class="line">   c.Purchases    // An EntitySet (collection)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>The hierarchical result from this query is much easier to work with than a flat result set!</p>
<p>We can achieve the same result without association properties as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from c in db.Customers</span><br><span class="line">where c.State == &quot;WA&quot;</span><br><span class="line">select new</span><br><span class="line">&#123;</span><br><span class="line">   c.Name,</span><br><span class="line">   Purchases = db.Purchases.Where (p =&gt; p.CustomerID == c.ID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LINQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C#6 特性]]></title>
      <url>/2017/12/26/CS6/</url>
      <content type="html"><![CDATA[<h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var Name = &quot;Jack&quot;; </span><br><span class="line">var results = $&quot;Hello &#123;Name&#125;&quot;; ## 空操作符</span><br></pre></td></tr></table></figure>
<h2 id="空操作符"><a href="#空操作符" class="headerlink" title="空操作符 ( ?. )"></a>空操作符 ( ?. )</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (user != null &amp;&amp; user.Project != null &amp;&amp; user.Project.Tasks != null &amp;&amp; user.Project.Tasks.Count &gt; 0) </span><br><span class="line">&#123; </span><br><span class="line">   Console.WriteLine(user.Project.Tasks.First().Name); </span><br><span class="line">&#125; </span><br><span class="line">//现在</span><br><span class="line">Console.WriteLine(user?.Project?.Tasks?.First()?.Name);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： 上面的代码虽然可以让我们少些很多代码，而且也减少了空异常，但是我们却需要小心使用，因为有的时候我们确实是需要抛出空异常，那么使用这个特性反而隐藏了Bug </p>
</blockquote>
<h2 id="NameOf"><a href="#NameOf" class="headerlink" title="NameOf"></a>NameOf</h2><p>利用nameof减少手写带来的错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person p;</span><br><span class="line">if(p == null)</span><br><span class="line">&#123;</span><br><span class="line"> 	throw new Exception(&quot;nameof(Person)&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表达式方法体"><a href="#表达式方法体" class="headerlink" title="表达式方法体"></a>表达式方法体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static string SayHello() =&gt; &quot;Hello World&quot;;</span><br></pre></td></tr></table></figure>
<h2 id="自动属性初始化器"><a href="#自动属性初始化器" class="headerlink" title="自动属性初始化器"></a>自动属性初始化器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//以前</span><br><span class="line">public class Person </span><br><span class="line">&#123; </span><br><span class="line">    public int Age &#123; get; set; &#125; </span><br><span class="line"> </span><br><span class="line">	public Person() </span><br><span class="line">    &#123; </span><br><span class="line">        Age = 100; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">//现在</span><br><span class="line">public class Person </span><br><span class="line">&#123; </span><br><span class="line">    public  int Age &#123; get; private set; &#125; </span><br><span class="line">&#125; </span><br><span class="line">//同时增加了只读属性初始化</span><br><span class="line">public class Person </span><br><span class="line">&#123; </span><br><span class="line">    public int Age &#123; get; &#125; = 100; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Index-初始化器"><a href="#Index-初始化器" class="headerlink" title="Index 初始化器"></a>Index 初始化器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var names = new Dictionary&lt;int, string&gt; </span><br><span class="line">       &#123; </span><br><span class="line">           [1] = &quot;Jack&quot;, </span><br><span class="line">           [2] = &quot;Alex&quot;, </span><br><span class="line">           [3] = &quot;Eric&quot;, </span><br><span class="line">           [4] = &quot;Jo&quot; </span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="using-静态类的方法可以使用-static-using"><a href="#using-静态类的方法可以使用-static-using" class="headerlink" title="using 静态类的方法可以使用 static using"></a>using 静态类的方法可以使用 static using</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">using System; </span><br><span class="line">using static System.Math; </span><br><span class="line">namespace CSharp6NewFeatures </span><br><span class="line">&#123; </span><br><span class="line">  class Program </span><br><span class="line">  &#123; </span><br><span class="line">      static void Main(string[] args) </span><br><span class="line">     &#123; </span><br><span class="line">        Console.WriteLine(Log10(5)+PI); </span><br><span class="line">     &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C#特性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C#7 特性]]></title>
      <url>/2017/12/26/CS7/</url>
      <content type="html"><![CDATA[<h2 id="本地方法（Local-functions）"><a href="#本地方法（Local-functions）" class="headerlink" title="本地方法（Local functions）"></a>本地方法（Local functions）</h2><p><strong>有时一个辅助函数只在某个使用到它的函数中有用。现在你可以在其他函数体内将这类函数定义为</strong></p>
<p><strong>（local function）：</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int Fibonacci(int x) </span><br><span class="line">&#123; </span><br><span class="line">    if (x &lt; 0) throw new ArgumentException(&quot;Less negativity please!&quot;, nameof(x)); </span><br><span class="line">    return Fib(x).current; </span><br><span class="line"> </span><br><span class="line">	(int current, int previous) Fib(int i) </span><br><span class="line">    &#123; </span><br><span class="line">        if (i == 0) return (1, 0); </span><br><span class="line">        var (p, pp) = Fib(i - 1); </span><br><span class="line">        return (p + pp, p); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="元组（Tuples）"><a href="#元组（Tuples）" class="headerlink" title="元组（Tuples）"></a>元组（Tuples）</h2><p>我们经常希望能从一个方法中返回一个以上的结果。旧版本的 C#中的选项远远达不到令人满意的程度： </p>
<ol>
<li>Out 参数： 使用起来很笨拙（哪怕你使用了上面所述的改进），并且无法在 async 方法中使用。 </li>
<li>System.Tuple&lt;…&gt; 返回类型： 用起来很啰嗦，并且需要分配一个元组对象。 </li>
<li>自定义每个方法的传输类型： 需要用一大堆代码来实现一个类，而目的仅仅是临时打包几个变量。 </li>
<li>通过动态类型返回匿名类： 性能有瓶颈，且没有静态类型检查。 </li>
</ol>
<p>为了在这方面做得更好，C# 7.0 加入了元组类型（tuple types）和元组字面量（tupleliterals）： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(string, string, string) LookupName(long id) // 元组返回类型 </span><br><span class="line">&#123; </span><br><span class="line">     // 从数据储存中取出第一个、中间和最后一个数据 </span><br><span class="line">    return (first, middle, last); // 元组字面量 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法现在会很有效率地返回三个字符串，包装成一个元组值中的元素。 </p>
<p>方法的调用者将会收到一个元组，并可以分别访问各个元素： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var names = LookupName(id); </span><br><span class="line"></span><br><span class="line">WriteLine($&quot;found &#123;names.Item1&#125;&#123;names.Item3&#125;.&quot;);</span><br></pre></td></tr></table></figure>
<p>Item1等是元组元素的默认名称，并且总是可用的。但是这样描述性不是非常好，因此你可以选择性地使用另一种更好的方法： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(string first, string middle, string last)LookupName(long id) // 元组元素拥有了名称 </span><br><span class="line">//现在元组的接收者可以使用更具描述性的名字了： </span><br><span class="line">var names = LookupName(id); </span><br><span class="line">WriteLine($&quot;found &#123;names.first&#125;&#123;names.last&#125;.&quot;); </span><br><span class="line">//你也可以直接在元组字面量中指定元素名称： </span><br><span class="line">return (first: first, middle: middle,last: last); // 在字面量中命名元组元素</span><br></pre></td></tr></table></figure>
<p>通常来说你可以无视名字而将元组类型互相转换：只要每个元素之间是可转换的（assignable），元组类型即可自由地互相转换。 </p>
<p>元组是值类型，它们的元素是简单的公共、可修改的字段。它们具有值相等性，意味着如果两个元组间每个元素两两相等（且拥有相同的哈希值）则两个元组相等（且拥有相同的哈希值）。 </p>
<p>这使得元组在多返回值之外的许多场景也很有用。例如，如果你需要一个拥有多个键的字典，使用一个元组作为你的键，一切都会正常运行。如果你需要一个每个位置有多个值的列表，使用元组吧，诸如搜索列表这样的功能将会正确的工作。 </p>
]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C#特性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/12/25/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
