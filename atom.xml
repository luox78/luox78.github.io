<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luox78</title>
  
  <subtitle>Daily Learning</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luox78.github.io/"/>
  <updated>2018-02-12T13:35:02.465Z</updated>
  <id>https://luox78.github.io/</id>
  
  <author>
    <name>luox78</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ASP.NET06</title>
    <link href="https://luox78.github.io/2018/02/10/ASP.NET06/"/>
    <id>https://luox78.github.io/2018/02/10/ASP.NET06/</id>
    <published>2018-02-10T11:13:43.949Z</published>
    <updated>2018-02-12T13:35:02.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="httprequest一些成员"><a href="#httprequest一些成员" class="headerlink" title="httprequest一些成员"></a>httprequest一些成员</h2><ul><li><p><code>Request.UrlReferrer</code>获取请求该资源的原地址</p><p>用处：判断host是否为本站</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            var uri = <span class="built_in">context</span>.Request.UrlReferrer<span class="comment">;</span></span><br><span class="line">            if (uri == null <span class="title">||</span> uri.Host != <span class="string">"localhost"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">context</span>.Response.ContentType = <span class="string">"text/plain"</span><span class="comment">;</span></span><br><span class="line">                <span class="built_in">context</span>.Response.Write(<span class="string">"forbid"</span>)<span class="comment">;</span></span><br><span class="line">                <span class="built_in">context</span>.Response<span class="meta">.End</span>()<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">context</span>.Response.ContentType = <span class="string">"image/jpg"</span><span class="comment">;</span></span><br><span class="line">            <span class="built_in">context</span>.Response.WriteFile(<span class="string">"536896a693f71.jpg"</span>)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>只有在img请求和localhost下才能访问</p></li><li><p><code>Request.UserHostAddress</code>获得访问者的IP地址<a id="more"></a></p></li></ul><ul><li><code>context.Request.MapPath()</code>将虚拟路径转换为磁盘上的物理路径</li></ul><p>其他：</p><p>1、 （*）<code>Request.AppRelativeCurrentExecutionFilePath</code>，获取当前执行请求相对于应用根目录的虚拟路径，以~开头，比如“~/Handler.ashx”，</p><p>2、 （*）<code>Request.PhysicalApplicationPath</code>，获取当前应用的物理路径，比如D:\我的文档\VisualStudio 2008\WebSites\WebSite4\</p><p>3、 （*）<code>Request.PhysicalPath，</code>获取当前请求的物理路径，比如D:\我的文档\VisualStudio 2008\WebSites\WebSite4\Handler.ashx</p><p>4、 （*） <code>Request.RawUrl</code>获得原始请求URL、Request.Url获得请求的URL，区别涉及到URL重写的问题</p><p>5、 （*） <code>Request.UserLanguages</code>获得访问者浏览器支持的语言，可以通过这个实现对不同语言的人显示不同语言的页面。</p><p>6、    <code>Request.Url.GetComponents(UriComponents.HostAndPort,UriFormat.SafeUnescaped)</code>获取当前请求的网站的域名和端口号</p><h2 id="httpresponse一些成员"><a href="#httpresponse一些成员" class="headerlink" title="httpresponse一些成员"></a>httpresponse一些成员</h2><ol><li><p><code>Response.Buffer、Response.BufferOutput</code></p><p>类型bool，设置response是否通过内部缓冲区进行输出，默认true</p></li><li><p><code>Response.Flush()</code></p><p>将服务器缓冲区的数据直接返回到浏览器</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">context</span>.Response.ContentType = <span class="string">"text/html"</span><span class="comment">;</span></span><br><span class="line">            for (int i = <span class="number">0</span><span class="comment">; i &lt; 10; i++)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">context</span>.Response.Write(<span class="string">"这是第"</span> + i + <span class="string">"个输出&lt;br&gt;"</span>)<span class="comment">;</span></span><br><span class="line">                System.Threading.Thread.Sleep(<span class="number">400</span>)<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>循环里面添加一句<code>context.Response.Flush();</code>，实际上会连续发送，从监视工具可以看出，第一次全是等待时间，第二次全是接受时间，但浏览器自身会等待全部接受完成之后才显示</p></li><li><p><code>Response.Clear()</code></p><p>直接清空缓冲区，没有发送的数据会丢失</p></li><li><p><code>Response.ContentEncoding</code></p><p>输出流的编码</p></li><li><p><code>Response.OutputStream</code></p><p>输出流</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">context</span>.Response.ContentType = <span class="string">"image/jpg"</span>;</span><br><span class="line">           //以下载的方式</span><br><span class="line">           //<span class="built_in">context</span>.Response.AppendHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=\""</span> + HttpUtility.UrlEncode(<span class="string">"536896a693f71.jpg"</span>, System.Text.Encoding.UTF8) + <span class="string">"\""</span>);        <span class="built_in">context</span>.Response.OutputStream.Write(File.ReadAllBytes(<span class="built_in">context</span>.Request.MapPath(<span class="string">"536896a693f71.jpg"</span>)), <span class="number">0</span>, File.ReadAllBytes(<span class="built_in">context</span>.Request.MapPath(<span class="string">"536896a693f71.jpg"</span>)).Length);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Response.End()</code></p><p>终止响应，将之前缓存中的数据发给浏览器，End()之后的代码不会被继续执行,End方法里调用了Flush()方法。</p></li></ol><h2 id="Server属性-Type-HttpServerUtility"><a href="#Server属性-Type-HttpServerUtility" class="headerlink" title="Server属性(Type HttpServerUtility)"></a>Server属性(Type HttpServerUtility)</h2><p>注意：Server里面的方法基本上都是调用<code>HttpUtility</code>类中相应方法。推荐使用<code>HttpUtility</code>，因为有的地方很难拿到Server对象，而且Server的存在是为以前ASP程序员习惯而留的。</p><ol><li><p><code>MapPath</code></p><p>取得文件的物理路径</p></li><li><p><code>Execute</code> 方法和 <code>Transfer</code>方法</p><p>两个都是服务器里执行动态页面，跟重定向有本质区别，不能内部重定向到ashx，否则会报错“执行子请求出错”</p><p><code>Transfer</code>：第一个页面直接调用第二个页面，执行完第二个页面后不再返回第一个页面，立即响应到客户端浏览器。<br><code>Execute</code>：第一个页面直接调用第二个页面，执行完第二个页面后再返回第一个页面执行，最后响应到客户端浏览器。</p></li><li><p><code>HtmlEncode</code>方法和<code>HtmlDecode</code>方法</p><p><code>HtmlEncode</code>将string以html编码，即将html里面特殊的符号用&amp;XX替换</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">context</span>.Response.ContentType = <span class="string">"text/html"</span><span class="comment">;</span></span><br><span class="line">           string str = <span class="string">"&lt;script&gt;alert('nihao')&lt;/script&gt;"</span><span class="comment">;</span></span><br><span class="line">           <span class="built_in">context</span>.Response.Write(str)<span class="comment">;</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>不加<code>HtmlEncode</code>会执行script代码，加上<code>HttpUtility.HtmlEncode(str)</code>之后源文件会变成</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="keyword">lt</span>;script&amp;<span class="keyword">gt</span>;alert<span class="comment">(&amp;#39;nihao&amp;#39;)</span>&amp;<span class="keyword">lt</span>;/script&amp;<span class="keyword">gt</span>;<span class="keyword">gt</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>UrlEncode</code>方法和<code>UrlDecode</code>方法</p><p>将url进行编码（解码）成http认识的格式（ASCII码），中文规定使用UTF-8，又称作百分号编码（percent encoding）</p><p>使用时应该对正确的位置进行编码，如参数位置，参数路由等</p><p><strong>编码方式</strong>：字符对应的ASCII码 =&gt; 转成对应的16进制 =&gt; 前面加上百分号（%）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">string search</span> = <span class="string">"你好呀"</span>;</span><br><span class="line"><span class="attribute">string url</span> = <span class="string">"https://www.baidu.com?search="</span> + HttpUtility.UrlEncode(search);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com?search=<span class="symbol">%e4</span><span class="symbol">%bd</span><span class="symbol">%a0</span><span class="symbol">%e5</span><span class="symbol">%a5</span><span class="symbol">%bd</span><span class="symbol">%e5</span><span class="symbol">%91</span><span class="symbol">%80</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;httprequest一些成员&quot;&gt;&lt;a href=&quot;#httprequest一些成员&quot; class=&quot;headerlink&quot; title=&quot;httprequest一些成员&quot;&gt;&lt;/a&gt;httprequest一些成员&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Request.UrlReferrer&lt;/code&gt;获取请求该资源的原地址&lt;/p&gt;
&lt;p&gt;用处：判断host是否为本站&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void ProcessRequest(HttpContext &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var uri = &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Request.UrlReferrer&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (uri == null &lt;span class=&quot;title&quot;&gt;||&lt;/span&gt; uri.Host != &lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response.ContentType = &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response.Write(&lt;span class=&quot;string&quot;&gt;&quot;forbid&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response&lt;span class=&quot;meta&quot;&gt;.End&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response.ContentType = &lt;span class=&quot;string&quot;&gt;&quot;image/jpg&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response.WriteFile(&lt;span class=&quot;string&quot;&gt;&quot;536896a693f71.jpg&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只有在img请求和localhost下才能访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Request.UserHostAddress&lt;/code&gt;获得访问者的IP地址
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="HttpRequest" scheme="https://luox78.github.io/tags/HttpRequest/"/>
    
      <category term="HttpResponse" scheme="https://luox78.github.io/tags/HttpResponse/"/>
    
      <category term="HttpUtility" scheme="https://luox78.github.io/tags/HttpUtility/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET05</title>
    <link href="https://luox78.github.io/2018/02/09/ASP.NET05/"/>
    <id>https://luox78.github.io/2018/02/09/ASP.NET05/</id>
    <published>2018-02-09T13:16:12.426Z</published>
    <updated>2018-02-09T16:21:17.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建缩略图"><a href="#创建缩略图" class="headerlink" title="创建缩略图"></a>创建缩略图</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = context.Request.Files[<span class="number">0</span>]; </span><br><span class="line"><span class="comment">//从上传图片创建大图</span></span><br><span class="line"> <span class="keyword">using</span> (<span class="keyword">var</span> bigImage = Image.FromStream(file.InputStream))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//等比创建小图</span></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> smallImage = <span class="keyword">new</span> <span class="type">Bitmap</span>(<span class="number">200</span>, <span class="number">200</span> * bigImage.Height / bigImage.Width))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//创建画布将大图画入小图</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> graphics = Graphics.FromImage(smallImage))</span><br><span class="line">                &#123;</span><br><span class="line">                    graphics.DrawImage(bigImage, <span class="number">0</span>, <span class="number">0</span>, smallImage.Width, smallImage.Height);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//保存</span></span><br><span class="line">                bigImage.Save(context.Server.MapPath(Guid.NewGuid() + <span class="string">"_big.jpg"</span>));</span><br><span class="line">                smallImage.Save(context.Server.MapPath(Guid.NewGuid() + <span class="string">"_small.jpg"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="WebForm介绍"><a href="#WebForm介绍" class="headerlink" title="WebForm介绍"></a>WebForm介绍</h2><p>WebForm分为两个文件aspx和aspx.cs</p><p>aspx是页面模板，是页面描述文件，就是html+js+css的内容，和aspx.cs结合的更好，不用像一般处理程序那样程序员自己去输出HTML字符串或读取填充模板，控件都是定义在aspx中，内联的JavaScript、CSS也是写在aspx中的</p><p>前台页面上的@Page指令集。</p><p>服务端的C#代码是定义在aspx.cs中。aspx控制页面长相，cs控制程序逻辑，这种“前aspx后cs”的方式就被称为CodeBehind(代码后置)。</p><p>强调：后台页面可以把Page_Load看成是WinForm里的Load事件(“最先运行”)。</p><p>1.直接在后台通过Response.Write(“内容”);</p><ul><li>aspx中也可以访问cs中定义的非私有的成员</li><li>缺点：全都输出在页面的最上面。</li></ul><p>2.使用&lt;%%&gt;在前台页面指定输出。</p><ul><li>可以编写复杂的C#代码， for等所有C#代码都可以写在aspx中</li></ul><p>如：&lt;%=UserName %&gt;&lt;%=SayHello(); %&gt;&lt;%if (UserName == “aaa”) { UserName = “bbb”; } %&gt;    </p><h3 id="深入理解aspx"><a href="#深入理解aspx" class="headerlink" title="深入理解aspx"></a>深入理解aspx</h3><p>创建一个webform，对应的aspx.cs：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">WebForm1</span> :</span> System.Web.UI.Page</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到它集成System.Web.UI.Page，转到page元数据看到</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class<span class="built_in"> Page </span>: TemplateControl, IHttpHandler</span><br></pre></td></tr></table></figure><p><strong>Page继承自IHttpHandler</strong>，可以得出其实Page就是一个进一步封装的类，这时候我向class WebForm1中添加protected字段</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> _num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>aspx页面添加一句</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">_num </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure><p>运行可以看到10出现在html页面，为什么aspx可以访问cs里面的内容呢，看aspx头部有一个<code>Inherits=&quot;_43.WebForm1&quot;</code>从字面上看，它是再说继承自_43.WebForm1，事实上aspx编译之后确实如此，</p><p>为了证明这一点，我向aspx里添加一句并拖一个控件进去，为了获取页面编译完成后dll的位置</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">"Button1"</span> <span class="attr">runat</span>=<span class="string">"server"</span> <span class="attr">Text</span>=<span class="string">"Button"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">System.Reflection.Assembly.GetExecutingAssembly().Location </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure><p>同时往pageload中添加</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Response.Write(System.Reflection.Assembly.GetExecutingAssembly().Location);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>html显示的是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uox78<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\T</span>emp<span class="symbol">\T</span>emporary<span class="symbol">\A</span>SP.NET<span class="symbol">\F</span>iles<span class="symbol">\r</span>oot<span class="symbol">\2</span>d000352<span class="symbol">\6</span>7fdd243<span class="symbol">\a</span>ssembly<span class="symbol">\d</span>l3<span class="symbol">\f</span>d7cca4a<span class="symbol">\c</span>f2ad37e_aea1d301<span class="symbol">\4</span>3.dll</span><br><span class="line">10  Button C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uox78<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\T</span>emp<span class="symbol">\T</span>emporary<span class="symbol">\A</span>SP.NET<span class="symbol">\F</span>iles<span class="symbol">\r</span>oot<span class="symbol">\2</span>d000352<span class="symbol">\6</span>7fdd243<span class="symbol">\A</span>pp_Web_amvk3cjo.dll</span><br></pre></td></tr></table></figure><p>分别用reflector打开，看到<strong>cs派生类里是ASP.webform1_aspx，而page页面程序集ASP命名空间下就是webform1_aspx</strong>，所以aspx页面可以访问cs里面的字段可以解释了，这时候打开ASP.webform1_aspx里面有一个方法</p><p><img src="https://luox78.github.io/images/cs_dll.png" alt="https://luox78.github.io/images/cs_dll.png"></p><p><img src="https://luox78.github.io/images/aspx_dll.png" alt="https://luox78.github.io/images/aspx_dll.png"></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DebuggerNonUserCode</span>]</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">FrameworkInitialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">base</span>.FrameworkInitialize();</span><br><span class="line">    <span class="keyword">this</span>.__BuildControlTree(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">base</span>.AddWrappedFileDependencies(__fileDependencies);</span><br><span class="line">    <span class="keyword">base</span>.Request.ValidateInput();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this.__BuildControlTree(this);这句代表aspx里面的所有空间都被编译成了控件树，点开</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[DebuggerNonUserCode]</span><br><span class="line"><span class="keyword">private</span> void __BuildControlTree(webform1_aspx __ctrl)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.InitializeCulture();</span><br><span class="line">    LiteralControl control = <span class="keyword">this</span>.__BuildControl__control2();</span><br><span class="line">    IParserAccessor accessor = __ctrl;</span><br><span class="line">    accessor.AddParsedSubObject(control);</span><br><span class="line">    HtmlHead head = <span class="keyword">this</span>.__BuildControl__control3();</span><br><span class="line">    accessor.AddParsedSubObject(head);</span><br><span class="line">    LiteralControl control2 = <span class="keyword">this</span>.__BuildControl__control6();</span><br><span class="line">    accessor.AddParsedSubObject(control2);</span><br><span class="line">    HtmlForm form = <span class="keyword">this</span>.__BuildControlform1();</span><br><span class="line">    accessor.AddParsedSubObject(form);</span><br><span class="line">    LiteralControl control3 = <span class="keyword">this</span>.__BuildControl__control7();</span><br><span class="line">    accessor.AddParsedSubObject(control3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>貌似里面创建很多html元素对象，这里我们就知道，所有的aspx页面里面的东西都会被编译成对应的对象，这时候回顾一下aspx页面body里面的内容</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">runat</span>=<span class="string">"server"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">_num </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">"Button1"</span> <span class="attr">runat</span>=<span class="string">"server"</span> <span class="attr">Text</span>=<span class="string">"Button"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">System.Reflection.Assembly.GetExecutingAssembly().Location </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>显示body，然后form，form里面有button，<code>__BuildControlTree</code>，里面也印证了这一点，我们打开创建form的方法</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[DebuggerNonUserCode]</span><br><span class="line">private HtmlForm __BuildControlform1()</span><br><span class="line">&#123;</span><br><span class="line">    HtmlForm form = new HtmlForm()<span class="comment">;</span></span><br><span class="line">    <span class="keyword">base.form1 </span>= form<span class="comment">;</span></span><br><span class="line">    form.ID = <span class="string">"form1"</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">Button </span><span class="keyword">button </span>= this.__BuildControlButton1()<span class="comment">;</span></span><br><span class="line">    IParserAccessor accessor = form<span class="comment">;</span></span><br><span class="line">    accessor.<span class="keyword">AddParsedSubObject(button);</span></span><br><span class="line"><span class="keyword"> </span>   form.SetRenderMethodDelegate(new RenderMethod(this.__Renderform1))<span class="comment">;</span></span><br><span class="line">    object[] parameters = new object[<span class="number">5</span>]<span class="comment">;</span></span><br><span class="line">    parameters[<span class="number">0</span>] = form<span class="comment">;</span></span><br><span class="line">    parameters[<span class="number">2</span>] = <span class="number">0x131</span><span class="comment">;</span></span><br><span class="line">    parameters[<span class="number">3</span>] = <span class="number">0x20</span><span class="comment">;</span></span><br><span class="line">    parameters[<span class="number">4</span>] = false<span class="comment">;</span></span><br><span class="line">    this.__PageInspector_SetTraceData(parameters)<span class="comment">;</span></span><br><span class="line">    return form<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面设置了form的一些属性同时创建了button，此时我们往html添加新的代码</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span></span><br><span class="line"><span class="perl">        &#123;</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>nihao<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">runat</span>=<span class="string">"server"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl">_num </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">"Button1"</span> <span class="attr">runat</span>=<span class="string">"server"</span> <span class="attr">Text</span>=<span class="string">"Button"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl">System.Reflection.Assembly.GetExecutingAssembly().Location </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>添加了一个循环以便我们查看dll里面如何处理C#代码的，编译之后发现__BuildControlTree里面多了一句</p><pre><code>__ctrl.SetRenderMethodDelegate(new RenderMethod(this.__Render__control1));</code></pre><p>点开 _Render_control1</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void __Render__control1(<span class="type">HtmlTextWriter</span> __w, <span class="type">Control</span> parameterContainer)</span><br><span class="line">&#123;</span><br><span class="line">    int num2;</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">parameters</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">160</span>, <span class="number">0x44</span>, <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(parameters);</span><br><span class="line">    __w.<span class="type">Write</span>(<span class="string">"\r\n\r\n&lt;!DOCTYPE html&gt;\r\n\r\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n"</span>);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray2</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray2);</span><br><span class="line">    parameterContainer.<span class="type">Controls</span>[<span class="number">0</span>].<span class="type">RenderControl</span>(__w);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray3</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x162</span>, <span class="number">14</span>, <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray3);</span><br><span class="line">    __w.<span class="type">Write</span>(<span class="string">"\r\n&lt;body&gt;\r\n    "</span>);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray4</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray4);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray5</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x170</span>, <span class="number">0x2c</span>, <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray5);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i = num2 + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">object</span>[] <span class="title">objArray6</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">        <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray6);</span><br><span class="line">        <span class="class"><span class="keyword">object</span>[] <span class="title">objArray7</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x19c</span>, <span class="number">0x1a</span>, <span class="literal">true</span> &#125;;</span><br><span class="line">        <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray7);</span><br><span class="line">        __w.<span class="type">Write</span>(<span class="string">"\r\n    &lt;h1&gt;nihao&lt;/h1&gt;\r\n    "</span>);</span><br><span class="line">        <span class="class"><span class="keyword">object</span>[] <span class="title">objArray8</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">        <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray8);</span><br><span class="line">        <span class="class"><span class="keyword">object</span>[] <span class="title">objArray9</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x1b6</span>, <span class="number">7</span>, <span class="literal">false</span> &#125;;</span><br><span class="line">        <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray9);</span><br><span class="line">        num2 = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray10</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray10);</span><br><span class="line">    parameterContainer.<span class="type">Controls</span>[<span class="number">1</span>].<span class="type">RenderControl</span>(__w);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray11</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x2c1</span>, <span class="number">20</span>, <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray11);</span><br><span class="line">    __w.<span class="type">Write</span>(<span class="string">"\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n"</span>);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray12</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray12);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到for循环直接在里面，<strong>原来C#是直接和html元素一起编译成方法，最后转换成元素对象的</strong>，这时候或许你会有疑问cs里面是如何访问这些控件的，查看cs的dll可以看到</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WebForm1</span> : <span class="title">Page</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">protected</span> <span class="keyword">int</span> _num = <span class="number">10</span>;</span><br><span class="line">       <span class="keyword">protected</span> Button Button1;</span><br><span class="line">       <span class="keyword">protected</span> HtmlForm form1;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">base</span>.Response.Write(Assembly.GetExecutingAssembly().Location);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>一旦你在aspx中创建了控件，cs里面就会有对应的protected字段（在designer.cs中），cs里对控件属性的修改继承自他的aspx的那个类会进行相应的更改，并将它反应到最终生成的页面上</p><p><strong>总结：</strong></p><p><img src="https://luox78.github.io/images/IHttpHandler.png" alt="https://luox78.github.io/images/IHttpHandler.png"></p><h2 id="IsPostBack"><a href="#IsPostBack" class="headerlink" title="IsPostBack"></a>IsPostBack</h2><p>用于判断是第一次get页面还是post回发</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>cs里pageload时</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           Response.Write(<span class="keyword">this</span>.IsPostBack);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>aspx中（aspx中form里面的button控件只会生成submit不会生成button）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">runat</span>=<span class="string">"server"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">"Button1"</span> <span class="attr">runat</span>=<span class="string">"server"</span> <span class="attr">Text</span>=<span class="string">"Button"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览会看到只有第一次get是false，回发的都是true</p><h3 id="如何实现的"><a href="#如何实现的" class="headerlink" title="如何实现的"></a>如何实现的</h3><p>既然服务器控件生成的是html form那我自己写一个</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> id=<span class="string">"form1"</span> method=<span class="string">"post"</span> action=<span class="string">"WebForm3.aspx"</span>&gt;</span><br><span class="line">       &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> name=<span class="string">"name"</span> value=<span class="string">"tijiao"</span> /&gt;</span><br><span class="line">   &lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>cs里面跟上面一样，这时候运行会发现永远都是false，浏览器查看source我们就可以看出问题，runat serve的html里面多出了很多隐藏域，先将结果 IsPostBack是通过form中的隐藏域提交给服务器，如果没有接受到，那就是第一次请求，收到了肯定是回发。同时引出我们的下一部分viewstate</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.IsPostBack用来判断表单是否是回发。（不是第一次请求），是点击表单的提交按钮回发过来的。是否是回发与get请求还是Post请求无关。但是一般情况下回发都是Post请求。一般Get请求都是第一次加载。</p><p>2.只有当使用服务器端表单<code>&lt;form runat=&quot;server&quot;&gt;</code>IsPostBack才可以使用。如果使用客户端表单，则IsPostBack永远都是False.因为当使用服务器端表单的时候会自动生成一个隐藏域,才该隐藏域中，服务器写入了一些内容，通过这些内容就可以判断是否是回发。如果使用的是普通html表单，则需要自己写代码来判断是否是回发。</p><p>3.IsPostBack的使用方式，为什么要使用IsPostBack</p><p>4.<strong>用处</strong>：使用IsPostBack可以知道是不是第一次请求，通过viewstate可以将第一次加载的数据停留在页面中减少数据加载的次数。避免了每次点击按钮回发都重新加载一次数据。</p><h2 id="ViewState"><a href="#ViewState" class="headerlink" title="ViewState"></a>ViewState</h2><p>viewstate（视图状态），顾名思义就是view的aspx空间的值状态</p><p>pageload中添加</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewState[<span class="string">"key"</span>] = <span class="string">"nihao"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>生成html里面有一个隐藏域为viewstate</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"hidden"</span> <span class="attribute">name</span>=<span class="string">"__VIEWSTATE"</span> <span class="attribute">id</span>=<span class="string">"__VIEWSTATE"</span> <span class="attribute">value</span>=<span class="string">"P2yIH8jxqJKNyRGQn/BloDXHiGVvbfXBTzveFGTePfqct88mOSTSDiAJmfi3kLBaX+RRjSBf0RgEBmgfYTh1nQOXlqCGoRY2ccoHhM5M+buITfYkgxbsmXLRjBckuKji"</span> /&gt;</span><br></pre></td></tr></table></figure><p>value里面的值中就包含了nihao，下次解析的时候，我们不需要再次向页面传值也会显示，cs中的事件里面的改值就是通过这样实现的</p><p><strong>缺点：</strong> 加大网站的流量、降低访问速度、机密数据放到表单中会有数据欺骗等安全性问题。</p><p><strong>禁用ViewState</strong> ：在asp顶部添加EnableViewState=”false”</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@<span class="built_in"> Page </span><span class="attribute">Language</span>=<span class="string">"C#"</span> <span class="attribute">AutoEventWireup</span>=<span class="string">"true"</span> <span class="attribute">CodeBehind</span>=<span class="string">"WebForm2.aspx.cs"</span> <span class="attribute">Inherits</span>=<span class="string">"_43.WebForm2"</span> <span class="attribute">EnableViewState</span>=<span class="string">"false"</span>%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建缩略图&quot;&gt;&lt;a href=&quot;#创建缩略图&quot; class=&quot;headerlink&quot; title=&quot;创建缩略图&quot;&gt;&lt;/a&gt;创建缩略图&lt;/h2&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; file = context.Request.Files[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从上传图片创建大图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bigImage = Image.FromStream(file.InputStream))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//等比创建小图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; smallImage = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Bitmap&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; * bigImage.Height / bigImage.Width))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//创建画布将大图画入小图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; graphics = Graphics.FromImage(smallImage))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    graphics.DrawImage(bigImage, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, smallImage.Width, smallImage.Height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//保存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                bigImage.Save(context.Server.MapPath(Guid.NewGuid() + &lt;span class=&quot;string&quot;&gt;&quot;_big.jpg&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                smallImage.Save(context.Server.MapPath(Guid.NewGuid() + &lt;span class=&quot;string&quot;&gt;&quot;_small.jpg&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="缩略图" scheme="https://luox78.github.io/tags/%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    
      <category term="viewstate" scheme="https://luox78.github.io/tags/viewstate/"/>
    
      <category term="深入理解aspx" scheme="https://luox78.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3aspx/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC 控制器</title>
    <link href="https://luox78.github.io/2018/02/07/ASP.NET%20MVC%20%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>https://luox78.github.io/2018/02/07/ASP.NET MVC 控制器/</id>
    <published>2018-02-07T12:43:32.626Z</published>
    <updated>2018-02-09T13:42:53.603Z</updated>
    
    <content type="html"><![CDATA[<p> 人么总说事件会改变一切，当实际上你必须自己动手去改变一切——<em>Andy Warhol</em></p><h2 id="对输入请求进行路由"><a href="#对输入请求进行路由" class="headerlink" title="对输入请求进行路由"></a>对输入请求进行路由</h2><p>在软件中，URI（统一资源标识符）是指通过一个位置或者名称来引用资源。</p><p>当URI通过位置来识别资源是，就叫做URL（统一定位符）</p><p>当URI通过名称标志资源时，就叫做URN（统一资源名称）</p><p>ASP.NET MVC 旨在处理更通用的URI，ASP.NET Web Forms只要处理位置感知的物理资源<a id="more"></a></p><h3 id="模拟ASP-NET-MVC运行时"><a href="#模拟ASP-NET-MVC运行时" class="headerlink" title="模拟ASP.NET MVC运行时"></a>模拟ASP.NET MVC运行时</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//map对应的参数</span></span><br><span class="line">            <span class="keyword">var</span> segments = context.Request.Url.Segments;</span><br><span class="line">            <span class="keyword">var</span> controller = segments[<span class="number">1</span>].TrimEnd(<span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">var</span> action = segments[<span class="number">2</span>].TrimEnd(<span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">var</span> param = segments[<span class="number">3</span>].TrimEnd(<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过反射实例化对应的controller</span></span><br><span class="line">            <span class="keyword">var</span> fullname = <span class="string">$"<span class="subst">&#123;<span class="keyword">this</span>.GetType().Namespace&#125;</span>.<span class="subst">&#123;controller&#125;</span>"</span>;</span><br><span class="line">            <span class="keyword">var</span> controllerType = Type.GetType(fullname);</span><br><span class="line">            <span class="keyword">var</span> instance = Activator.CreateInstance(controllerType);</span><br><span class="line">            <span class="keyword">var</span> methodInfo =</span><br><span class="line">                controllerType.GetMethod(action, BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);</span><br><span class="line">            <span class="keyword">var</span> res = methodInfo.Invoke(instance, <span class="literal">null</span>) <span class="keyword">as</span> <span class="keyword">string</span>;<span class="comment">//假设没参数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">            context.Response.Write(res);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>controller类中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _0101</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个简单的例子模拟了ASP.NET MVC使用的基本机制，处理请求的组件是控制器类，通过request的url映射到专门的控制器类进行处理</p><h3 id="应用程序路由"><a href="#应用程序路由" class="headerlink" title="应用程序路由"></a>应用程序路由</h3><h4 id="url模式与路由"><a href="#url模式与路由" class="headerlink" title="url模式与路由"></a>url模式与路由</h4><p>路由：代表URL绝对路径的模式匹配字符串，即没有协议，IP地址，端口号的url字符串</p><p>比如：<a href="http://localhost:3462/home/test" target="_blank" rel="noopener">http://localhost:3462/home/test</a>    ==&gt;    /home/test</p><p>路由可以是常量也可以是占位符，mvc系统默认的路由是{controller}/{action}/{id}，它可以匹配如Home/Index/1子类的路由</p><h4 id="定义应用程序路由"><a href="#定义应用程序路由" class="headerlink" title="定义应用程序路由"></a>定义应用程序路由</h4><p>mvc中路由是在<code>Global.asax</code>下被注册</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcApplication</span> :</span> System.Web.HttpApplication</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对应的类在<code>App_Start/RouteConfig.cs</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteConfig</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterRoutes</span><span class="params">(RouteCollection routes)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            routes.IgnoreRoute(<span class="string">"&#123;resource&#125;.axd/&#123;*pathInfo&#125;"</span>);</span><br><span class="line"></span><br><span class="line">            routes.MapRoute(</span><br><span class="line">                name: <span class="string">"Default"</span>,</span><br><span class="line">                url: <span class="string">"&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,</span><br><span class="line">                defaults: <span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, id = UrlParameter.Optional &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>路由集合routes添加路由一般通过<code>MapRoute</code>进行配置，但如果你的路由有<code>MapRoute</code>不支持的参数可以使用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var<span class="built_in"> route </span>= newRoute(<span class="built_in">..</span>);</span><br><span class="line">RouteTable.Routes.<span class="builtin-name">Add</span>(<span class="string">"RouteName"</span>,route);</span><br></pre></td></tr></table></figure><p>进行添加，<code>maproute</code>里面的参数：</p><p>name：路由名</p><p>url：url匹配模式</p><p>defaults：该url默认值对象</p><p>如<a href="http://localhost:3462/并没有输入controller/action但处理程序会匹配到默认值，导航到http://localhost:3462/Home/Index下" target="_blank" rel="noopener">http://localhost:3462/并没有输入controller/action但处理程序会匹配到默认值，导航到http://localhost:3462/Home/Index下</a></p><h4 id="处理路由"><a href="#处理路由" class="headerlink" title="处理路由"></a>处理路由</h4><p>ASP.NET url路由模块总是根据注册的顺序进行匹配，所以前一项设置默认值会导致后一项永远得不到匹配</p><p>路由同时可以添加约束列表,MapRoute的一个重载</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static<span class="built_in"> Route </span>MapRoute(this RouteCollection routes, string name, string url, object defaults, object constraints);</span><br></pre></td></tr></table></figure><p>可以利用正则表达式将不正确的url拒之门外</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">routes.MapRoute(</span><br><span class="line"><span class="symbol">              name:</span> <span class="string">"Product"</span>,</span><br><span class="line"><span class="symbol">              url:</span> <span class="string">"&#123;controller&#125;/&#123;productid&#125;/&#123;locale&#125;"</span>,</span><br><span class="line"><span class="symbol">              defaults:</span> <span class="class">new </span>&#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, locale = <span class="string">"cn-ch"</span> &#125;,</span><br><span class="line"><span class="symbol">              constraints:</span> <span class="class">new </span>&#123; productid = @<span class="string">"\d&#123;4&#125;"</span>, locale = <span class="string">"[a-zA-Z]&#123;2&#125;-[a-zA-Z]&#123;2&#125;"</span> &#125;</span><br><span class="line">          );</span><br></pre></td></tr></table></figure><h4 id="路由处理程序"><a href="#路由处理程序" class="headerlink" title="路由处理程序"></a>路由处理程序</h4><p>路由处理程序实现了<code>IRouteHandler</code>的接口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IRouteHandler</span><br><span class="line">    &#123;</span><br><span class="line">        IHttpHandler GetHttpHandler(RequestContext requestContext);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>RequestContext</code>中封装了路由的相关信息，MVC框架并没有提供很对内置的路由处理程序，因为自定义路由的需求并不普遍</p><h4 id="处理物理文件的请求"><a href="#处理物理文件的请求" class="headerlink" title="处理物理文件的请求"></a>处理物理文件的请求</h4><p>在<code>RouteConfig.cs</code>下添加<code>routes.RouteExistingFiles = true;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterRoutes</span><span class="params">(RouteCollection routes)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            routes.RouteExistingFiles = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="阻止已定义的路由"><a href="#阻止已定义的路由" class="headerlink" title="阻止已定义的路由"></a>阻止已定义的路由</h4><p>相同地方</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">routes.IgnoreRoute(<span class="string">"&#123;resource&#125;.axd/&#123;*pathInfo&#125;"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="控制器类"><a href="#控制器类" class="headerlink" title="控制器类"></a>控制器类</h2><h3 id="编写控制器类"><a href="#编写控制器类" class="headerlink" title="编写控制器类"></a>编写控制器类</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> View();</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">    [<span class="meta">NonAction</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> ActionResult <span class="title">About</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">       。。。</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       [<span class="meta">ActionName(<span class="meta-string">"About"</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Qunimalegebi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">       ....</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> <code>[NonAction]</code>阻止action绑定到About方法上</p><p><code>[ActionName(&quot;About&quot;)]</code>指定Qunimalegebi方法的绑定action name</p><h3 id="操作和http动词"><a href="#操作和http动词" class="headerlink" title="操作和http动词"></a>操作和http动词</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[AcceptVerbs(HttpVerbs.Get|HttpVerbs.Post)]</span><br><span class="line">        <span class="keyword">public</span> ActionResult Contact()</span><br><span class="line">        &#123;</span><br><span class="line">            ViewBag.Message = <span class="string">"Your contact page."</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">View</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>通过<code>AcceptVerbs</code>特性绑定http请求方式，<code>httpverbs</code>枚举类型值</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">HttpVerbs</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Get = <span class="number">1</span>,</span><br><span class="line">        Post = <span class="number">2</span>,</span><br><span class="line">        Put = <span class="number">4</span>,</span><br><span class="line">        Delete = <span class="number">8</span>,</span><br><span class="line">        Head = <span class="number">16</span>,</span><br><span class="line">        Patch = <span class="number">32</span>,</span><br><span class="line">        Options = <span class="number">64</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>利用“|”可以响应多个请求方式</p><h3 id="处理输入数据"><a href="#处理输入数据" class="headerlink" title="处理输入数据"></a>处理输入数据</h3><h4 id="获取request对象中的输入数据"><a href="#获取request对象中的输入数据" class="headerlink" title="获取request对象中的输入数据"></a>获取request对象中的输入数据</h4><p>request中包含<code>form，querystring，cookie，header</code>等数据</p><h4 id="从路由中获取输入数据"><a href="#从路由中获取输入数据" class="headerlink" title="从路由中获取输入数据"></a>从路由中获取输入数据</h4><p>路由和上面得一致，controller中</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var str</span> = RouteData.Values[<span class="string">"locale"</span>];</span><br></pre></td></tr></table></figure><p>url：<a href="http://localhost:4426/home/1111/en-ed?data=11" target="_blank" rel="noopener">http://localhost:4426/home/1111/en-ed?data=11</a></p><p>str为en-ed，所以routedata捕获的是定义好的路由值，同时根据上述路由会匹配到第一个时直接结束，所以str2位null</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var str2 = RouteData.Values[<span class="string">"id"</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="利用valueprovider字典获取所有来源的值"><a href="#利用valueprovider字典获取所有来源的值" class="headerlink" title="利用valueprovider字典获取所有来源的值"></a>利用<code>valueprovider</code>字典获取所有来源的值</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str6 = ValueProvider.GetValue(<span class="string">"locale"</span>).AttemptedValue;<span class="comment">//路由的值</span></span><br><span class="line"><span class="keyword">var</span> str7 = ValueProvider.GetValue(<span class="string">"data"</span>).AttemptedValue;<span class="comment">//get值</span></span><br></pre></td></tr></table></figure><p><code>ValueProvider.GetValue(&quot;data&quot;)</code>会有两个属性</p><p><code>RawValue</code> Object类型原始值</p><p><code>AttemptedValue</code> string 强转成string类型的值</p><h3 id="产生操作结果"><a href="#产生操作结果" class="headerlink" title="产生操作结果"></a>产生操作结果</h3><p>controller类中大部分方法返回的都是<code>ActionResult</code>类型，下面就看看<code>ActionResult</code>类是什么</p><h4 id="actionresult构造"><a href="#actionresult构造" class="headerlink" title="actionresult构造"></a>actionresult构造</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ActionResult</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ActionResult</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>actionresult</code>类是抽象类，定义了一个方法为ExecuteResult。该方法为具体派生类执行时触发的一系列动作</p><h4 id="一些派生类"><a href="#一些派生类" class="headerlink" title="一些派生类"></a>一些派生类</h4><ul><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.contentresult.aspx" target="_blank" rel="noopener">ContentResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.emptyresult.aspx" target="_blank" rel="noopener">EmptyResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.fileresult.aspx" target="_blank" rel="noopener">FileResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.httpunauthorizedresult.aspx" target="_blank" rel="noopener">HttpUnauthorizedResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.javascriptresult.aspx" target="_blank" rel="noopener">JavaScriptResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.jsonresult.aspx" target="_blank" rel="noopener">JsonResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.redirectresult.aspx" target="_blank" rel="noopener">RedirectResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.redirecttorouteresult.aspx" target="_blank" rel="noopener">RedirectToRouteResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.viewresultbase.aspx" target="_blank" rel="noopener">ViewResultBase</a></li></ul><p><code>FileResult</code>派生</p><ul><li><code>FilePathResult</code>: 直接将一个文件发送给客户端</li></ul><p>可以通过更改报文头实现直接下载，不用浏览器解析</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">GetFile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> image = <span class="keyword">new</span> FilePathResult(<span class="string">"~/多云.jpg"</span>, <span class="string">"image/jpg"</span>);</span><br><span class="line">           Response.AddHeader(<span class="string">"Content-Disposition"</span>, <span class="string">$"attachment;filename=\"<span class="subst">&#123;HttpUtility.UrlDecode(<span class="string">"多云.jpg"</span>)&#125;</span>\""</span>);</span><br><span class="line"> </span><br><span class="line">           <span class="keyword">return</span> image;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li><code>FileContentResult</code>: 返回byte字节给客户端（比如图片）</li><li><code>FileStreamResult</code>: 返回流</li></ul><h4 id="深入执行操作结果的机制"><a href="#深入执行操作结果的机制" class="headerlink" title="深入执行操作结果的机制"></a>深入执行操作结果的机制</h4><p>控制器中我添加了以下方法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public ActionResult GetScript()</span><br><span class="line">        &#123;</span><br><span class="line">            string<span class="built_in"> script </span>= <span class="string">"alert('hello')"</span>;</span><br><span class="line">            return JavaScript(script);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看到返回的是JavaScript(script)；转到controller类定义可以看到</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">internal</span> <span class="keyword">virtual</span> JavaScriptResult <span class="title">JavaScript</span>(<span class="params"><span class="keyword">string</span> script</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> JavaScriptResult()</span><br><span class="line">  &#123;</span><br><span class="line">  Script=script  </span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以JavaScript(script)不过就是controller类的一个帮助方法而已，充当<code>JavaScriptResul</code>t的对象工厂的角色，类似的如View(),大家都知道View参数默认值是View文件夹下面控制器名文件夹下面的index，所以不传参数并不代表没有参数，<code>JavaScriptResult</code>实现</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JavaScriptResult</span> : <span class="title">ActionResult</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Script&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(context == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(context));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> response = context.HttpContext.Response;</span><br><span class="line">    response.ContentType = <span class="string">"application/x-javascript"</span>;</span><br><span class="line">    <span class="keyword">if</span>(Script != <span class="literal">null</span>)</span><br><span class="line">    response.Write(Script);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>JavaScriptResult</code>里面仍然是调用的<code>response.ContentType,response.write</code></p><p>注意：</p><ul><li>如果控制器没有返回<code>ActionResult</code>，不会抛出异常，mvc框架会将return中的任何值封装成<code>ContentResult</code>对象序列化返回，没有返回值会映射成<code>EmptyResult</code></li><li>mvc中只dotNet 4.5 之后可以使用<code>async/await</code>语法执行异步操作响应界面</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 人么总说事件会改变一切，当实际上你必须自己动手去改变一切——&lt;em&gt;Andy Warhol&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;对输入请求进行路由&quot;&gt;&lt;a href=&quot;#对输入请求进行路由&quot; class=&quot;headerlink&quot; title=&quot;对输入请求进行路由&quot;&gt;&lt;/a&gt;对输入请求进行路由&lt;/h2&gt;&lt;p&gt;在软件中，URI（统一资源标识符）是指通过一个位置或者名称来引用资源。&lt;/p&gt;
&lt;p&gt;当URI通过位置来识别资源是，就叫做URL（统一定位符）&lt;/p&gt;
&lt;p&gt;当URI通过名称标志资源时，就叫做URN（统一资源名称）&lt;/p&gt;
&lt;p&gt;ASP.NET MVC 旨在处理更通用的URI，ASP.NET Web Forms只要处理位置感知的物理资源
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="ASP.NET MVC5 编程实战" scheme="https://luox78.github.io/tags/ASP-NET-MVC5-%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>CSharp高效编程摘记</title>
    <link href="https://luox78.github.io/2018/02/07/CSharp%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B%E6%91%98%E8%AE%B0/"/>
    <id>https://luox78.github.io/2018/02/07/CSharp高效编程摘记/</id>
    <published>2018-02-07T12:10:04.134Z</published>
    <updated>2018-02-12T13:35:01.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询语法-query-syntax-的一个用处"><a href="#查询语法-query-syntax-的一个用处" class="headerlink" title="查询语法(query syntax)的一个用处"></a>查询语法(query syntax)的一个用处</h2><p><strong>循环创建集合|数组</strong>时，用查询语法(query syntax)会比普通控制流程的结构好点，</p><p>主要体现在：</p><ul><li>命令式的版本有时非常难以理解，要是没有注释或文档，后续维护人员将要重读整段代码才能进行开发。</li><li>另外，查询语法比循环结构能提供更具组合性的API。查询语法将很自然的把代码分解成小块代码，每一块仅仅对序列中元素进行单一的操作。查询语法的延迟执行模型也让开发者能将这些单一的操作组合成多步操作，且在一次遍历序列时完整执行。<a id="more"></a></li></ul><p>例子：用二元组生成坐标，返回的二元组按照其离远点距离的逆序排列</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;Tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; ProduceIndices()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> storage = <span class="keyword">new</span> List&lt;Tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">100</span>; y++)</span><br><span class="line">            <span class="keyword">if</span>(x + y &lt; <span class="number">100</span>)</span><br><span class="line">                storage.Add(Tuple.Create(x, y));</span><br><span class="line"></span><br><span class="line">    storage.Sort((point1, point2) =&gt; </span><br><span class="line">    (</span><br><span class="line">        point2.Item1 * point2.Item1 + point2.Item2 * point2.Item2</span><br><span class="line">    ).CompareTo(</span><br><span class="line">        point1.Item1 * point1.Item1 + point1.Item2 * point1.Item2</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;Tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; QueryIndices()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">from</span> x <span class="keyword">in</span> Enumerable.Range(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">           <span class="keyword">from</span> y <span class="keyword">in</span> Enumerable.Range(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">           <span class="keyword">where</span> x + y &lt; <span class="number">100</span></span><br><span class="line">           <span class="keyword">orderby</span> (x*x + y*y) <span class="keyword">descending</span></span><br><span class="line">           <span class="keyword">select</span> Tuple.Create(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用具名参数-named-parameter-减少重载"><a href="#使用具名参数-named-parameter-减少重载" class="headerlink" title="使用具名参数(named parameter)减少重载"></a>使用具名参数(named parameter)减少重载</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test2</span>(<span class="params"><span class="keyword">string</span> firstName,<span class="keyword">string</span> secondName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Console.WriteLine(<span class="string">$"<span class="subst">&#123;firstName&#125;</span><span class="subst">&#123;secondName&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test2(secondName: <span class="string">"78"</span>, firstName: <span class="string">"luox"</span>);<span class="comment">//luox78</span></span><br></pre></td></tr></table></figure><h2 id="理解几个等同性判断之间的关系"><a href="#理解几个等同性判断之间的关系" class="headerlink" title="理解几个等同性判断之间的关系"></a>理解几个等同性判断之间的关系</h2><p>当创建自定义类型时(无论是class还是struct)，应为类型定义”等同性”的含义。C#提供了4种不同的函数来判断两个对象是否”相等”：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">ReferenceEquals</span>(<span class="params"><span class="keyword">object</span> left, <span class="keyword">object</span> right</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> left, <span class="keyword">object</span> right</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> right</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="keyword">operator</span> ==(MyClass left, MyClass right);</span><br></pre></td></tr></table></figure><p><code>Object.ReferenceEquals()</code>和<code>Object.Equals()</code>这两个系统提供的静态方法，永远都不需要重新定义。</p><p><code>Object.ReferenceEquals()</code>判断的是对象引用，判断的是否拥有同样的对象标识(object identity)，所以若将一个值类型与它自身进行比较，方法返回的是<code>false</code>，因为值类型会进行装箱操作，造成引用地址不同。</p><p><code>Object.Equals()</code>对于引用类型默认使用对象标识判断，即跟<code>Object.ReferenceEquals()</code>一样，但对于值类型，因为System.ValueType重写了<code>Object.Equals()</code>方法，所以比较的是值是否相等(主要是struct)，但System.ValueType是所有值类型的基类，故实现比较时，用的是反射，效率并不高。</p><p>综上所述，自定义类型实现自己的比较方法就比较重要了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> : <span class="type">IEquatable</span>&lt;<span class="type">Student</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> int Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> string Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> bool Equals(<span class="keyword">object</span> obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Object.ReferenceEquals(obj, <span class="literal">null</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (Object.ReferenceEquals(<span class="keyword">this</span>, obj))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.GetType() != obj.GetType())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Equals(obj <span class="keyword">as</span> Student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> bool Equals(Student other)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Id != other.Id)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Name != other.Name)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，重写<code>Equals</code>方法时，需要同时重写<code>GetHashCode()</code>方法，详细可查看条目7。</p><p><code>operator==()</code>则相对简单。只要创建的是值类型，都必须重定义<code>operator==()</code>。理由和重写System.ValueType的<code>Equals</code>是一样的。而引用类型则应该避免重写<code>operator==()</code>。</p><h2 id="运行时常量-readonly-和编译期常量-const"><a href="#运行时常量-readonly-和编译期常量-const" class="headerlink" title="运行时常量(readonly)和编译期常量(const)"></a>运行时常量(readonly)和编译期常量(const)</h2><p>C#有两种类型的常量：<strong>编译期常量</strong>和<strong>运行时常量</strong>。两者有截然不同的行为，使用不当的话，会造成性能问题，如果没法确定，则使用慢点，但能保证正确的运行时常量。<br>运行时常量使用<code>readonly</code>关键字声明，编译期常量则使用<code>const</code>关键字声明：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明编译期常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> Millennium = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">//声明运行时常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">int</span> ThisYear = <span class="number">2017</span>;</span><br></pre></td></tr></table></figure><p>二者最重要的区别在于,<code>readonly</code>值是运行时解析的，而<code>const</code>是在生成IL码就已经确定。</p><p><code>const</code>声明的常量必须不能改变，若改变了，则需要重新编译所有引用的程序集。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查询语法-query-syntax-的一个用处&quot;&gt;&lt;a href=&quot;#查询语法-query-syntax-的一个用处&quot; class=&quot;headerlink&quot; title=&quot;查询语法(query syntax)的一个用处&quot;&gt;&lt;/a&gt;查询语法(query syntax)的一个用处&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;循环创建集合|数组&lt;/strong&gt;时，用查询语法(query syntax)会比普通控制流程的结构好点，&lt;/p&gt;
&lt;p&gt;主要体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令式的版本有时非常难以理解，要是没有注释或文档，后续维护人员将要重读整段代码才能进行开发。&lt;/li&gt;
&lt;li&gt;另外，查询语法比循环结构能提供更具组合性的API。查询语法将很自然的把代码分解成小块代码，每一块仅仅对序列中元素进行单一的操作。查询语法的延迟执行模型也让开发者能将这些单一的操作组合成多步操作，且在一次遍历序列时完整执行。
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="tips" scheme="https://luox78.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET04</title>
    <link href="https://luox78.github.io/2018/02/06/ASP.NET04/"/>
    <id>https://luox78.github.io/2018/02/06/ASP.NET04/</id>
    <published>2018-02-06T15:28:55.215Z</published>
    <updated>2018-02-07T12:42:43.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h4 id="html中添加表单"><a href="#html中添加表单" class="headerlink" title="html中添加表单"></a><strong>html中添加表单</strong></h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span> action=<span class="string">"ProcessUpload.ashx"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"file"</span> name=<span class="string">"file1"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"upload"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>文件上传注意点：</p><ol><li>必须使用<code>post</code></li><li>form中<code>enctype=&quot;multipart/form-data&quot;</code>，使用表单快</li><li>添加文件域 <code>&lt;input type=&quot;file&quot; name=&quot;file1&quot;/&gt;</code><a id="more"></a></li></ol><p><code>enctype</code>默认为application。。键值对形式，使用<code>multipart/form-data</code>后，request报文会生成分割符，将传输的数据进行块分割，以二进制形式发送到服务器</p><h4 id="ProcessUpload-ashx中处理上传的文件"><a href="#ProcessUpload-ashx中处理上传的文件" class="headerlink" title="ProcessUpload.ashx中处理上传的文件"></a><strong>ProcessUpload.ashx中处理上传的文件</strong></h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">file</span> = context.Request.Files[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">string</span> <span class="keyword">filename</span> = Path.GetFileName(<span class="keyword">file</span>.FileName);</span><br><span class="line"><span class="keyword">string</span> saveFilename = Guid.NewGuid().ToString() + <span class="string">"_"</span> + <span class="keyword">filename</span>;</span><br><span class="line"><span class="keyword">file</span>.SaveAs(context.Server.MapPath(<span class="string">"upload/"</span> + saveFilename));</span><br></pre></td></tr></table></figure><p><code>context.Request.Files[0]</code>获取上传的第一个文件</p><p><code>string filename = Path.GetFileName(file.FileName)</code>因为上传时文件名为绝对路径</p><p><code>string saveFilename = Guid.NewGuid().ToString() + &quot;_&quot; + filename;</code>保存文件的名字采用Guid加上原文件名字。</p><p><code>file.SaveAs(context.Server.MapPath(&quot;upload/&quot; + saveFilename));</code>SaveAs中使用的是绝对路径，所以可以将上传的文件放入任意地方！</p><p>此次我上传的是style.css，保存在\upload\689ea264-84b0-4124-989e-998f0ecb12e4_style.css下</p><h4 id="大量数据存储解决方法"><a href="#大量数据存储解决方法" class="headerlink" title="大量数据存储解决方法"></a>大量数据存储解决方法</h4><p>当碰到大量图片等数据时，放在一个文件夹显然不合适，这时候应该拆分为多层文件夹，将文件名与对应的位置信息存储在数据库中</p><p>解决方法，可以取每次上传文件的<code>hashcode</code>（共32位）与<code>0xf（1111）</code>做&amp;运算得到0-15之间的一个数作为第一层文件夹的名字，第二层分层将<code>hashcode</code>右移四位再做与，为下一层目录，。。一共可以产生16^8次方个文件夹</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> ProcessRequest(HttpContext <span class="keyword">context</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.ContentType</span> = <span class="string">"text/plain"</span>;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">context</span><span class="variable">.Request</span><span class="variable">.Files</span><span class="variable">.Count</span> == <span class="number">0</span>)<span class="comment">//无文件退出</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(<span class="string">"failed"</span>);</span><br><span class="line">           <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.End</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> file = <span class="keyword">context</span><span class="variable">.Request</span><span class="variable">.Files</span>[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">string</span> filename = System<span class="variable">.IO</span><span class="variable">.Path</span><span class="variable">.GetFileName</span>(file<span class="variable">.FileName</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">string</span> dir1 = (file<span class="variable">.GetHashCode</span>() &amp; <span class="number">0</span>xF)<span class="variable">.ToString</span>();<span class="comment">//第一层</span></span><br><span class="line">       <span class="keyword">string</span> dir2 = (file<span class="variable">.GetHashCode</span>() &gt;&gt; <span class="number">4</span> &amp; <span class="number">0</span>xF)<span class="variable">.ToString</span>();<span class="comment">//第二层</span></span><br><span class="line">       System<span class="variable">.IO</span><span class="variable">.Directory</span><span class="variable">.CreateDirectory</span>(<span class="keyword">context</span><span class="variable">.Server</span><span class="variable">.MapPath</span>(<span class="string">"upload"</span>) + <span class="string">"/"</span> + dir1 + <span class="string">"/"</span> + dir2);<span class="comment">//创建文件夹</span></span><br><span class="line"></span><br><span class="line">       file<span class="variable">.SaveAs</span>(<span class="keyword">context</span><span class="variable">.Server</span><span class="variable">.MapPath</span>(<span class="string">"Upload"</span>) + <span class="string">"/"</span> + dir1 + <span class="string">"/"</span> + dir2 + <span class="string">"/"</span> + Guid<span class="variable">.NewGuid</span>() + filename);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(<span class="string">"success"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>html：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ProcessDownload.ashx?id=BackButton.jpg"</span>&gt;</span>BackButton.jpg<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ProcessDownload.ashx?id=Computer.png"</span>&gt;</span>Computer.png<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ProcessDownload.ashx?id=Credentials_ENU.xml"</span>&gt;</span>Credentials_ENU.xml<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ashx:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">context</span>.Response.ContentType = <span class="string">"text/plain"</span><span class="comment">;</span></span><br><span class="line">       string filename = <span class="built_in">context</span>.Request[<span class="string">"id"</span>]<span class="comment">;</span></span><br><span class="line">       <span class="built_in">context</span>.Response.<span class="keyword">AddHeader("Content-Disposition", </span><span class="string">"attachment;filename="</span> + <span class="string">"\""</span> + HttpUtility.UrlDecode(filename) + <span class="string">"\""</span>)<span class="comment">;</span></span><br><span class="line">       <span class="built_in">context</span>.Response.WriteFile(<span class="string">"Download/"</span> + filename)<span class="comment">;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>context.Response.AddHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + &quot;\&quot;&quot; + HttpUtility.UrlDecode(filename) + &quot;\&quot;&quot;);</code>添加回复报文头 ：这是一个附件不用解析，同时文件名使用<code>HttpUtility.UrlDecode(filename)</code>是将<strong>中文转换成 对应的编码</strong>，防止乱码</p><p><code>context.Response.WriteFile(&quot;Download/&quot; + filename);</code>将文件以二进制直接返回</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; title=&quot;文件上传&quot;&gt;&lt;/a&gt;文件上传&lt;/h2&gt;&lt;h4 id=&quot;html中添加表单&quot;&gt;&lt;a href=&quot;#html中添加表单&quot; class=&quot;headerlink&quot; title=&quot;html中添加表单&quot;&gt;&lt;/a&gt;&lt;strong&gt;html中添加表单&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;form&lt;/span&gt; method=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt; enctype=&lt;span class=&quot;string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt; action=&lt;span class=&quot;string&quot;&gt;&quot;ProcessUpload.ashx&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;file1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&quot;upload&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;文件上传注意点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必须使用&lt;code&gt;post&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;form中&lt;code&gt;enctype=&amp;quot;multipart/form-data&amp;quot;&lt;/code&gt;，使用表单快&lt;/li&gt;
&lt;li&gt;添加文件域 &lt;code&gt;&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;file1&amp;quot;/&amp;gt;&lt;/code&gt;
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="文件上传下载" scheme="https://luox78.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET03</title>
    <link href="https://luox78.github.io/2018/02/05/ASP.NET03/"/>
    <id>https://luox78.github.io/2018/02/05/ASP.NET03/</id>
    <published>2018-02-05T13:51:02.563Z</published>
    <updated>2018-02-05T15:37:06.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ASP-NET简单三层步骤"><a href="#ASP-NET简单三层步骤" class="headerlink" title="ASP.NET简单三层步骤"></a>ASP.NET简单三层步骤</h2><ol><li>建立好相应的文件夹</li></ol><table><thead><tr><th>文件夹</th><th>用处</th></tr></thead><tbody><tr><td>CURD.BLL</td><td>CURD的业务逻辑层</td></tr><tr><td>CURD.DAL</td><td>CURD的数据访问层</td></tr><tr><td>CURD.Model</td><td>CURD的传输层模型（本次将数据库模型与dto混为一谈）</td></tr><tr><td>CURD.UI</td><td>CURD的网页端</td></tr></tbody></table> <a id="more"></a><ol><li><p>CURD.UI<br>创建好模板Register.html</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> method=<span class="string">"post"</span> action=<span class="string">"Register.ashx"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;loginid&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;password&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password1"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;comfirm&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password2"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"注册"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>创建好Register的一般处理程序（请求页面）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> ProcessRequest(HttpContext <span class="keyword">context</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.ContentType</span> = <span class="string">"text/html"</span>;</span><br><span class="line">         <span class="keyword">string</span> id = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"id"</span>];</span><br><span class="line">         <span class="keyword">string</span> password1 = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"password1"</span>];</span><br><span class="line">         <span class="keyword">string</span> password2 = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"password2"</span>];</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//读取模板</span></span><br><span class="line">         <span class="keyword">string</span> html = File<span class="variable">.ReadAllText</span>(<span class="keyword">context</span><span class="variable">.Server</span><span class="variable">.MapPath</span>(<span class="string">"Template/Register.html"</span>));</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (id == <span class="literal">null</span> || password1 == <span class="literal">null</span> || password2 == <span class="literal">null</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">//第一次直接返回页面</span></span><br><span class="line">             <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(html);</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (password1 != password2)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">//密码不正确返回，并替换告知</span></span><br><span class="line">             html = html<span class="variable">.Replace</span>(<span class="string">"&lt;input type=\"password\" name=\"password2\"&gt;"</span>,</span><br><span class="line">                 <span class="string">"&lt;input type=\"password\" name=\"password2\"&gt;两次密码不一致"</span>);</span><br><span class="line">             <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(html);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">            <span class="comment">//todo 插入注册信息，返回成功还是失败</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建对应的Model</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CURD.Model</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> AutoId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>只在dal层进行数据库操作</p><p>这里只添加一个方法，就是注册</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int Add(User user)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//可以设置成读取配置文件constr，返回成功1，失败-1</span></span><br><span class="line">            string constr = <span class="string">"data source=”LUOX78“的WIN;initial catalog=school;integrated security=true"</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> con = <span class="keyword">new</span> <span class="type">SqlConnection</span>(constr))</span><br><span class="line">                &#123;</span><br><span class="line">                    string sql = <span class="string">"insert into Users(loginId,loginPwd) values(@id,@pwd)"</span>;</span><br><span class="line">                    <span class="keyword">var</span> pms = <span class="keyword">new</span> <span class="type">SqlParameter</span>[]</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="type">SqlParameter</span>(<span class="string">"@id"</span>,user.Id),</span><br><span class="line">                        <span class="keyword">new</span> <span class="type">SqlParameter</span>(<span class="string">"@pwd"</span>,user.Password)</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">var</span> cmd = <span class="keyword">new</span> <span class="type">SqlCommand</span>(sql, con))</span><br><span class="line">                    &#123;</span><br><span class="line">                        cmd.Parameters.AddRange(pms);</span><br><span class="line">                        con.Open();</span><br><span class="line">                        cmd.ExecuteNonQuery();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>bll调用dal并返回成功还是失败</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CURD.BLL</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UsersBll</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> UsersDal db=<span class="keyword">new</span> UsersDal();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Add</span>(<span class="params">User user</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> db.Add(user) == <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UI层补全验证的步骤</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">UsersBll userService = <span class="keyword">new</span> <span class="type">UsersBll</span>();</span><br><span class="line">                <span class="keyword">var</span> res = userService.Add(<span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">                &#123;</span><br><span class="line">                    Id = id,</span><br><span class="line">                    Password = password1</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (res)</span><br><span class="line">                &#123;</span><br><span class="line">                    context.Response.Write(<span class="string">"注册成功"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    context.Response.Write(<span class="string">"注册失败"</span>);</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ASP-NET简单三层步骤&quot;&gt;&lt;a href=&quot;#ASP-NET简单三层步骤&quot; class=&quot;headerlink&quot; title=&quot;ASP.NET简单三层步骤&quot;&gt;&lt;/a&gt;ASP.NET简单三层步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;建立好相应的文件夹&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件夹&lt;/th&gt;
&lt;th&gt;用处&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CURD.BLL&lt;/td&gt;
&lt;td&gt;CURD的业务逻辑层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CURD.DAL&lt;/td&gt;
&lt;td&gt;CURD的数据访问层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CURD.Model&lt;/td&gt;
&lt;td&gt;CURD的传输层模型（本次将数据库模型与dto混为一谈）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CURD.UI&lt;/td&gt;
&lt;td&gt;CURD的网页端&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="简单三层" scheme="https://luox78.github.io/tags/%E7%AE%80%E5%8D%95%E4%B8%89%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET02</title>
    <link href="https://luox78.github.io/2018/02/04/ASP.NET02/"/>
    <id>https://luox78.github.io/2018/02/04/ASP.NET02/</id>
    <published>2018-02-04T04:03:15.281Z</published>
    <updated>2018-02-04T12:04:27.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建IIS本地服务器"><a href="#搭建IIS本地服务器" class="headerlink" title="搭建IIS本地服务器"></a>搭建IIS本地服务器</h2><p>打开服务</p><p><img src="https://luox78.github.io/images/IIS01.png" alt="https://luox78.github.io/images/IIS01.png"><br><a id="more"></a><br>打开IIS管理器</p><p><img src="https://luox78.github.io/images/IIS02.png" alt="https://luox78.github.io/images/IIS02.png"></p><p>新建网站</p><p><img src="https://luox78.github.io/images/IIS03.png" alt="https://luox78.github.io/images/IIS03.png"></p><p>浏览新建立的网站</p><p><img src="https://luox78.github.io/images/IIS04.png" alt="https://luox78.github.io/images/IIS04.png"></p><p>问题：</p><p>数据库访问用户权限问题：更改网站用户为netservice</p><p><img src="https://luox78.github.io/images/IIS数据库问题改身份.png" alt="https://luox78.github.io/images/IIS数据库问题改身份.png"></p><p>目录浏览权限问题</p><p><img src="https://luox78.github.io/images/IIS目录浏览权限.png" alt="https://luox78.github.io/images/IIS目录浏览权限.png"></p><p>dotnet版本问题</p><p><img src="https://luox78.github.io/images/IIS修改dotnet版本.png" alt="https://luox78.github.io/images/IIS修改dotnet版本.png"></p><h2 id="IIS处理用户请求与响应过程"><a href="#IIS处理用户请求与响应过程" class="headerlink" title="IIS处理用户请求与响应过程"></a>IIS处理用户请求与响应过程</h2><ol><li>URL封装报文</li><li>http.sys内核模块监听对某个端口的请求</li><li>读取注册表获取哪个进程可以处理该请求</li><li>inetinfo.exe处理请求启动w3wp.exe，分动态资源与静态资源</li><li>对于静态资源直接找到磁盘上的文件返回</li><li>对于动态资源，找到处理该动态页面的<code>dll</code>，对于<code>aspx</code>找到aspnet.isapi.dll(C++)寄宿在w3wp.exe运行</li><li>aspnet.isapi.dll开启dotnet运行时</li><li>获取一个实现了<code>IISAPIRuntime</code>接口的对象<code>ISAPIRuntime</code>，调用<code>ProcessRequest</code>方法(参数之一ecb是传入的数据句柄)</li><li><code>ProcessRequest</code>对请求报文进行简单的封装成<code>ISAPIWorkerRequest</code>（wk）对象</li><li>调用<code>HttpRuntime.ProcessRequest(wk)</code>对wk进行详细封装成<code>HttpContext</code>对象包含<code>HttpRequest</code>，<code>HttpResponse</code></li><li>通过工厂模式【1】创建一个<code>HttpApplication</code>对象后调用<code>ProcessRequest</code>方法</li><li>。。。</li></ol><p><img src="https://luox78.github.io/images/相信过程.png" alt="https://luox78.github.io/images/相信过程.png"></p><p>【1】</p><p><strong>为什么使用工厂模式</strong>：</p><p>初始化工作如果是很长一段代码，说明要做的工作很多，将很多工作装入一个方法中，相当于将很多鸡蛋放在一个篮子里，是很危险的，这也是有悖于Java<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">面向对象</a>的原则，面向对象的封装(Encapsulation)和分派(Delegation)告诉我们，尽量将长的代码分派“切割”成每段，将每段再“封装”起来(减少段和段之间耦合联系性)，这样，就会将风险分散，以后如果需要修改，只要更改每段，不会再发生牵一动百的事情</p><p><strong>如何使用工厂模式：</strong></p><p>使用接口派生实体类，通过工厂模式创建不同的对象</p><p><strong>简单工厂：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ISample <span class="title">creator</span><span class="params">(<span class="keyword">int</span> which)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (which==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SampleA();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (which==<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SampleB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在你的程序中,如果要创建<code>ISample</code>的实列时候可以使用</p><p><code>ISample sampleA=Factory.creator(1);</code></p><p><strong>抽象工厂：</strong></p><p>工厂模式中有: 工厂方法(Factory Method) <a href="https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82" target="_blank" rel="noopener">抽象工厂</a>(Abstract Factory).</p><p><strong>这两个模式区别在于需要创建对象的复杂程度上。如果我们创建对象的方法变得复杂了,如上面工厂方法中是创建一个对象Sample,如果我们还有新的产品接口Sample2.</strong></p><p>这里假设：Sample有两个实体类SampleA和SampleB，而Sample2也有两个实体类Sample2A和Sample2B</p><p>那么，我们就将上例中Factory变成<a href="https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E7%B1%BB" target="_blank" rel="noopener">抽象类</a>,将共同部分封装在抽象类中,不同部分使用子类实现，下面就是将上例中的Factory拓展成抽象工厂:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">Sample</span> creator();</span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">Sample2</span> creator(<span class="type">String</span> name);</span><br><span class="line">&#125;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    public <span class="type">Sample</span> creator()&#123;</span><br><span class="line">        .........</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">SampleA</span></span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="type">Sample2</span> creator(<span class="type">String</span> name)&#123;</span><br><span class="line">        .........</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Sample2A</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BombFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    public <span class="type">Sample</span> creator()&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">SampleB</span></span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="type">Sample2</span> creator(<span class="type">String</span> name)&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Sample2B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://baike.baidu.com/item/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/9852061?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/9852061?fr=aladdin</a></p></blockquote><h2 id="创建一个简单的ASP-NET"><a href="#创建一个简单的ASP-NET" class="headerlink" title="创建一个简单的ASP.NET"></a>创建一个简单的ASP.NET</h2><p>新建html登录界面</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> method=<span class="string">"post"</span> action=<span class="string">"LoginHandler.ashx"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;loginid&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;password&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"login"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>编写LoginHandler.ashx</p><p>从页面获取值的方式：</p><p>get：<code>context.Request.QueryString[&quot;id&quot;]</code></p><p>post：<code>context.Request.Form[&quot;id&quot;]</code></p><p>通用：<code>context.Request[&quot;id&quot;]</code> || <code>context.Request.Params[&quot;id&quot;]</code></p><p>这里我简单的连接数据库进行判断</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> id = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"id"</span>];</span><br><span class="line">       <span class="keyword">string</span> password = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">string</span> constr = <span class="string">"data source=”LUOX78“的WIN;initial catalog=school;integrated security=true"</span>;</span><br><span class="line">       <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">       using (<span class="keyword">var</span> con = <span class="keyword">new</span> SqlConnection(constr))</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">string</span> sql = <span class="string">"select count(*) from Users where loginId=@id and loginPwd=@pwd"</span>;</span><br><span class="line">           <span class="keyword">var</span> pms = <span class="keyword">new</span> SqlParameter[]</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">new</span> SqlParameter(<span class="string">"@id"</span>,id),</span><br><span class="line">               <span class="keyword">new</span> SqlParameter(<span class="string">"@pwd"</span>,password)</span><br><span class="line">           &#125;;</span><br><span class="line">           using (<span class="keyword">var</span> cmd = <span class="keyword">new</span> SqlCommand(sql, con))</span><br><span class="line">           &#123;</span><br><span class="line">               cmd<span class="variable">.Parameters</span><span class="variable">.AddRange</span>(pms);</span><br><span class="line">               con<span class="variable">.Open</span>();</span><br><span class="line">               res = (<span class="keyword">int</span>)cmd<span class="variable">.ExecuteScalar</span>();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(res &gt; <span class="number">0</span> ? <span class="string">"登陆成功"</span> : <span class="string">"失败"</span>);</span><br></pre></td></tr></table></figure><p>登录错误应该重定向，此时response返回的是302，浏览器重新get</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">context</span><span class="selector-class">.Response</span><span class="selector-class">.Redirect</span>("<span class="selector-tag">login</span><span class="selector-class">.html</span>");</span><br></pre></td></tr></table></figure><p>有时一般处理程序会进行读取返回</p><p>获取页面绝对路径使用<code>context.Server.MapPath(&quot;login.html&quot;);</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var html = <span class="keyword">File</span>.ReadAllText(<span class="string">"path"</span>);</span><br><span class="line"><span class="comment">//todo 添加处理</span></span><br><span class="line">context.Response.<span class="keyword">Write</span>(html);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建IIS本地服务器&quot;&gt;&lt;a href=&quot;#搭建IIS本地服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建IIS本地服务器&quot;&gt;&lt;/a&gt;搭建IIS本地服务器&lt;/h2&gt;&lt;p&gt;打开服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://luox78.github.io/images/IIS01.png&quot; alt=&quot;https://luox78.github.io/images/IIS01.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="IIS请求流程" scheme="https://luox78.github.io/tags/IIS%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    
      <category term="工厂模式" scheme="https://luox78.github.io/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET01</title>
    <link href="https://luox78.github.io/2018/02/03/ASP.NET01/"/>
    <id>https://luox78.github.io/2018/02/03/ASP.NET01/</id>
    <published>2018-02-03T05:39:29.099Z</published>
    <updated>2018-02-03T07:58:48.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输入域名发送过程"><a href="#输入域名发送过程" class="headerlink" title="输入域名发送过程"></a>输入域名发送过程</h2><ol><li>输入域名后，浏览器会先发送给DNS解析得到IP地址</li><li>浏览器封装http报文发送服务器</li><li>服务器根据报文，返回相对应的（静态，动态）网页</li></ol><p>静态页面：在服务器就相当于直接读取文件字符串然后返回客户端浏览器；（任何时候访问看到的都是一样的界面。）<a id="more"></a></p><p>动态页面：在服务器是先交给某语言环境虚拟机编译运行，按照语法生成代码返回客户端浏览器。（不同条件和时候访问看到的都界面也不同。）</p><p>（每次碰到新的资源都会触发新的请求，如css，js等文件）</p><h2 id="HTTP、Socket、TCP的区别"><a href="#HTTP、Socket、TCP的区别" class="headerlink" title="HTTP、Socket、TCP的区别"></a>HTTP、Socket、TCP的区别</h2><p>这三个概念经常被谈到，也是比较容易被混掉的概念。在回顾之前我们先看一下这三者在TCP/IP协议族中的位置关系：</p><p><img src="http://cc.cocimg.com/api/uploads/20160323/1458719461811413.png" alt="1053533-2139768be5c88e8b.png"></p><p>图4.1 层次关系.png</p><p>HTTP是应用层的协议，更靠近用户端；TCP是传输层的协议；而socket是从传输层上抽象出来的一个抽象层，本质是接口。所以本质上三种还是很好区分的。尽管如此，有时候你可能会懵逼，HTTP连接、TCP连接、socket连接有什么区别？好吧，如果上面的图解释的还是不够清楚的话，我们继续往下看。</p><p><strong>1、TCP连接与HTTP连接的区别</strong></p><p>上文提过，HTTP是基于TCP的，客户端往服务端发送一个HTTP请求时第一步就是要建立与服务端的TCP连接，也就是先三次握手，“你好，你好，你好”。从HTTP 1.1开始支持持久连接，也就是一次TCP连接可以发送多次的HTTP请求。</p><p>小总结：HTTP基于TCP</p><p><strong>2、TCP连接与Socket连接的区别</strong></p><p>在图4.1中我们提到，socket层只是在TCP/UDP传输层上做的一个抽象接口层，因此一个socket连接可以基于连接，也有可能基于UDP。基于TCP协议的socket连接同样需要通过三次握手建立连接，是可靠的；基于UDP协议的socket连接不需要建立连接的过程，不过对方能不能收到都会发送过去，是不可靠的，大多数的即时通讯IM都是后者。</p><p>小总结：Socket也基于TCP</p><p><strong>3、HTTP连接与Socket连接的区别</strong></p><p>区分这两个概念是比较有意义的，毕竟TCP看不见摸不着，HTTP与Socket是实实在在能用到的。</p><ul><li>HTTP是短连接，Socket(基于TCP协议的)是长连接。尽管HTTP1.1开始支持持久连接，但仍无法保证始终连接。而Socket连接一旦建立TCP三次握手，除非一方主动断开，否则连接状态一直保持。</li><li>HTTP连接服务端无法主动发消息，Socket连接双方请求的发送先后限制。这点就比较重要了，因为它将决定二者分别适合应用在什么场景下。HTTP采用“请求-响应”机制，在客户端还没发送消息给服务端前，服务端无法推送消息给客户端。必须满足客户端发送消息在前，服务端回复在后。Socket连接双方类似peer2peer的关系，一方随时可以向另一方喊话。</li></ul><p><strong>4、问题来了：什么时候该用HTTP，什么时候该用socket</strong></p><p>这个问题的提出是很自然而然的。当你接到一个与另一方的网络通讯需求，自然会考虑用HTTP还是用Socket。</p><ul><li>用HTTP的情况：双方不需要时刻保持连接在线，比如客户端资源的获取、文件上传等。</li><li>用Socket的情况：大部分即时通讯应用(QQ、微信)、聊天室、苹果APNs等</li></ul><h2 id="http报文详解"><a href="#http报文详解" class="headerlink" title="http报文详解"></a>http报文详解</h2><p><img src="https://luox78.github.io/images/http01.jpg" alt="https://luox78.github.io/images/http01.jpg"></p><p>（sp空格 CRLF换行 http post数据会放入请求体）</p><p><img src="https://luox78.github.io/images/http02.png" alt="https://luox78.github.io/images/http02.png"></p><p>—–请求报文———–</p><p>GET <a href="https://luox78.github.io/">https://luox78.github.io/</a> HTTP/1.1<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8<br>Accept-Language: zh-cn<br>Accept-Encoding: gzip,</p><p>deflate<br>User-Agent: Mozilla/4.0 (compatible; MSIE 6.0;<br>Windows NT 5.1; SV1; .NET CLR 2.0.50727)<br>Connection: Keep-Alive </p><p>—–响应报文————</p><p>HTTP/1.1 200 OK<br>Connection: keep-alive<br>Date: Thu, 26 Jul 2007 14:00:02 GMT<br>Server: Microsoft-IIS/6.0<br>X-Powered-By: ASP.NET<br>Content-Length: 190<br>Content-Type: text/html<br>Set-Cookie: ASPSESSIONIDSAATTCSQ=JOPPKDCAMHHBEOICJPGPBJOB;<br>path=/<br>Cache-control: private </p><h2 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h2><p><strong>1xx</strong> <strong>（临时响应）</strong><br>用于表示临时响应并需要请求者执行操作才能继续的状态代码。</p><table><thead><tr><th><strong>代码<em>**</em></strong></th><th><strong>说明<em>**</em></strong></th></tr></thead><tbody><tr><td>100（继续）</td><td>请求者应当继续提出请求。服务器返回此代码则意味着，服务器已收到了请求的第一部分，现正在等待接收其余部分。</td></tr><tr><td>101（切换协议）</td><td>请求者已要求服务器切换协议，服务器已确认并准备进行切换。</td></tr></tbody></table><p><strong>2xx</strong> <strong>（成功）</strong></p><p>用于表示服务器已成功处理了请求的状态代码。</p><table><thead><tr><th><strong>代码<em>**</em></strong></th><th><strong>说明<em>**</em></strong></th></tr></thead><tbody><tr><td>200（成功）</td><td>服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果您的服务器log日志文件显示为此状态，那么，这表示请求成功。</td></tr><tr><td>201（已创建）</td><td>请求成功且服务器已创建了新的资源。</td></tr><tr><td>202（已接受）</td><td>服务器已接受了请求，但尚未对其进行处理。</td></tr><tr><td>203（非授权信息）</td><td>服务器已成功处理了请求，但返回了可能来自另一来源的信息。</td></tr><tr><td>204（无内容）</td><td>服务器成功处理了请求，但未返回任何内容。</td></tr><tr><td>205（重置内容）</td><td>服务器成功处理了请求，但未返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如清除表单内容以输入新内容）。</td></tr><tr><td>206（部分内容）</td><td>服务器成功处理了部分 GET 请求。</td></tr></tbody></table><p><strong>3xx</strong> <strong>（已重定向）</strong><br>要完成请求，您需要进一步进行操作。通常，这些状态代码是永远重定向的。Google建议：在每次请求时使用的重定向要少于5个。您可以使用网站管理员工具来查看Googlebot<br>(google机器人程序)在抓取您已重定向的网页时是否会遇到问题。诊断下的抓取错误页中列出了Googlebot 由于重定向错误而无法抓取的网址。</p><table><thead><tr><th><strong>代码<em>**</em></strong></th><th><strong>说明<em>**</em></strong></th></tr></thead><tbody><tr><td>300（多种选择）</td><td>服务器根据请求可执行多种操作。服务器可根据请求者 (User agent) 来选择一项操作，或提供操作列表供请求者选择。</td></tr><tr><td>301（永久移动）</td><td>请求的网页已被永久移动到新位置。服务器返回此响应（作为对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td></tr><tr><td>302（临时移动）</td><td>服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置。</td></tr><tr><td>303（查看其他位置）</td><td>当请求者应对不同的位置进行单独的 GET 请求以检索响应时，服务器会返回此代码。对于除 HEAD 请求之外的所有请求，服务器会自动转到其他位置。</td></tr><tr><td>304（未修改）</td><td>自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改过，您应当将服务器配置为返回此响应（称为If-Modified-Since HTTP 标头）。</td></tr><tr><td>305（使用代理）</td><td>请求者只能使用代理访问请求的网页。如果服务器返回此响应，那么，服务器还会指明请求者应当使用的代理。</td></tr><tr><td>307（临时重定向）</td><td>服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置。但由于 搜索引擎会继续抓取原有位置并将其编入索引，因此您不应使用此代码来通知搜索引擎某个页面或网站已被移动。</td></tr></tbody></table><p><strong>4xx</strong> <strong>（请求错误）</strong><br>这些状态代码表示，请求可能出错，已妨碍了服务器对请求的处理。</p><table><thead><tr><th><strong>代码<em>**</em></strong></th><th><strong>说明<em>**</em></strong></th></tr></thead><tbody><tr><td>400（错误请求）</td><td>服务器不理解请求的语法。</td></tr><tr><td>401（未授权）</td><td>请求要求进行身份验证。登录后，服务器可能会返回对页面的此响应。</td></tr><tr><td>403（已禁止）</td><td>服务器拒绝请求。如果在搜索引擎尝试抓取您网站上的有效网页时显示此状态代码，那么，这可能是您的服务器或主机拒绝搜索引擎对其进行访问。</td></tr><tr><td>404（未找到）</td><td>服务器找不到请求的网页。例如，如果请求是针对服务器上不存在的网页进行的，那么，服务器通常会返回此代码。  如果您的网站上没有robots.txt 文件，而您在 Google 网站管理员工具”故障诊断”标签的”网络抓取”-“找不到”页上发现此状态。然而，如果您有robots.txt 文件而又发现了此状态，那么，这说明您的  robots.txt 文件可能是命名错误或位于错误的位置。（该文件应当位于根目录下，且应当名为  robots.txt）。  如果您在Googlebot  尝试抓取的网址上发现此状态（位于”诊断”标签的 HTTP 错误页上），那么，这表示  Googlebot 所追踪的可能是另一网页中的无效链接（旧链接或输入有误的链接）。</td></tr><tr><td>405（方法禁用）</td><td>禁用请求中所指定的方法。</td></tr><tr><td>406（不接受）</td><td>无法使用请求的内容特性来响应请求的网页。</td></tr><tr><td>407（需要代理授权）</td><td>此状态代码与 401（未授权）类似，但却指定了请求者应当使用代理进行授权。如果服务器返回此响应，那么，服务器还会指明请求者应当使用的代理。</td></tr><tr><td>408（请求超时）</td><td>服务器等候请求时超时。</td></tr><tr><td>409（冲突）</td><td>服务器在完成请求时发生冲突。服务器必须包含有关响应中所发生的冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，同时会提供两个请求的差异列表。</td></tr><tr><td>410（已删除）</td><td>如果请求的资源已被永久删除，那么，服务器会返回此响应。该代码与 404（未找到）代码类似，但在资源以前有但现在已经不复存在的情况下，有时会替代  404 代码出现。如果资源已被永久删除，那么，您应当使用 301 代码指定该资源的新位置。</td></tr><tr><td>411（需要有效长度）</td><td>服务器不会接受包含无效内容长度标头字段的请求。</td></tr><tr><td>412（未满足前提条）</td><td>服务器未满足请求者在请求中设置的其中一个前提条件。</td></tr><tr><td>413（请求实体过大）</td><td>服务器无法处理请求，因为请求实体过大，已超出服务器的处理能力。</td></tr><tr><td>414（请求的 URI 过）</td><td>请求的 URI（通常为网址）过长，服务器无法进行处理。</td></tr><tr><td>415(不支持的媒体类型)</td><td>请求的格式不受请求页面的支持。</td></tr><tr><td>416(请求范围不符合要求)</td><td>如果请求是针对网页的无效范围进行的，那么，服务器会返回此状态代码。</td></tr><tr><td>417（未满足期望值）</td><td>服务器未满足”期望”请求标头字段的要求。</td></tr></tbody></table><p><strong>5xx</strong> <strong>（服务器错误）</strong><br>这些状态代码表示，服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。</p><table><thead><tr><th><strong>代码<em>**</em></strong></th><th><strong>说明<em>**</em></strong></th></tr></thead><tbody><tr><td>500（服务器内部错误）</td><td>服务器遇到错误，无法完成请求。</td></tr><tr><td>501（尚未实施）</td><td>服务器不具备完成请求的功能。例如，当服务器无法识别请求方法时，服务器可能会返回此代码。</td></tr><tr><td>502（错误网关）</td><td>服务器作为网关或代理，从上游服务器收到了无效的响应。</td></tr><tr><td>503（服务不可用）</td><td>目前无法使用服务器（由于超载或进行停机维护）。通常，这只是一种暂时的状态。</td></tr><tr><td>504（网关超时）</td><td>服务器作为网关或代理，未及时从上游服务器接收请求。</td></tr><tr><td>505（HTTP 版本不受支持）</td><td>服务器不支持请求中所使用的 HTTP 协议版本。</td></tr></tbody></table><h2 id="自己写一个IIS（静态）"><a href="#自己写一个IIS（静态）" class="headerlink" title="自己写一个IIS（静态）"></a>自己写一个IIS（静态）</h2><ol><li>写一个IIS服务端，接收用户的请求，并且把请求报文显示到文本框中。</li><li>把请求的报文封装到HttpContext中<ol><li>HttpContext，添加Response与Request属性。</li><li>HttpRequest,解析报文，获取请求方法Method和请求路径RequestUrl</li><li>HttpResponse,添加ResponseBody属性，和ResponseHeader属性（只读）</li></ol></li><li>发送到用户浏览器</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;输入域名发送过程&quot;&gt;&lt;a href=&quot;#输入域名发送过程&quot; class=&quot;headerlink&quot; title=&quot;输入域名发送过程&quot;&gt;&lt;/a&gt;输入域名发送过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;输入域名后，浏览器会先发送给DNS解析得到IP地址&lt;/li&gt;
&lt;li&gt;浏览器封装http报文发送服务器&lt;/li&gt;
&lt;li&gt;服务器根据报文，返回相对应的（静态，动态）网页&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;静态页面：在服务器就相当于直接读取文件字符串然后返回客户端浏览器；（任何时候访问看到的都是一样的界面。）
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="http协议" scheme="https://luox78.github.io/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="模拟IIS" scheme="https://luox78.github.io/tags/%E6%A8%A1%E6%8B%9FIIS/"/>
    
  </entry>
  
  <entry>
    <title>多线程01</title>
    <link href="https://luox78.github.io/2018/02/01/thread01/"/>
    <id>https://luox78.github.io/2018/02/01/thread01/</id>
    <published>2018-02-01T12:36:45.740Z</published>
    <updated>2018-02-03T05:40:43.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程线程应用程序域概念"><a href="#进程线程应用程序域概念" class="headerlink" title="进程线程应用程序域概念"></a>进程线程应用程序域概念</h2><p>进程，线程略</p><p>应用程序域（AppDomain）：它提供安全而通用的处理单元，公共语言运行库可使用它来提供应用程序之间的隔离。您可以在具有同等隔离级别（存在于单独的进程中）的单个进程中运行几个应用程序域，而不会造成进程间调用或进程间切换等方面的额外开销。优势： 在一个应用程序中出现的错误不会影响其他应用程序。能够在不停止整个进程的情况下停止单个应用程序。应用程序域形成了托管代码的隔离、卸载和安全边界。在任意给定时间，每一线程都在一个应用程序域中执行。</p><a id="more"></a><p>线程拥有自己的“程序计数器”用来记录下一条要执行的指令。</p><p>线程拥有自己的寄存器，保存着线程当前的工作变量</p><p>线程拥有自己的堆栈，用来记录执行历史其中每一帧记保存了一调用的但是还没有返回的过程</p><h2 id="相关进程操作"><a href="#相关进程操作" class="headerlink" title="相关进程操作"></a>相关进程操作</h2><p><code>Process</code>类在<code>System.Diagnostics</code>命名空间下</p><p>打印所有进程名</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> processes = Process.GetProcesses();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> processes)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item.ProcessName);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>启动关闭某进程</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var p = Process.Start(<span class="string">"Notepad.exe"</span>)<span class="comment">;</span></span><br><span class="line">Thread.Sleep(<span class="number">1000</span>)<span class="comment">;</span></span><br><span class="line">p.Kill()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>通过<code>AppDomain</code>启动”新”进程(系统不会创建新的进程)</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(AppDomain.CurrentDomain.FriendlyName)<span class="comment">;</span></span><br><span class="line">var appDomain = AppDomain.CreateDomain(<span class="string">"NewAppDomain"</span>)<span class="comment">;</span></span><br><span class="line">appDomain.ExecuteAssembly(<span class="string">"assemblyName"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="线程操作见https-luox78-github-io-tags-thread"><a href="#线程操作见https-luox78-github-io-tags-thread" class="headerlink" title="线程操作见https://luox78.github.io/tags/thread/"></a>线程操作见<a href="https://luox78.github.io/tags/thread/">https://luox78.github.io/tags/thread/</a></h2><h2 id="WinForm中跨线程访问控件"><a href="#WinForm中跨线程访问控件" class="headerlink" title="WinForm中跨线程访问控件"></a>WinForm中跨线程访问控件</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.textBox.Invoke((<span class="keyword">delegate</span>)<span class="function"><span class="keyword">method</span>,<span class="title">params</span> <span class="title">arguements</span>);</span></span><br></pre></td></tr></table></figure><p>method可以为<code>new Action&lt;string&gt;(methodName)</code>,根据传入的参数不同设置</p><p>案例：大文件拷贝显示进度条</p><p>new thread来进行拷贝，控件访问使用invoke</p><h2 id="Thread类的一些常用成员"><a href="#Thread类的一些常用成员" class="headerlink" title="Thread类的一些常用成员"></a>Thread类的一些常用成员</h2><p>Start()启动线程，导致操作系统将当前实例的状态更改为 ThreadState.Running<br>Abort()终止线程,请求操作系统请终止该线程。<br>Join()在继续执行之前，阻塞调用线程，直到某个线程终止为止。带参数的重载表示超时时间，如果超过超时时间，则线程不再阻塞继续执行。<br>IsAlive如果此线程已启动并且尚未正常终止或中止，则为 true；否则为 false。<br>IsBackground指示某个线程是否为后台线程。<br>ManagedThreadId获取当前托管线程的唯一标识符。<br>Priority获取或设置一个值，该值指示线程的调度优先级。<br>ThreadState获取一个值，该值包含当前线程的状态。<br>Name获取或设置线程的名称。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进程线程应用程序域概念&quot;&gt;&lt;a href=&quot;#进程线程应用程序域概念&quot; class=&quot;headerlink&quot; title=&quot;进程线程应用程序域概念&quot;&gt;&lt;/a&gt;进程线程应用程序域概念&lt;/h2&gt;&lt;p&gt;进程，线程略&lt;/p&gt;
&lt;p&gt;应用程序域（AppDomain）：它提供安全而通用的处理单元，公共语言运行库可使用它来提供应用程序之间的隔离。您可以在具有同等隔离级别（存在于单独的进程中）的单个进程中运行几个应用程序域，而不会造成进程间调用或进程间切换等方面的额外开销。优势： 在一个应用程序中出现的错误不会影响其他应用程序。能够在不停止整个进程的情况下停止单个应用程序。应用程序域形成了托管代码的隔离、卸载和安全边界。在任意给定时间，每一线程都在一个应用程序域中执行。&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="线程" scheme="https://luox78.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>细说 ASP.NET Cache 及其高级用法</title>
    <link href="https://luox78.github.io/2018/02/01/cache/"/>
    <id>https://luox78.github.io/2018/02/01/cache/</id>
    <published>2018-02-01T12:03:22.192Z</published>
    <updated>2018-02-03T05:40:45.773Z</updated>
    
    <content type="html"><![CDATA[<p>许多做过程序性能优化的人，或者关注过程程序性能的人，应该都使用过各类缓存技术。 而我今天所说的Cache是专指ASP.NET的Cache，我们可以使用HttpRuntime.Cache访问到的那个Cache，而不是其它的缓存技术。</p><p>以前我在<a href="http://www.cnblogs.com/fish-li/archive/2011/08/21/2148640.html" target="_blank" rel="noopener">【我心目中的Asp.net核心对象】</a> 这篇博客中简单地提过它，今天我打算为它写篇专题博客，专门来谈谈它，因为它实在是太重要了。在这篇博客中， 我不仅要介绍它的一些常见用法，还将介绍它的一些高级用法。 在上篇博客<a href="http://www.cnblogs.com/fish-li/archive/2011/12/18/2292037.html" target="_blank" rel="noopener">【在.net中读写config文件的各种方法】</a> 的结尾处，我给大家留了一个问题，今天，我将在这篇博客中给出一个我认为较为完美的答案。</p><p>本文提到的【延迟操作】方法（如：延迟合并写入数据库）属于我的经验总结，希望大家能喜欢这个思路。<br><a id="more"></a><br><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="Cache的基本用途"><a href="#Cache的基本用途" class="headerlink" title="Cache的基本用途"></a>Cache的基本用途</h1><p>提到Cache，不得不说说它的主要功能：改善程序性能。<br>ASP.NET是一种动态页面技术，用ASP.NET技术做出来的网页几乎都是动态的，所谓动态是指：页面的内容会随着不同的用户或者持续更新的数据， 而呈现出不同的显示结果。既然是动态的，那么这些动态的内容是从哪里来的呢？我想绝大多数网站都有自己的数据源， 程序通过访问数据源获取页面所需的数据，然后根据一些业务规则的计算处理，最后变成适合页面展示的内容。</p><p>由于这种动态页面技术通常需要从数据源获取数据，并经过一些计算逻辑，最终变成一些HTML代码发给客户端显示。而这些计算过程显然也是有成本的。 这些处理成本最直接可表现为影响服务器的响应速度，尤其是当数据的处理过程变得复杂以及访问量变大时，会变得比较明显。 另一方面，有些数据并非时刻在发生变化，如果我们可以将一些变化不频繁的数据的最终计算结果（包括页面输出）缓存起来， 就可以非常明显地提升程序的性能，缓存的最常见且最重要的用途就体现在这个方面。 这也是为什么一说到性能优化时，一般都将缓存摆在第一位的原因。 我今天要说到的ASP.NET Cache也是可以实现这种缓存的一种技术。 不过，它还有其它的一些功能，有些是其它缓存技术所没有的。</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="Cache的定义"><a href="#Cache的定义" class="headerlink" title="Cache的定义"></a>Cache的定义</h1><p>在介绍Cache的用法前，我们先来看一下Cache的定义：（说明：我忽略了一些意义不大的成员） <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现用于 Web 应用程序的缓存。无法继承此类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Cache</span> : <span class="title">IEnumerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 用于 Cache.Insert(...) 方法调用中的 absoluteExpiration 参数中以指示项从不过期。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DateTime NoAbsoluteExpiration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用作 Cache.Insert(...) 或 Cache.Add(...)</span></span><br><span class="line">    <span class="comment">//       方法调用中的 slidingExpiration 参数，以禁用可调过期。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> TimeSpan NoSlidingExpiration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取或设置指定键处的缓存项。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">object</span> <span class="keyword">this</span>[<span class="keyword">string</span> key] &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将指定项添加到 System.Web.Caching.Cache 对象，该对象具有依赖项、过期和优先级策略</span></span><br><span class="line">    <span class="comment">// 以及一个委托（可用于在从 Cache 移除插入项时通知应用程序）。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Add</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span>, CacheDependency dependencies,</span></span></span><br><span class="line"><span class="function"><span class="params">                        DateTime absoluteExpiration, TimeSpan slidingExpiration,</span></span></span><br><span class="line"><span class="function"><span class="params">                        CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 System.Web.Caching.Cache 对象检索指定项。</span></span><br><span class="line">    <span class="comment">// key: 要检索的缓存项的标识符。</span></span><br><span class="line">    <span class="comment">// 返回结果: 检索到的缓存项，未找到该键时为 null。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> key</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span>, CacheDependency dependencies</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span>, CacheDependency dependencies,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    DateTime absoluteExpiration, TimeSpan slidingExpiration</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     向 System.Web.Caching.Cache 对象中插入对象，后者具有依赖项、过期和优先级策略</span></span><br><span class="line">    <span class="comment">//        以及一个委托（可用于在从 Cache 移除插入项时通知应用程序）。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 参数:</span></span><br><span class="line">    <span class="comment">//   key:</span></span><br><span class="line">    <span class="comment">//     用于引用该对象的缓存键。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   value:</span></span><br><span class="line">    <span class="comment">//     要插入缓存中的对象。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   dependencies:</span></span><br><span class="line">    <span class="comment">//     该项的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，</span></span><br><span class="line">    <span class="comment">//            并从缓存中移除。如果没有依赖项，则此参数包含 null。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   absoluteExpiration:</span></span><br><span class="line">    <span class="comment">//     所插入对象将过期并被从缓存中移除的时间。</span></span><br><span class="line">    <span class="comment">//        如果使用绝对过期，则 slidingExpiration 参数必须为 Cache.NoSlidingExpiration。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   slidingExpiration:</span></span><br><span class="line">    <span class="comment">//     最后一次访问所插入对象时与该对象过期时之间的时间间隔。如果该值等效于 20 分钟，</span></span><br><span class="line">    <span class="comment">//       则对象在最后一次被访问 20 分钟之后将过期并被从缓存中移除。如果使用可调过期，则</span></span><br><span class="line">    <span class="comment">//     absoluteExpiration 参数必须为 System.Web.Caching.Cache.NoAbsoluteExpiration。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   priority:</span></span><br><span class="line">    <span class="comment">//     该对象相对于缓存中存储的其他项的成本，由 System.Web.Caching.CacheItemPriority 枚举表示。</span></span><br><span class="line">    <span class="comment">//       该值由缓存在退出对象时使用；具有较低成本的对象在具有较高成本的对象之前被从缓存移除。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   onRemoveCallback:</span></span><br><span class="line">    <span class="comment">//     在从缓存中移除对象时将调用的委托（如果提供）。</span></span><br><span class="line">    <span class="comment">//            当从缓存中删除应用程序的对象时，可使用它来通知应用程序。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 异常:</span></span><br><span class="line">    <span class="comment">//   System.ArgumentException:</span></span><br><span class="line">    <span class="comment">//     为要添加到 Cache 中的项设置 absoluteExpiration 和 slidingExpiration 参数。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   System.ArgumentNullException:</span></span><br><span class="line">    <span class="comment">//     key 或 value 参数为 null。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//   System.ArgumentOutOfRangeException:</span></span><br><span class="line">    <span class="comment">//     将 slidingExpiration 参数设置为小于 TimeSpan.Zero 或大于一年的等效值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span>, CacheDependency dependencies,</span></span></span><br><span class="line"><span class="function"><span class="params">                        DateTime absoluteExpiration, TimeSpan slidingExpiration,</span></span></span><br><span class="line"><span class="function"><span class="params">                        CacheItemPriority priority, CacheItemRemovedCallback onRemoveCallback</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从应用程序的 System.Web.Caching.Cache 对象移除指定项。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">object</span> <span class="title">Remove</span>(<span class="params"><span class="keyword">string</span> key</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将对象与依赖项策略、到期策略和优先级策略</span></span><br><span class="line">    <span class="comment">// 以及可用来在从缓存中移除项【之前】通知应用程序的委托一起插入到 Cache 对象中。</span></span><br><span class="line">    <span class="comment">// 注意：此方法受以下版本支持：3.5 SP1、3.0 SP1、2.0 SP1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span>, CacheDependency dependencies,</span></span></span><br><span class="line"><span class="function"><span class="params">                            DateTime absoluteExpiration, TimeSpan slidingExpiration,</span></span></span><br><span class="line"><span class="function"><span class="params">                            CacheItemUpdateCallback onUpdateCallback</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ASP.NET为了方便我们访问Cache，在HttpRuntime类中加了一个静态属性Cache，这样，我们就可以在任意地方使用Cache的功能。 而且，ASP.NET还给它增加了二个“快捷方式”：Page.Cache, HttpContext.Cache，我们通过这二个对象也可以访问到HttpRuntime.Cache， 注意：这三者是在访问同一个对象。Page.Cache访问了HttpContext.Cache，而HttpContext.Cache又直接访问HttpRuntime.Cache</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="Cache常见用法"><a href="#Cache常见用法" class="headerlink" title="Cache常见用法"></a>Cache常见用法</h1><p>通常，我们使用Cache时，一般只有二个操作：读，写。<br>要从Cache中获取一个缓存项，我们可以调用Cache.Get(key)方法，要将一个对象放入缓存，我们可以调用Add, Insert方法。 然而，Add, Insert方法都有许多参数，有时我们或许只是想简单地放入缓存，一切接受默认值，那么还可以调用它的默认索引器， 我们来看一下这个索引器是如何工作的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">object</span> <span class="keyword">this</span>[string key]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Insert(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到：读缓存，其实是在调用Get方法，而写缓存则是在调用Insert方法的最简单的那个重载版本。</p><p>注意了：Add方法也可以将一个对象放入缓存，这个方法有7个参数，而Insert也有一个签名类似的重载版本， 它们有着类似的功能：<strong>将指定项添加到 System.Web.Caching.Cache 对象，该对象具有依赖项、过期和优先级策略以及一个委托（可用于在从 Cache 移除插入项时通知应用程序）。</strong> 然而，它们有一点小的区别：<strong>当要加入的缓存项已经在Cache中存在时，Insert将会覆盖原有的缓存项目，而Add则不会修改原有缓存项。</strong></p><p>也就是说：如果您希望某个缓存项目一旦放入缓存后，就不要再被修改，那么调用Add确实可以防止后来的修改操作。 而调用Insert方法，则永远会覆盖已存在项（哪怕以前是调用Add加入的）。</p><p>从另一个角度看，Add的效果更像是 static readonly 的行为，而Insert的效果则像 static 的行为。<br>注意：我只是说【像】，事实上它们比一般的static成员有着更灵活的用法。</p><p>由于缓存项可以让我们随时访问，看起来确实有点static成员的味道，但它们有着更高级的特性，比如： 缓存过期（绝对过期，滑动过期），缓存依赖（依赖文件，依赖其它缓存项），移除优先级，缓存移除前后的通知等等。 后面我将会分别介绍这四大类特性。</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="Cache类的特点"><a href="#Cache类的特点" class="headerlink" title="Cache类的特点"></a>Cache类的特点</h1><p>Cache类有一个很难得的优点，用MSDN上的说话就是：</p><p>此类型是线程安全的。</p><p>为什么这是个难得的优点呢？因为在.net中，绝大多数类在实现时，都只是保证静态类型的方法是线程安全， 而不考虑实例方法是线程安全。这也算是一条基本的.NET设计规范原则。<br>对于那些类型，MSDN通常会用这样的话来描述：</p><p>此类型的公共静态（在 Visual Basic 中为 Shared）成员是线程安全的。但不能保证任何实例成员是线程安全的。</p><p>所以，这就意味着我们可以在任何地方读写Cache都不用担心Cache的数据在多线程环境下的数据同步问题。 多线程编程中，最复杂的问题就是数据的同步问题，而Cache已经为我们解决了这些问题。</p><p>不过我要提醒您：ASP.NET本身就是一个多线程的编程模型，所有的请求是由线程池的线程来处理的。 通常，我们在多线程环境中为了解决数据同步问题，一般是采用锁来保证数据同步， 自然地，ASP.NET也不例外，它为了解决数据的同步问题，内部也是采用了锁。</p><p>说到这里，或许有些人会想：既然只一个Cache的静态实例，那么这种锁会不会影响并发？<br>答案是肯定的，有锁肯定会在一定程度上影响并发，这是没有办法的事情。<br>然而，ASP.NET在实现Cache时，会根据CPU的个数创建多个缓存容器，尽量可能地减小冲突， 以下就是Cache创建的核心过程：<a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">internal static <span class="keyword">CacheInternal </span>Create()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">CacheInternal </span>internal2<span class="comment">;</span></span><br><span class="line">    int numSingleCaches = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    if( numSingleCaches == <span class="number">0</span> ) &#123;</span><br><span class="line">        uint numProcessCPUs = (uint)SystemInfo.GetNumProcessCPUs()<span class="comment">;</span></span><br><span class="line">        numSingleCaches = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">        for( numProcessCPUs -= <span class="number">1</span><span class="comment">; numProcessCPUs &gt; 0; numProcessCPUs = numProcessCPUs &gt;&gt; 1 ) &#123;</span></span><br><span class="line">            numSingleCaches = numSingleCaches &lt;&lt; <span class="number">1</span><span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">CacheCommon </span><span class="keyword">cacheCommon </span>= new <span class="keyword">CacheCommon();</span></span><br><span class="line"><span class="keyword"> </span>   if( numSingleCaches == <span class="number">1</span> ) &#123;</span><br><span class="line">        internal2 = new <span class="keyword">CacheSingle(cacheCommon, </span>null, <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        internal2 = new <span class="keyword">CacheMultiple(cacheCommon, </span>numSingleCaches)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">cacheCommon.SetCacheInternal(internal2);</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">cacheCommon.ResetFromConfigSettings();</span></span><br><span class="line"><span class="keyword"> </span>   return internal2<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：CacheInternal是个内部用的包装类，Cache的许多操作都要由它来完成。</p><p>在上面的代码中，numSingleCaches的计算过程很重要，如果上面代码不容易理解，那么请看我下面的示例代码： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">uint</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++ )</span><br><span class="line">        ShowCount(i);            </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowCount</span>(<span class="params"><span class="keyword">uint</span> numProcessCPUs</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> numSingleCaches = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>( numProcessCPUs -= <span class="number">1</span>; numProcessCPUs &gt; <span class="number">0</span>; numProcessCPUs = numProcessCPUs &gt;&gt; <span class="number">1</span> ) &#123;</span><br><span class="line">        numSingleCaches = numSingleCaches &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.Write(numSingleCaches + <span class="string">","</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序将会输出：</p><p>1,2,4,4,8,8,8,8,16,16,16,16,16,16,16,16,32,32,32,32</p><p>CacheMultiple的构造函数如下：<a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="title">CacheMultiple</span>(<span class="params">CacheCommon cacheCommon, <span class="keyword">int</span> numSingleCaches</span>) : <span class="title">base</span>(<span class="params">cacheCommon</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._cacheIndexMask = numSingleCaches - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>._caches = <span class="keyword">new</span> CacheSingle[numSingleCaches];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numSingleCaches; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._caches[i] = <span class="keyword">new</span> CacheSingle(cacheCommon, <span class="keyword">this</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在您应该明白了吧：CacheSingle其实是ASP.NET内部使用的缓存容器，多个CPU时，它会创建多个缓存容器。<br>在写入时，它是如何定位这些容器的呢？请继续看代码：<a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">internal CacheSingle GetCacheSingle(<span class="keyword">int</span> hashCode)</span><br><span class="line">&#123;</span><br><span class="line">    hashCode = Math.Abs(hashCode);</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">index</span> = hashCode &amp; <span class="keyword">this</span>._cacheIndexMask;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._caches[<span class="keyword">index</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：参数中的hashCode是直接调用我们传的key.GetHashCode() ，GetHashCode是由Object类定义的。</p><p>所以，从这个角度看，虽然ASP.NET的Cache只有一个HttpRuntime.Cache静态成员，但它的内部却可能会包含多个缓存容器， 这种设计可以在一定程度上减少并发的影响。</p><p>不管如何设计，在多线程环境下，共用一个容器，冲突是免不了的。如果您只是希望简单的缓存一些数据， 不需要Cache的许多高级特性，那么，可以考虑不用Cache 。 比如：可以创建一个Dictionary或者Hashtable的静态实例，它也可以完成一些基本的缓存工作， 不过，我要提醒您：您要自己处理多线程访问数据时的数据同步问题。<br>顺便说一句：Hashtable.Synchronized(new Hashtable())也是一个线程安全的集合，如果想简单点，可以考虑它。</p><p>接下来，我们来看一下Cache的高级特性，这些都是Dictionary或者Hashtable不能完成的。</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="缓存项的过期时间"><a href="#缓存项的过期时间" class="headerlink" title="缓存项的过期时间"></a>缓存项的过期时间</h1><p>ASP.NET支持二种缓存项的过期策略：绝对过期和滑动过期。<br>\1. 绝对过期，这个容易理解：就是在缓存放入Cache时，指定一个具体的时间。当时间到达指定的时间的时，缓存项自动从Cache中移除。<br>\2. 滑动过期：某些缓存项，我们可能只希望在有用户在访问时，就尽量保留在缓存中，只有当一段时间内用户不再访问该缓存项时，才移除它， 这样可以优化内存的使用，因为这种策略可以保证缓存的内容都是【很热门】的。 操作系统的内存以及磁盘的缓存不都是这样设计的吗？而这一非常有用的特性，Cache也为我们准备好了，只要在将缓存项放入缓存时， 指定一个滑动过期时间就可以实现了。</p><p>以上二个选项分别对应Add, Insert方法中的DateTime absoluteExpiration, TimeSpan slidingExpiration这二个参数。<br>注意：这二个参数都是成对使用的，但不能同时指定它们为一个【有效】值，最多只能一个参数值有效。 当不使用另一个参数项时，请用Cache类定义二个static readonly字段赋值。</p><p>这二个参数比较简单，我就不多说了，只说一句：如果都使用Noxxxxx这二个选项，那么缓存项就一直保存在缓存中。（或许也会被移除）</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="缓存项的依赖关系-依赖其它缓存项"><a href="#缓存项的依赖关系-依赖其它缓存项" class="headerlink" title="缓存项的依赖关系 - 依赖其它缓存项"></a>缓存项的依赖关系 - 依赖其它缓存项</h1><p>ASP.NET Cache有个很强大的功能，那就是缓存依赖。一个缓存项可以依赖于另一个缓存项。 以下示例代码创建了二个缓存项，且它们间有依赖关系。首先请看页面代码： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Key1 的缓存内容：<span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> HttpRuntime.Cache[<span class="string">"key1"</span>] </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"CacheDependencyDemo.aspx"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"SetKey1Cache"</span> <span class="attr">value</span>=<span class="string">"设置Key1的值"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"SetKey2Cache"</span> <span class="attr">value</span>=<span class="string">"设置Key2的值"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>页面后台代码：<a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">CacheDependencyDemo</span> :</span> System.Web.UI.Page</span><br><span class="line">&#123;</span><br><span class="line">    [SubmitMethod(AutoRedirect=<span class="literal">true</span>)]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetKey1Cache</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SetKey2Cache();</span><br><span class="line"></span><br><span class="line">        CacheDependency dep = <span class="keyword">new</span> CacheDependency(null, <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">"key2"</span> &#125;);</span><br><span class="line">        HttpRuntime.Cache.Insert(<span class="string">"key1"</span>, DateTime.Now.ToString(), dep, </span><br><span class="line">                                    Cache.NoAbsoluteExpiration, Cache.NoSlidingExpiration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [SubmitMethod(AutoRedirect=<span class="literal">true</span>)]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetKey2Cache</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HttpRuntime.Cache.Insert(<span class="string">"key2"</span>, Guid.NewGuid().ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当运行这个示例页面时，运行结果如下图所示， 点击按钮【设置Key1的值】时，将会出现缓存项的内容（左图）。点击按钮【设置Key2的值】时，此时将获取不到缓存项的内容（右图）。</p><p><img src="https://pic002.cnblogs.com/images/2011/281816/2011122722172062.gif" alt="img"></p><p>根据结果并分析代码，我们可以看出，在创建Key1的缓存项时，我们使用了这种缓存依赖关系：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CacheDependency dep = <span class="keyword">new</span> <span class="type">CacheDependency</span>(<span class="literal">null</span>, <span class="keyword">new</span> <span class="type">string</span>[] &#123; <span class="string">"key2"</span> &#125;);</span><br></pre></td></tr></table></figure><p>所以，当我们更新Key2的缓存项时，Key1的缓存就失效了（不存在）。</p><p>不要小看了这个示例。的确，仅看这几行示例代码，或许它们实在是没有什么意义。 那么，我就举个实际的使用场景来说明它的使用价值。</p><p><img src="https://pic002.cnblogs.com/images/2011/281816/2011123011080183.gif" alt="img"></p><p>上面这幅图是我写的一个小工具。在示意图中，左下角是一个缓存表CacheTable，它由一个叫Table1BLL的类来维护。 CacheTable的数据来源于Table1，由Table1.aspx页面显示出来。 同时，ReportA, ReportB的数据也主要来源于Table1，由于Table1的访问几乎绝大多数都是读多写少，所以，我将Table1的数据缓存起来了。 而且，ReportA, ReportB这二个报表采用GDI直接画出（由报表模块生成，可认是Table1BLL的上层类），鉴于这二个报表的浏览次数较多且数据源是读多写少， 因此，这二个报表的输出结果，我也将它们缓存起来。</p><p>在这个场景中，我们可以想像一下：如果希望在Table1的数据发生修改后，如何让二个报表的缓存结果失效？<br>让Table1BLL去通知那二个报表模块，还是Table1BLL去直接删除二个报表的缓存？<br>其实，不管是选择前者还是后者，当以后还需要在Table1的CacheTable上做其它的缓存实现时（可能是其它的新报表）， 那么，势必都要修改Table1BLL，那绝对是个失败的设计。 这也算是模块间耦合的所带来的恶果。</p><p>幸好，ASP.NET Cache支持一种叫做缓存依赖的特性，我们只需要让Table1BLL公开它缓存CacheTable的KEY就可以了（假设KEY为 CacheTableKey）， 然后，其它的缓存结果如果要基于CacheTable，设置一下对【<strong>CacheTableKey</strong>】的依赖就可以实现这样的效果： <strong>当CacheTable更新后，被依赖的缓存结果将会自动清除。</strong>这样就彻底地解决了模块间的缓存数据依赖问题。</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="缓存项的依赖关系-文件依赖"><a href="#缓存项的依赖关系-文件依赖" class="headerlink" title="缓存项的依赖关系 - 文件依赖"></a>缓存项的依赖关系 - 文件依赖</h1><p>在上篇博客<a href="http://www.cnblogs.com/fish-li/archive/2011/12/18/2292037.html" target="_blank" rel="noopener">【在.net中读写config文件的各种方法】</a>的结尾， 我给大家留了一个问题：<br><strong>我希望在用户修改了配置文件后，程序能立刻以最新的参数运行，而且不用重启网站。</strong><br>今天我就来回答这个问题，并给出所需的全部实现代码。</p><p>首先，我要说明一点：上次博客的问题，虽然解决方案与Cache的文件依赖有关，但还需与缓存的移除通知配合使用才能完美的解决问题。 为了便于内容的安排，我先使用Cache的文件依赖来简单的实现一个粗糙的版本，在本文的后续部分再来完善这个实现。</p><p>先来看个粗糙的版本。假如我的网站中有这样一个配置参数类型： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 模拟网站所需的运行参数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RunOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> WebSiteUrl;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> UserName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我可以将它配置在这样一个XML文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">RunOptions</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">WebSiteUrl</span>&gt;</span>http://www.cnblogs.com/fish-li<span class="tag">&lt;/<span class="name">WebSiteUrl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">UserName</span>&gt;</span>fish li<span class="tag">&lt;/<span class="name">UserName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RunOptions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再来一个用于显示运行参数的页面： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>WebSiteUrl: <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> WebSiteApp.RunOptions.WebSiteUrl </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>UserName: <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> WebSiteApp.RunOptions.UserName </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>下面的代码就可以实现：<strong>在XML修改后，浏览页面就能立即看到最新的参数值</strong>： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">WebSiteApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> RunOptionsCacheKey = Guid.NewGuid().ToString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RunOptions RunOptions</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 首先尝试从缓存中获取运行参数</span></span><br><span class="line">            RunOptions options = HttpRuntime.Cache[RunOptionsCacheKey] <span class="keyword">as</span> RunOptions;</span><br><span class="line">            <span class="keyword">if</span>( options == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="comment">// 缓存中没有，则从文件中加载</span></span><br><span class="line">                <span class="keyword">string</span> path = HttpContext.Current.Server.MapPath(<span class="string">"~/App_Data/RunOptions.xml"</span>);</span><br><span class="line">                options = RwConfigDemo.XmlHelper.XmlDeserializeFromFile&lt;RunOptions&gt;(path, Encoding.UTF8);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 把从文件中读到的结果放入缓存，并设置与文件的依赖关系。</span></span><br><span class="line">                CacheDependency dep = <span class="keyword">new</span> CacheDependency(path);</span><br><span class="line">                <span class="comment">// 如果您的参数较复杂，与多个文件相关，那么也可以使用下面的方式，传递多个文件路径。</span></span><br><span class="line">                <span class="comment">//CacheDependency dep = new CacheDependency(new string[] &#123; path &#125;);</span></span><br><span class="line">                HttpRuntime.Cache.Insert(RunOptionsCacheKey, options, dep);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> options;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这里仍然是在使用CacheDependency，只是我们现在是给它的构造函数的第一个参数传递要依赖的文件名。</p><p>在即将结束对缓存的依赖介绍之前，还要补充二点：<br>\1. CacheDependency还支持【嵌套】，即：CacheDependency的构造函数中支持传入其它的CacheDependency实例，这样可以构成一种非常复杂的树状依赖关系。<br>\2. 缓存依赖的对象还可以是SQL SERVER，具体可参考SqlCacheDependency</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="缓存项的移除优先级"><a href="#缓存项的移除优先级" class="headerlink" title="缓存项的移除优先级"></a>缓存项的移除优先级</h1><p>缓存的做法有很多种，一个静态变量也可以称为是一个缓存。一个静态的集合就是一个缓存的容器了。 我想很多人都用Dictionary，List，或者Hashtable做过缓存容器，我们可以使用它们来保存各种数据，改善程序的性能。 一般情况下，如果我们直接使用这类集合去缓存各类数据，那么，那些数据所占用的内存将不会被回收，哪怕它们的使用机会并不是很多。 当缓存数据越来越多时，它们所消耗的内存自然也会越来越多。那么，能不能在内存不充足时，释放掉一些访问不频繁的缓存项呢？</p><p>这个问题也确实是个较现实的问题。虽然，使用缓存会使用程序运行更快，但是，我们数据会无限大，不可能统统缓存起来， 毕竟，内存空间是有限的。因此，我们可以使用前面所说的<strong>基于一段时间内不再访问</strong>就删除的策略来解决这个问题。 然而，在我们编码时，根本不知道我们的程序会运行在什么配置标准的计算机上，因此，根本不可能会对内存的大小作出任何假设， 此时，我们可能会希望当缓存占用过多的内存时，且当内存不够时，能自动移除一些不太重要的缓存项，这或许也比较有意义。</p><p>对于这个需求，在.net framework提供了二种解决办法，一种是使用WeakReference类，另一种是使用Cache 。 不过，既然我们是在使用ASP.NET，选择Cache当然会更方便。 在Cache的Add, Insert方法的某些重载版本中，可以指定缓存项的保存优先级策略，由参数CacheItemPriority priority来传入。 其中，CacheItemPriority是一个枚举类型，它包含了如下枚举值： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定 Cache 对象中存储的项的相对优先级。</span></span><br><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">CacheItemPriority</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//  在服务器释放系统内存时，具有该优先级级别的缓存项最有可能被从缓存删除。</span></span><br><span class="line">    Low = <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  在服务器释放系统内存时，具有该优先级级别的缓存项比分配了 CacheItemPriority.Normal</span></span><br><span class="line">    <span class="comment">//  优先级的项更有可能被从缓存删除。</span></span><br><span class="line">    BelowNormal = <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  在服务器释放系统内存时，具有该优先级级别的缓存项很有可能被从缓存删除，</span></span><br><span class="line">    <span class="comment">//  其被删除的可能性仅次于具有 CacheItemPriority.Low</span></span><br><span class="line">    <span class="comment">//  或 CacheItemPriority.BelowNormal 优先级的那些项。这是默认选项。</span></span><br><span class="line">    Normal = <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  缓存项优先级的默认值为 CacheItemPriority.Normal。</span></span><br><span class="line">    Default = <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  在服务器释放系统内存时，具有该优先级级别的缓存项被删除的可能性</span></span><br><span class="line">    <span class="comment">//  比分配了 CacheItemPriority.Normal 优先级的项要小。</span></span><br><span class="line">    AboveNormal = <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  在服务器释放系统内存时，具有该优先级级别的缓存项最不可能被从缓存删除。</span></span><br><span class="line">    High = <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  在服务器释放系统内存时，具有该优先级级别的缓存项将不会被自动从缓存删除。</span></span><br><span class="line">    <span class="comment">//  但是，具有该优先级级别的项会根据项的绝对到期时间或可调整到期时间与其他项一起被移除。</span></span><br><span class="line">    NotRemovable = <span class="number">6</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：当我们调用Cache的Add, Insert方法时，如果不指定CacheItemPriority选项，最终使用Normal所代表的优先级。 如果我们希望将某个可能不太重要的数据放入缓存时，可以指定优先级为Low或者BelowNormal。 如果想让缓存项在内存不足时，也不会被移除（除非到期或者依赖项有改变），可使用NotRemovable。</p><p>显然，我们可以使用这个特性来控制缓存对内存压力的影响。 其它的缓存方案，如static Collection + WeakReference也较难实现这样灵活的控制。</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="缓存项的移除通知"><a href="#缓存项的移除通知" class="headerlink" title="缓存项的移除通知"></a>缓存项的移除通知</h1><p>ASP.NET Cache与一些static变量所实现的缓存效果并不相同，它的缓存项是可以根据一些特定的条件失效的，那些失效的缓存将会从内存中移除。 虽然，某些移除条件并不是由我们的代码直接解发的，但ASP.NET还是提供一种方法让我们可以在缓存项在移除时，能通知我们的代码。</p><p>注意哦：ASP.NET Cache支持移除【前】通知 和 移除【后】通知二种通知方式。</p><p>我们可以在调用Add, Insert方法时，通过参数onRemoveCallback传递一个CacheItemRemovedCallback类型的委托，以便在移除指定的缓存项时， 能够通知我们。这个委托的定义如下： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 定义在从 System.Web.Caching.Cache 移除缓存项时通知应用程序的回调方法。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="key"&gt;</span>从缓存中移除的键（当初由Add, Insert传入的）。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="value"&gt;</span>与从缓存中移除的键关联的缓存项（当初由Add, Insert传入的）。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="reason"&gt;</span>从缓存移除项的原因。 <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">CacheItemRemovedCallback</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span>, CacheItemRemovedReason reason</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  指定从 System.Web.Caching.Cache 对象移除项的原因。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CacheItemRemovedReason</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  该项是通过指定相同键的 Cache.Insert(System.String,System.Object)</span></span><br><span class="line">    <span class="comment">//  方法调用或 Cache.Remove(System.String) 方法调用从缓存中移除的。</span></span><br><span class="line">    Removed = <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  从缓存移除该项的原因是它已过期。</span></span><br><span class="line">    Expired = <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  之所以从缓存中移除该项，是因为系统要通过移除该项来释放内存。</span></span><br><span class="line">    Underused = <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  从缓存移除该项的原因是与之关联的缓存依赖项已更改。</span></span><br><span class="line">    DependencyChanged = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>委托的各个参数的含义以及移除原因，在注释中都有明确的解释，我也不再重复了。<br>我想：有很多人知道Cache的Add, Insert方法有这个参数，也知道有这个委托，但是，它们有什么用呢？ 在后面的二个小节中，我将提供二个示例来演示这一强大的功能。</p><p>通常，我们会以下面这种方式从Cache中获取结果：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RunOptions <span class="keyword">options</span> = HttpRuntime.Cache[RunOptionsCacheKey] as RunOptions;</span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">options</span> == <span class="keyword">null</span> ) &#123;</span><br><span class="line">    <span class="comment">// 缓存中没有，则从文件中加载</span></span><br><span class="line">    <span class="comment">// ..................................</span></span><br><span class="line"></span><br><span class="line">    HttpRuntime.Cache.Insert(RunOptionsCacheKey, <span class="keyword">options</span>, dep);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">options</span>;</span><br></pre></td></tr></table></figure><p>这其实也是一个惯用法了：先尝试从缓存中获取，如果没有，则从数据源中加载，并再次放入缓存。</p><p>为什么会在访问Cache时返回null呢？答案无非就是二种原因：1. 根本没有放入Cache，2. 缓存项失效被移除了。<br>这种写法本身是没有问题，可是，如果从数据源中加载数据的时间较长，情况会怎样呢？<br>显然，会影响后面第一次的访问请求。您有没有想过，如果缓存项能一直放在Cache中，那不就可以了嘛。 是的，通常来说，只要您在将一个对象放入Cache时，不指定过期时间，不指定缓存依赖，且设置为永不移除，那么对象确实会一直在Cache中， 可是，过期时间和缓存依赖也很有用哦。如何能二者兼得呢？</p><p>为了解决这个问题，微软在.net framework的3.5 SP1、3.0 SP1、2.0 SP1版本中，加入了【移除前通知】功能，不过，这个方法仅受Insert支持， 随之而来的还有一个委托和一个移除原因的枚举定义： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 定义一个回调方法，用于在从缓存中移除缓存项之前通知应用程序。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="key"&gt;</span>要从缓存中移除的项的标识符。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="reason"&gt;</span>要从缓存中移除项的原因。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="expensiveObject"&gt;</span>此方法返回时，包含含有更新的缓存项对象。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="dependency"&gt;</span>此方法返回时，包含新的依赖项的对象。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="absoluteExpiration"&gt;</span>此方法返回时，包含对象的到期时间。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="slidingExpiration"&gt;</span>此方法返回时，包含对象的上次访问时间和对象的到期时间之间的时间间隔。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">CacheItemUpdateCallback</span>(<span class="params"><span class="keyword">string</span> key, CacheItemUpdateReason reason, </span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">out</span> <span class="keyword">object</span> expensiveObject, </span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">out</span> CacheDependency dependency, </span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">out</span> DateTime absoluteExpiration, </span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">out</span> TimeSpan slidingExpiration</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 指定要从 Cache 对象中移除缓存项的原因。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> CacheItemUpdateReason</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 指定要从缓存中移除项的原因是绝对到期或可调到期时间间隔已到期。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    Expired = <span class="number">1</span>,</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 指定要从缓存中移除项的原因是关联的 CacheDependency 对象发生了更改。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    DependencyChanged = <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：CacheItemUpdateReason这个枚举只有二项。原因请看MSDN的解释：</p><p>与 CacheItemRemovedReason 枚举不同，此枚举不包含 Removed 或 Underused 值。可更新的缓存项是不可移除的，因而绝不会被 ASP.NET 自动移除，即使需要释放内存也是如此。</p><p><strong>再一次提醒：</strong>有时我们确实需要缓存失效这个特性，但是，缓存失效后会被移除。 虽然我们可以让后续的请求在获取不到缓存数据时，从数据源中加载，也可以在CacheItemRemovedCallback回调委托中， 重新加载缓存数据到Cache中，<strong>但是在数据的加载过程中，Cache并不包含我们所期望的缓存数据，如果加载时间越长，这种【空缺】效果也会越明显。</strong> 这样会影响（后续的）其它请求的访问。为了保证让我们所期望的缓存数据能够一直存在于Cahce中，且仍有失效机制，我们可以使用【移除前通知】功能。</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="巧用缓存项的移除通知-实现【延迟操作】"><a href="#巧用缓存项的移除通知-实现【延迟操作】" class="headerlink" title="巧用缓存项的移除通知 实现【延迟操作】"></a>巧用缓存项的移除通知 实现【延迟操作】</h1><p>我看过一些ASP.NET的书，也看过一些人写的关于Cache方面的文章，基本上，要么是一带而过，要么只是举个毫无实际意义的示例。 可惜啊，这么强大的特性，我很少见到有人把它用起来。</p><p>今天，我就举个有实际意义的示例，再现Cache的强大功能！</p><p>我有这样一个页面，可以让用户调整（上下移动）某个项目分支记录的上线顺序：</p><p><img src="https://pic002.cnblogs.com/images/2011/281816/2011123011083424.gif" alt="img"></p><p>当用户需要调整某条记录的位置时，页面会弹出一个对话框，要求输入一个调整原因，并会发邮件通知所有相关人员。</p><p><img src="https://pic002.cnblogs.com/images/2011/281816/2011123011085942.gif" alt="img"></p><p>由于界面的限制，一次操作（点击上下键头）只是将一条记录移动一个位置，当要对某条记录执行跨越多行移动时，必须进行多次移动。 考虑到操作的方便性以及不受重复邮件的影响，程序需要实现这样一个需求： 页面只要求输入一次原因便可以对一条记录执行多次移动操作，并且不要多次发重复邮件，而且要求将最后的移动结果在邮件中发出来。</p><p>这个需求很合理，毕竟谁都希望操作简单。</p><p>那么如何实现这个需求呢？这里要从二个方面来实现，首先，在页面上我们应该要完成这个功能，对一条记录只弹一次对话框。 由于页面与服务端的交互全部采用Ajax方式进行（不刷新），状态可以采用JS变量来维持，所以这个功能在页面中是很容易实现。 再来看一下服务端，由于服务端并没有任何状态，当然也可以由页面把它的状态传给服务端，但是，哪次操作是最后一次呢？ 显然，这是无法知道的，最后只能修改需求，如果用户在2分钟之内不再操作某条记录时，便将最近一次操作视为最后一次操作。</p><p>基于新的需求，程序必须记录用户的最近一次操作，以便在2分钟不操作后，发出一次邮件，但要包含第一次输入的原因， 还应包含最后的修改结果哦。</p><p>该怎么实现这个需求呢？ 我立即就想到了ASP.NET Cache，因为我了解它，知道它能帮我完成这个功能。下面我来说说在服务端是如何实现的。</p><p><strong>整个实现的思路是：</strong><br>\1. 客户端页面还是每次将记录的RowGuid, 调整方向，调整原因，这三个参数发到服务端。<br>\2. 服务端在处理完顺序调整操作后，将要发送的邮件信息Insert到Cache中，同时提供slidingExpiration和onRemoveCallback参数。<br>\3. 在CacheItemRemovedCallback回调委托中，忽略CacheItemRemovedReason.Removed的通知，如果是其它的通知，则发邮件。</p><p>为了便于理解，我特意为大家准备了一个示例。整个示例由三部分组成：一个页面，一个JS文件，服务端代码。先来看页面代码： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 为了简单，示例页面只处理一条记录，且将记录的RowGuid直接显示出来。<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        实际场景中，这个RowGuid应该可以从一个表格的【当前选择行】中获取到。</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 当前选择行的 RowGuid = <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"spanRowGuid"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> Guid.NewGuid().ToString() </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        当前选择行的 Sequence= <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"spanSequence"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btnMoveUp"</span> <span class="attr">value</span>=<span class="string">"上移"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btnMoveDown"</span> <span class="attr">value</span>=<span class="string">"下移"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>页面的显示效果如下：</p><p><img src="https://pic002.cnblogs.com/images/2011/281816/2011122722184225.gif" alt="img"></p><p>处理页面中二个按钮的JS代码如下： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户输入的调整记录的原因</span></span><br><span class="line"><span class="keyword">var</span> g_reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#btnMoveUp"</span>).click( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; MoveRec(<span class="number">-1</span>); &#125; );</span><br><span class="line">    $(<span class="string">"#btnMoveDown"</span>).click( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; MoveRec(<span class="number">1</span>); &#125; );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MoveRec</span>(<span class="params">direction</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( ~~($(<span class="string">"#spanSequence"</span>).text()) + direction &lt; <span class="number">0</span> )&#123;</span><br><span class="line">        alert(<span class="string">"已经不能上移了。"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( g_reason == <span class="literal">null</span> )&#123;</span><br><span class="line">        g_reason = prompt(<span class="string">"请输入调整记录顺序的原因："</span>, <span class="string">"由于什么什么原因，我要调整..."</span>);</span><br><span class="line">        <span class="keyword">if</span>( g_reason == <span class="literal">null</span> )</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: <span class="string">"/AjaxDelaySendMail/MoveRec.fish"</span>,</span><br><span class="line">        data: &#123; <span class="attr">RowGuid</span>: $(<span class="string">"#spanRowGuid"</span>).text(), </span><br><span class="line">                Direction: direction,</span><br><span class="line">                Reason: g_reason</span><br><span class="line">        &#125;,</span><br><span class="line">        type: <span class="string">"POST"</span>, <span class="attr">dataType</span>: <span class="string">"text"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">responseText</span>)</span>&#123;</span><br><span class="line">            $(<span class="string">"#spanSequence"</span>).text(responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：在服务端，我使用了我在<a href="http://www.cnblogs.com/fish-li/archive/2011/09/05/2168073.html" target="_blank" rel="noopener">【用Asp.net写自己的服务框架】</a>那篇博客中提供的服务框架， 服务端的全部代码是这个样子的：<strong>（注意代码中的注释）</strong> <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移动记录的相关信息。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoveRecInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> RowGuid;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Direction;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Reason;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="meta">MyService</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AjaxDelaySendMail</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">MyServiceMethod</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MoveRec</span>(<span class="params">MoveRecInfo info</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 这里就不验证从客户端传入的参数了。实际开发中这个是必须的。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先来调整记录的顺序，示例程序没有数据库，就用Cache来代替。</span></span><br><span class="line">        <span class="keyword">int</span> sequence = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>.TryParse(HttpRuntime.Cache[info.RowGuid] <span class="keyword">as</span> <span class="keyword">string</span>, <span class="keyword">out</span> sequence);</span><br><span class="line">        <span class="comment">// 简单地示例一下调整顺序。</span></span><br><span class="line">        sequence += info.Direction;</span><br><span class="line">        HttpRuntime.Cache[info.RowGuid] = sequence.ToString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> key = info.RowGuid +<span class="string">"_DelaySendMail"</span>;</span><br><span class="line">        <span class="comment">// 这里我不直接发邮件，而是把这个信息放入Cache中，并设置2秒的滑过过期时间，并指定移除通知委托</span></span><br><span class="line">        <span class="comment">// 将操作信息放在缓存，并且以覆盖形式放入，这样便可以实现保存最后状态。</span></span><br><span class="line">        <span class="comment">// 注意：这里我用Insert方法。</span></span><br><span class="line">        HttpRuntime.Cache.Insert(key, info, <span class="literal">null</span>, Cache.NoAbsoluteExpiration,</span><br><span class="line">            TimeSpan.FromMinutes(<span class="number">2.0</span>), CacheItemPriority.NotRemovable, MoveRecInfoRemovedCallback);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sequence;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveRecInfoRemovedCallback</span>(<span class="params"><span class="keyword">string</span> key, <span class="keyword">object</span> <span class="keyword">value</span>, CacheItemRemovedReason reason</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( reason == CacheItemRemovedReason.Removed )</span><br><span class="line">            <span class="keyword">return</span>;        <span class="comment">// 忽略后续调用HttpRuntime.Cache.Insert()所触发的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 能运行到这里，就表示是肯定是缓存过期了。</span></span><br><span class="line">        <span class="comment">// 换句话说就是：用户2分钟再也没操作过了。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从参数value取回操作信息</span></span><br><span class="line">        MoveRecInfo info = (MoveRecInfo)<span class="keyword">value</span>;</span><br><span class="line">        <span class="comment">// 这里可以对info做其它的处理。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后发一次邮件。整个延迟发邮件的过程就处理完了。</span></span><br><span class="line">        MailSender.SendMail(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能让JavaScript能直接调用C#中的方法，还需要在web.config中加入如下配置：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;httpHandlers&gt;</span></span><br><span class="line">    &lt;<span class="built_in">add</span> path=<span class="string">"*.fish"</span> <span class="keyword">verb</span>=<span class="string">"*"</span> validate=<span class="string">"false"</span> <span class="built_in">type</span>=<span class="string">"MySimpleServiceFramework.AjaxServiceHandler"</span>/&gt;</span><br><span class="line">&lt;/httpHandlers&gt;</span><br></pre></td></tr></table></figure><p>好了，示例代码就是这些。如果您有兴趣，可以在本文的结尾处下载这些示例代码，自己亲自感受一下利用Cache实现的【延迟处理】的功能。</p><p>其实这种【延迟处理】的功能是很有用的，比如还有一种适用场景：有些数据记录可能需要频繁更新，如果每次更新都去写数据库，肯定会对数据库造成一定的压力， <strong>但由于这些数据也不是特别重要</strong>，因此，我们可以利用这种【延迟处理】来将写数据库的时机进行<strong>合并处理</strong>， 最终我们可以实现：将多次的写入变成一次或者少量的写入操作，我称这样效果为：<strong>延迟合并写入</strong></p><p>这里我就对数据库的<strong>延迟合并写入</strong>提供一个思路：将需要写入的数据记录放入Cache，调用Insert方法并提供slidingExpiration和onRemoveCallback参数， 然后在CacheItemRemovedCallback回调委托中，模仿我前面的示例代码，将多次变成一次。不过，这样可能会有一个问题：如果数据是一直在修改，那么就一直不会写入数据库。 最后如果网站重启了，数据可能会丢失。如果担心这个问题，那么，可以在回调委托中，遇到CacheItemRemovedReason.Removed时，使用计数累加的方式，当到达一定数量后， 再写入数据库。比如：遇到10次CacheItemRemovedReason.Removed我就写一次数据库，这样就会将原来需要写10次的数据库操作变成一次了。 当然了，如果是其它移除原因，写数据库总是必要的。注意：<strong>对于金额这类敏感的数据，绝对不要使用这种方法。</strong></p><p>再补充二点：<br>\1. 当CacheItemRemovedCallback回调委托被调用时，缓存项已经不在Cache中了。<br>\2. 在CacheItemRemovedCallback回调委托中，我们还可以将缓存项重新放入缓存。<br>有没有想过：这种设计可以构成一个循环？如果再结合参数slidingExpiration便可实现一个定时器的效果。</p><p>关于缓存的失效时间，我要再提醒一点：通过absoluteExpiration, slidingExpiration参数所传入的时间，当缓存时间生效时，缓存对象并不会立即移除， <strong>ASP.NET Cache大约以20秒的频率去检查这些已过时的缓存项。</strong></p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="巧用缓存项的移除通知-实现【自动加载配置文件】"><a href="#巧用缓存项的移除通知-实现【自动加载配置文件】" class="headerlink" title="巧用缓存项的移除通知 实现【自动加载配置文件】"></a>巧用缓存项的移除通知 实现【自动加载配置文件】</h1><p>在本文的前部分的【文件依赖】小节中，有一个示例演示了：当配置文件更新后，页面可以显示最新的修改结果。 在那个示例中，为了简单，我直接将配置参数放在Cache中，每次使用时再从Cache中获取。 如果配置参数较多，这种做法或许也会影响性能，毕竟配置参数并不会经常修改，如果能直接访问一个静态变量就能获取到，应该会更快。 通常，我们可能会这样做： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> RunOptions s_RunOptions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> RunOptions RunOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// s_RunOptions 的初始化放在Init方法中了，会在Global.asax的Application_Start事件中调用。</span></span><br><span class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> s_RunOptions; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RunOptions <span class="title">LoadRunOptions</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> path = Path.Combine(AppDataPath, <span class="string">"RunOptions.xml"</span>);</span><br><span class="line">    <span class="keyword">return</span> RwConfigDemo.XmlHelper.XmlDeserializeFromFile&lt;RunOptions&gt;(path, Encoding.UTF8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这种做法有一缺点就是：不能在配置文件更新后，自动加载最新的配置结果。</p><p>为了解决这个问题，我们可以使用Cache提供的文件依赖以及移除通知功能。 前面的示例演示了移除后通知功能，这里我再演示一下移除前通知功能。<br><strong>说明：事实上，完成这个功能，可以仍然使用移除后通知，只是移除前通知我还没有演示，然而，这里使用移除前通知并没有显示它的独有的功能。</strong></p><p>下面的代码演示了在配置文件修改后，自动更新运行参数的实现方式：<strong>（注意代码中的注释）</strong> <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> s_RunOptionsCacheDependencyFlag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RunOptions <span class="title">LoadRunOptions</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> path = Path.Combine(AppDataPath, <span class="string">"RunOptions.xml"</span>);</span><br><span class="line">    <span class="comment">// 注意啦：访问文件是可能会出现异常。不要学我，我写的是示例代码。</span></span><br><span class="line">    RunOptions options = RwConfigDemo.XmlHelper.XmlDeserializeFromFile&lt;RunOptions&gt;(path, Encoding.UTF8);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flag = System.Threading.Interlocked.CompareExchange(<span class="keyword">ref</span> s_RunOptionsCacheDependencyFlag, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保只调用一次就可以了。</span></span><br><span class="line">    <span class="keyword">if</span>( flag == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// 让Cache帮我们盯住这个配置文件。</span></span><br><span class="line">        CacheDependency dep = <span class="keyword">new</span> CacheDependency(path);</span><br><span class="line">        HttpRuntime.Cache.Insert(RunOptionsCacheKey, <span class="string">"Fish Li"</span>, dep,</span><br><span class="line">            Cache.NoAbsoluteExpiration, Cache.NoSlidingExpiration, RunOptionsUpdateCallback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RunOptionsUpdateCallback</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">string</span> key, CacheItemUpdateReason reason, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">out</span> <span class="keyword">object</span> expensiveObject, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">out</span> CacheDependency dependency, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">out</span> DateTime absoluteExpiration, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">out</span> TimeSpan slidingExpiration</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 注意哦：在这个方法中，不要出现【未处理异常】，否则缓存对象将被移除。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 说明：这里我并不关心参数reason，因为我根本就没有使用过期时间</span></span><br><span class="line">    <span class="comment">//        所以，只有一种原因：依赖的文件发生了改变。</span></span><br><span class="line">    <span class="comment">//        参数key我也不关心，因为这个方法是【专用】的。</span></span><br><span class="line"></span><br><span class="line">    expensiveObject = <span class="string">"http://www.cnblogs.com/fish-li/"</span>;</span><br><span class="line">    dependency = <span class="keyword">new</span> CacheDependency(Path.Combine(AppDataPath, <span class="string">"RunOptions.xml"</span>));</span><br><span class="line">    absoluteExpiration = Cache.NoAbsoluteExpiration;</span><br><span class="line">    slidingExpiration = Cache.NoSlidingExpiration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新加载配置参数</span></span><br><span class="line">    s_RunOptions = LoadRunOptions();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改动很小，只是LoadRunOptions方法做了修改了而已，但是效果却很酷。</p><p>还记得我在上篇博客<a href="http://www.cnblogs.com/fish-li/archive/2011/12/18/2292037.html" target="_blank" rel="noopener">【在.net中读写config文件的各种方法】</a>的结尾处留下来的问题吗？ 这个示例就是我的解决方案。</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="文件监视技术的选择"><a href="#文件监视技术的选择" class="headerlink" title="文件监视技术的选择"></a>文件监视技术的选择</h1><p>对于文件监视，我想有人或许会想到FileSystemWatcher。正好我就来说说关于【文件监视技术】的选择问题。<br>说明，本文所有结论均为我个人的观点，仅供参考。</p><p>这个组件，早在做WinForm开发时就用过了，对它也是印象比较深的。<br>它有一个包装不好的地方是：<strong>事件会重复发出。</strong>比如：一次文件的保存操作，它却引发了二次事件。<br>什么，你不信？ 正好，我还准备了一个示例程序。</p><p><img src="https://pic002.cnblogs.com/images/2011/281816/2011122722185820.gif" alt="img"></p><p>说明：图片中显示了发生过二次事件，但我只是在修改了文件后，做了一次保存操作而已。 本文的结尾处有我的示例程序，您可以自己去试一下。这里为了方便，还是贴出相关代码： <a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://images.cnblogs.com/cnblogs_com/fish-li/297352/r_collapse.png" alt="img"></a>;)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Shown</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.fileSystemWatcher1.Path = Environment.CurrentDirectory;</span><br><span class="line">    <span class="keyword">this</span>.fileSystemWatcher1.Filter = <span class="string">"RunOptions.xml"</span>;</span><br><span class="line">    <span class="keyword">this</span>.fileSystemWatcher1.NotifyFilter = System.IO.NotifyFilters.LastWrite;</span><br><span class="line">    <span class="keyword">this</span>.fileSystemWatcher1.EnableRaisingEvents = <span class="literal">true</span>;            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fileSystemWatcher1_Changed</span>(<span class="params"><span class="keyword">object</span> sender, System.IO.FileSystemEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> message = <span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125; &#123;1&#125;."</span>, e.Name, e.ChangeType);</span><br><span class="line">    <span class="keyword">this</span>.listBox1.Items.Add(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这个类的使用，只想说一点：会引发的事件很多，因此一定要注意过滤。以下引用MSDN的一段说明：</p><p>Windows 操作系统在 FileSystemWatcher 创建的缓冲区中通知组件文件发生更改。如果短时间内有很多更改，则缓冲区可能会溢出。这将导致组件失去对目录更改的跟踪，并且它将只提供一般性通知。使用 InternalBufferSize 属性来增加缓冲区大小的开销较大，因为它来自无法换出到磁盘的非页面内存，所以应确保缓冲区大小适中（尽量小，但也要有足够大小以便不会丢失任何文件更改事件）。若要避免缓冲区溢出，请使用 NotifyFilter 和 IncludeSubdirectories 属性，以便可以筛选掉不想要的更改通知。</p><p>幸运的是，ASP.NET Cache并没有使用这个组件，我们不用担心文件依赖而引发的重复操作问题。 它直接依赖于webengine.dll所提供的API，因此，建议在ASP.NET应用程序中，优先使用Cache所提供的文件依赖功能。</p><p><a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html#_labelTop" target="_blank" rel="noopener">回到顶部</a></p><h1 id="各种缓存方案的共存"><a href="#各种缓存方案的共存" class="headerlink" title="各种缓存方案的共存"></a>各种缓存方案的共存</h1><p>ASP.NET Cache是一种缓存技术，然而，我们在ASP.NET程序中还可以使用其它的缓存技术， 这些不同的缓存也各有各自的长处。由于ASP.NET Cache不能提供对外访问能力，因此，它不可能取代以memcached为代表的分布式缓存技术， 但它由于是不需要跨进程访问，效率也比分布式缓存的速度更快。如果将ASP.NET Cache设计成【一级缓存】， 分布式缓存设计成【二级缓存】，就像CPU的缓存那样，那么将能同时利用二者的所有的优点，实现更完美的功能以及速度。</p><p>其实缓存是没有一个明确定义的技术，一个static变量也是一个缓存，一个static集合就是一个缓存容器了。 这种缓存与ASP.NET Cache相比起来，显然static变量的访问速度会更快，如果static集合不是设计得很差的话， 并发的冲突也可能会比ASP.NET Cache小，也正是因为这一点，static集合也有着广泛的使用。 然而，ASP.NET Cache的一些高级功能，如：过期时间，缓存依赖（包含文件依赖），移除通知，也是static集合不具备的。 因此，合理地同时使用它们，会让程序有着最好的性能，也同时拥有更强大的功能。</p><blockquote><p>原文<a href="http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html" target="_blank" rel="noopener">http://www.cnblogs.com/fish-li/archive/2011/12/27/2304063.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;许多做过程序性能优化的人，或者关注过程程序性能的人，应该都使用过各类缓存技术。 而我今天所说的Cache是专指ASP.NET的Cache，我们可以使用HttpRuntime.Cache访问到的那个Cache，而不是其它的缓存技术。&lt;/p&gt;
&lt;p&gt;以前我在&lt;a href=&quot;http://www.cnblogs.com/fish-li/archive/2011/08/21/2148640.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【我心目中的Asp.net核心对象】&lt;/a&gt; 这篇博客中简单地提过它，今天我打算为它写篇专题博客，专门来谈谈它，因为它实在是太重要了。在这篇博客中， 我不仅要介绍它的一些常见用法，还将介绍它的一些高级用法。 在上篇博客&lt;a href=&quot;http://www.cnblogs.com/fish-li/archive/2011/12/18/2292037.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【在.net中读写config文件的各种方法】&lt;/a&gt; 的结尾处，我给大家留了一个问题，今天，我将在这篇博客中给出一个我认为较为完美的答案。&lt;/p&gt;
&lt;p&gt;本文提到的【延迟操作】方法（如：延迟合并写入数据库）属于我的经验总结，希望大家能喜欢这个思路。&lt;br&gt;
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="cache" scheme="https://luox78.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>CSharp中的集合接口，类之间的关系</title>
    <link href="https://luox78.github.io/2018/01/29/IEnumerableECT/"/>
    <id>https://luox78.github.io/2018/01/29/IEnumerableECT/</id>
    <published>2018-01-29T14:33:38.573Z</published>
    <updated>2018-01-29T14:41:43.048Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到了一句话<br>the Where() LINQ extension method is used to filter for a particular set of URLs.  Where(), like most LINQ methods, returns an IEnumerable<t> value<br>让我好奇IEnumerable<t> Icollection Ilist list之间到底是什么关系<br>顺带IEnumerable<t>可以直接调用ToList变成list<a id="more"></a></t></t></t></p><p>首先我看看 IEnumerable：<br>1    // 摘要:<br>2      //   公开枚举器，该枚举器支持在指定类型的集合上进行简单迭代。<br>3      //<br>4      // 类型参数:<br>5      //  T:<br>6      //   要枚举的对象的类型。<br>7      [TypeDependency(“System.SZArrayHelper”)]<br>8      public interface IEnumerable<out t=""> : IEnumerable<br>9      {<br>10        // 摘要:<br>11        //   返回一个循环访问集合的枚举器。<br>12        //<br>13        // 返回结果:<br>14        //   可用于循环访问集合的 System.Collections.Generic.IEnumerator<t>。<br>15        IEnumerator<t> GetEnumerator();<br>16      }<br>IEnumerable<t> 实现IEnumerable接口方法，那IEnumberable做什么的，其实就提高可以循环访问的集合。说白了就是一个迭代。</t></t></t></out></p><p>再来看看ICollection:<br>1    // 摘要:<br>2     //   定义操作泛型集合的方法。<br>3     //<br>4     // 类型参数:<br>5     //  T:<br>6     //   集合中元素的类型。<br>7     [TypeDependency(“System.SZArrayHelper”)]<br>8     public interface ICollection<t> : IEnumerable<t>, IEnumerable<br>原来ICollection<t> 同时继承IEnumerable<t>和IEnumerable两个接口，按我的理解就是，ICollection继续它们2个接口而且扩展了方法，功能强多了。<br>由原来的步枪变成半自动步枪<br>我们继续看IList:</t></t></t></t></p><p>public interface IList<t> : ICollection<t>, IEnumerable<t>, IEnumerable<br>靠 IList 继承它们三个接口，怪不得功能这么多啊，那应该属于全自动步枪了<br>最后来看看List:</t></t></t></p><p>public class List<t> : IList<t>, ICollection<t>, IEnumerable<t>, IList, ICollection, IEnumerable<br>这个时候大家仔细看看，它们都是接口，只有List 是类，不仅实现它们的接口，而且还扩展了太多的方法给我利用。哇靠，几乎所有功能都能实现了，简直是激光步枪</t></t></t></t></p><p><strong>总结</strong>：IEnumerable接口就是规定了可以使用foreach遍历的集合，C#中几乎？所有集合都实现了该接口，linq查询出来的可以直接用IEnumerable引用</p><p>101个linq例子<a href="https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b" target="_blank" rel="noopener">https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b</a></p><p><strong>关于linq  to entity一个注意点</strong></p><p>今天通过linq查询发现linq使用时</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">new</span> XXclass</span><br><span class="line">&#123;</span><br><span class="line">  XX = <span class="string">"1"</span> + <span class="string">"2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会报错，原因是linq to entity 转成tolist时并不支持C#里面<code>string.format</code>方法，所以查询的时候并不能使用字符串拼接</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到了一句话&lt;br&gt;the Where() LINQ extension method is used to filter for a particular set of URLs.  Where(), like most LINQ methods, returns an IEnumerable&lt;t&gt; value&lt;br&gt;让我好奇IEnumerable&lt;t&gt; Icollection Ilist list之间到底是什么关系&lt;br&gt;顺带IEnumerable&lt;t&gt;可以直接调用ToList变成list
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="LINQ" scheme="https://luox78.github.io/tags/LINQ/"/>
    
  </entry>
  
  <entry>
    <title>三层02</title>
    <link href="https://luox78.github.io/2018/01/25/sanchen02/"/>
    <id>https://luox78.github.io/2018/01/25/sanchen02/</id>
    <published>2018-01-25T12:49:20.132Z</published>
    <updated>2018-01-31T12:43:00.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ado-net使用事务"><a href="#ado-net使用事务" class="headerlink" title="ado.net使用事务"></a>ado.net使用事务</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">string constr = <span class="string">""</span>;</span><br><span class="line">            using (SqlConnection con = new SqlConnection(constr))</span><br><span class="line">            &#123;</span><br><span class="line">                con.Open();</span><br><span class="line">                using (SqlTransaction tran = con.BeginTransaction())</span><br><span class="line">                &#123;</span><br><span class="line">                    using (SqlCommand <span class="keyword">cmd</span><span class="bash"> = new SqlCommand(<span class="string">"sql"</span>, con))</span></span><br><span class="line"><span class="bash">                    &#123;</span></span><br><span class="line"><span class="bash">                        cmd.Transaction = tran;</span></span><br><span class="line"><span class="bash">                        cmd.ExecuteNonQuery();</span></span><br><span class="line"><span class="bash">                        cmd.CommandText = <span class="string">"sql"</span>;</span></span><br><span class="line"><span class="bash">                        cmd.Parameters.Clear();</span></span><br><span class="line"><span class="bash">                        cmd.Parameters.AddRange(null);</span></span><br><span class="line"><span class="bash">                        cmd.ExecuteNonQuery();</span></span><br><span class="line"><span class="bash">                    &#125;</span></span><br><span class="line"><span class="bash">                    //tran.Commit();无异常提交</span></span><br><span class="line"><span class="bash">                    tran.Rollback();//异常回滚</span></span><br><span class="line"><span class="bash">                &#125;</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">            &#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><p>理解分层：<br>逻辑分层N-Layer<br>​    逻辑上将系统中的不同功能模块、不同子系统等进行分层<br>​    好的逻辑分层可以让后续选择物理架构更灵活，选择性更大<br>​    我们学习的”三层架构”属于逻辑分层（three-layer）<br>物理分层N-Tier<br>​    物理部署时将系统的不同模块部署在不同的服务器上</p><p>三层架构</p><p>​    界面层UI；<br>​    数据访问层DAL（Data Access Layer）；<br>​    业务逻辑层BLL（business logic layer ）</p><p>三层结构的程序不是说把项目分成DAL,BLL,WebUI三个模块就叫三层了，下面几个问题在你的项目里面：<br>⒈ UILayer里面只有少量（或者没有）SQL语句或者存储过程调用，并且这些语句保证不会修改数据?<br>⒉ 如果把UILayer拿掉，你的项目还能在Interface/API的层次上提供所有功能吗?<br>⒊ 你的DAL可以移植到其他类似环境的项目吗?<br>⒋ 三个模块，可以分别运行于不同的服务器吗?<br>如果不是所有答案都为YES，那么你的项目还不能算是严格意义上的三层程序. 三层程序有一些需要约定遵守的规则：<br>⒈ 最关键的，UI层只能作为一个外壳，不能包含任何业务逻辑(BizLogic)的处理过程<br>⒉ 设计时应该从BLL出发，而不是UI出发. BLL层在API上应该实现所有BizLogic，以面向对象的方式<br>⒊ 不管数据层是一个简单的SqlHelper也好，还是带有Mapping过的Classes也好，应该在一定的抽象程度上做到系统无关<br>⒋ 不管使用COM+(Enterprise Service），还是Remoting，还是WebService之类的远程对象技术，不管部署的时候是不是真的分别部署到不同的服务器上，最起码在设计的时候要做这样的考虑，更远的，还得考虑多台服务器通过负载均衡作集群<br>所以考虑一个项目是不是应该应用三层/多层设计时，先得考虑下是不是真的需要? 实际上大部分程序就开个WebApplication就足够了，完全没必要作的这么复杂. 而多层结构，是用于解决真正复杂的项目需求的。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>构造函数变私有，通过静态方法只创建同一个对象，本质控制该类对象的创建</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton _instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">object</span> syn = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.当把类的构造函数设置为private的以后，则该类不能在外界被new了。</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.在当前类型中创建一个静态方法，用该静态方法来返回一个对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">CreateInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">lock</span> (syn)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_instance==<span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="通过dotnet发送邮件"><a href="#通过dotnet发送邮件" class="headerlink" title="通过dotnet发送邮件"></a>通过dotnet发送邮件</h2><p>创建mail对象</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mail = <span class="keyword">new</span> <span class="type">MailMessage</span>();</span><br><span class="line">mail.From=<span class="keyword">new</span> <span class="type">MailAddress</span>(<span class="string">"1023354041@qq.com"</span>, <span class="string">"luox78"</span>);</span><br><span class="line">mail.To.Add(<span class="keyword">new</span> <span class="type">MailAddress</span>(<span class="string">"1023354041@qq.com"</span>, <span class="string">"luox78"</span>));</span><br></pre></td></tr></table></figure><p>创建正文，主题等</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mail.Subject = <span class="string">"<span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="variable">$4</span>关于一些问题<span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span><span class="subst">$$</span>4"</span><span class="comment">;</span></span><br><span class="line">mail.SubjectEncoding = Encoding.UTF8<span class="comment">;</span></span><br><span class="line">mail.Body = <span class="string">"&lt;h1&gt;hello&lt;/h1&gt;&lt;font color=\"</span>red\<span class="string">"&gt;^_^&lt;/font&gt;"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>登录</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SmtpClient <span class="keyword">client</span> = <span class="keyword">new</span> SmtpClient(<span class="string">"smtp.qq.com"</span>,<span class="number">587</span>);<span class="comment">//腾讯邮箱</span></span><br><span class="line"><span class="keyword">client</span>.EnableSsl = <span class="keyword">true</span>;<span class="comment">//启用SSL加密 </span></span><br><span class="line"> <span class="comment">//发件人邮箱账号，授权码(注意此处，是授权码你需要到qq邮箱里点设置开启Smtp服务，然后会提示你第三方登录时密码处填写授权码)</span></span><br><span class="line"><span class="keyword">client</span>.Credentials = <span class="keyword">new</span> System.Net.NetworkCredential(<span class="string">"1023354041@qq.com"</span>, <span class="string">"授权码"</span>);</span><br></pre></td></tr></table></figure><p>发送</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.Send(mail)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>加附件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MailMessage <span class="attribute">msg</span>=new MailMessage();</span><br><span class="line">msg.Attachments.<span class="builtin-name">Add</span>(attach1);</span><br><span class="line">msg.Attachments.<span class="builtin-name">Add</span>(attach2);</span><br><span class="line">msg.Attachments.<span class="builtin-name">Add</span>(attach3);</span><br></pre></td></tr></table></figure><p>加图片</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AlternateView av = AlternateView.CreateAlternateViewFromString("<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">\</span>"<span class="attr">cid:neirongid</span>\"/&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">\”red\“</span>&gt;</span>^_^<span class="tag">&lt;/<span class="name">font</span>&gt;</span>”, Encoding.UTF8, "text/html");</span><br><span class="line">//【这里需要注意：src="cid:neirongid"】</span><br><span class="line"></span><br><span class="line">LinkedResource lr = new LinkedResource(@"c:\a.jpg", "image/gif");</span><br><span class="line">lr.ContentId = “neirongid”;【这里需要注意设置ContentId=“neirongid”】</span><br><span class="line">av.LinkedResources.Add(lr);</span><br><span class="line"></span><br><span class="line">MailMessage msg = new MailMessage();</span><br><span class="line">msg.AlternateViews.Add(av);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ado-net使用事务&quot;&gt;&lt;a href=&quot;#ado-net使用事务&quot; class=&quot;headerlink&quot; title=&quot;ado.net使用事务&quot;&gt;&lt;/a&gt;ado.net使用事务&lt;/h3&gt;&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;string constr = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            using (SqlConnection con = new SqlConnection(constr))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                con.Open();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                using (SqlTransaction tran = con.BeginTransaction())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    using (SqlCommand &lt;span class=&quot;keyword&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; = new SqlCommand(&lt;span class=&quot;string&quot;&gt;&quot;sql&quot;&lt;/span&gt;, con))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                    &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                        cmd.Transaction = tran;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                        cmd.ExecuteNonQuery();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                        cmd.CommandText = &lt;span class=&quot;string&quot;&gt;&quot;sql&quot;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                        cmd.Parameters.Clear();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                        cmd.Parameters.AddRange(null);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                        cmd.ExecuteNonQuery();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                    //tran.Commit();无异常提交&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                    tran.Rollback();//异常回滚&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bash&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="三层" scheme="https://luox78.github.io/tags/%E4%B8%89%E5%B1%82/"/>
    
      <category term="单例模式" scheme="https://luox78.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="发邮件" scheme="https://luox78.github.io/tags/%E5%8F%91%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>动态创建分页</title>
    <link href="https://luox78.github.io/2018/01/22/paginginfo/"/>
    <id>https://luox78.github.io/2018/01/22/paginginfo/</id>
    <published>2018-01-22T13:48:40.513Z</published>
    <updated>2018-01-22T17:14:35.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接着上一个demo"><a href="#接着上一个demo" class="headerlink" title="接着上一个demo"></a>接着上一个demo</h3><p>现在controller中创建一个新的action</p><p>先添加两个私有字段分别表示每页条数，和整个一组多少个，为了方便演示，设置小点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> PageSize = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> PageGroupSize = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="创建page页的model"><a href="#创建page页的model" class="headerlink" title="创建page页的model"></a>创建page页的model</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PagingInfo</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> CurrentPage &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> PageSize &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> TotalItems &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> CurrentDividePage</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (CurrentPage % PageGroupSize == <span class="number">0</span>)</span><br><span class="line">                  <span class="keyword">return</span> (<span class="keyword">int</span>)CurrentPage / PageGroupSize;</span><br><span class="line">              <span class="keyword">return</span> (<span class="keyword">int</span>)CurrentPage / PageGroupSize + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> TotalDividePages</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">return</span> (<span class="keyword">int</span>)Math.Ceiling((<span class="keyword">decimal</span>)TotalItems / PageSize / PageGroupSize);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> TotalPages</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">return</span> (<span class="keyword">int</span>)Math.Ceiling((<span class="keyword">decimal</span>)TotalItems / PageSize);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> PageGroupSize &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;<span class="comment">//底端呈现多少页</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">bool</span> HasPre</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span> &#123; <span class="keyword">return</span> CurrentDividePage == <span class="number">1</span> ? <span class="literal">false</span> : <span class="literal">true</span>; &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">bool</span> HasNext</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span> &#123; <span class="keyword">return</span> CurrentDividePage == TotalDividePages ? <span class="literal">false</span> : <span class="literal">true</span>; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="编写page-action-分一下步骤"><a href="#编写page-action-分一下步骤" class="headerlink" title="编写page action 分一下步骤"></a>编写page action 分一下步骤</h3><ol><li>想取得对应页的list</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var products = productService.Products</span><br><span class="line">                <span class="string">.OrderBy</span><span class="params">(<span class="attr">m</span> =&gt; m.ProductID)</span></span><br><span class="line">                <span class="string">.Skip</span><span class="params">((page - 1)</span> * PageSize)</span><br><span class="line">                <span class="string">.Take</span><span class="params">(PageSize)</span>;</span><br></pre></td></tr></table></figure><ol><li>创建对应的pageinfo</li></ol><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var <span class="attr">pageinfo</span> = new PagingInfo()</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">CurrentPage</span> = page,</span><br><span class="line">               <span class="attr">PageSize</span> = this.PageSize,</span><br><span class="line">               <span class="attr">TotalItems</span> = productService.Products.Count(),</span><br><span class="line">               <span class="attr">PageGroupSize</span> = PageGroupSize</span><br><span class="line">           &#125;;</span><br></pre></td></tr></table></figure><ol><li><p>此时需要创建创建对应的page页view model</p><p>添加实体中的项目方便model操作</p></li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductViewModel</span></span><br><span class="line">   &#123;</span><br><span class="line">       [<span class="meta">DisplayName(<span class="meta-string">"编号"</span>)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> ProductID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       [<span class="meta">DisplayName(<span class="meta-string">"商品名"</span>)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       [<span class="meta">DisplayName(<span class="meta-string">"描述"</span>)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       [<span class="meta">DisplayName(<span class="meta-string">"价格"</span>)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">decimal</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> IEnumerable&lt;Product&gt; Products &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> PagingInfo PageInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li>创建view对象，返回view（model）完成action</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model=<span class="keyword">new</span> <span class="type">ProductViewModel</span>()</span><br><span class="line">           &#123;</span><br><span class="line">               Products = products,</span><br><span class="line">               PageInfo = pageinfo</span><br><span class="line">           &#125;;</span><br><span class="line"> </span><br><span class="line">           <span class="keyword">return</span> View(model);</span><br></pre></td></tr></table></figure><ol><li>创建对应的视图</li></ol><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;table class="striped responsive-table"&gt;</span></span><br><span class="line">                <span class="variable">&lt;tr&gt;</span></span><br><span class="line">                    <span class="variable">&lt;th&gt;</span></span><br><span class="line">                        <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.ProductID)</span><br><span class="line">                    <span class="variable">&lt;/th&gt;</span></span><br><span class="line">                    <span class="variable">&lt;th&gt;</span></span><br><span class="line">                        <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Name)</span><br><span class="line">                    <span class="variable">&lt;/th&gt;</span></span><br><span class="line">                    <span class="variable">&lt;th&gt;</span></span><br><span class="line">                        <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Description)</span><br><span class="line">                    <span class="variable">&lt;/th&gt;</span></span><br><span class="line">                    <span class="variable">&lt;th&gt;</span></span><br><span class="line">                        <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Price)</span><br><span class="line">                    <span class="variable">&lt;/th&gt;</span></span><br><span class="line">                <span class="variable">&lt;/tr&gt;</span></span><br><span class="line"> </span><br><span class="line">                <span class="meta">@foreach</span> (var item in Model.Products)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="variable">&lt;tr&gt;</span></span><br><span class="line">                        <span class="variable">&lt;td&gt;</span></span><br><span class="line">                            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.ProductID)</span><br><span class="line">                        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">                        <span class="variable">&lt;td&gt;</span></span><br><span class="line">                            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Name)</span><br><span class="line">                        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">                        <span class="variable">&lt;td&gt;</span></span><br><span class="line">                            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Description)</span><br><span class="line">                        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">                        <span class="variable">&lt;td&gt;</span></span><br><span class="line">                            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Price)</span><br><span class="line">                        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">                    <span class="variable">&lt;/tr&gt;</span></span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="variable">&lt;/table&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建page-navigation"><a href="#创建page-navigation" class="headerlink" title="创建page navigation"></a>创建page navigation</h3><p>创建pagehelper用来动态创建page navigation ，委托用来传pageindex对应的url，可以用方法代替</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PageHelper</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MvcHtmlString <span class="title">PageLink</span><span class="params">(<span class="keyword">this</span> HtmlHelper htmlHelper, PagingInfo pageinfo，Func&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; pageUrl)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先创建一个为htmlhelper拓展方法的静态方法，方便在razor视图里面操作</p><p>此时创建的会根据你使用的界面有所不同</p><ol><li>先根据传入的pageinfo.CurrentPage</li><li>方法中主要是对尾页跟每个页组最后一位进行特殊处理，</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> MvcHtmlString PageLink(<span class="built_in">this</span> HtmlHelper htmlHelper, PagingInfo pageinfo, Func&lt;int, string&gt; pageUrl)</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> <span class="type">StringBuilder</span>();</span><br><span class="line">            int length;</span><br><span class="line">            <span class="keyword">if</span> (pageinfo.TotalPages &lt; pageinfo.PageGroupSize)</span><br><span class="line">                length = pageinfo.TotalPages;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pageinfo.CurrentDividePage == pageinfo.TotalDividePages)</span><br><span class="line">            &#123;</span><br><span class="line">                length = pageinfo.TotalPages - (pageinfo.CurrentDividePage - <span class="number">1</span>) * pageinfo.PageGroupSize;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                length = pageinfo.PageGroupSize;</span><br><span class="line"></span><br><span class="line">            TagBuilder ul = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"ul"</span>);</span><br><span class="line">            ul.MergeAttribute(<span class="string">"class"</span>, <span class="string">"pagination"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> pre = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"li"</span>);</span><br><span class="line">            <span class="keyword">var</span> pre_a = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"a"</span>);</span><br><span class="line">            <span class="keyword">var</span> i_pre = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"i"</span>);</span><br><span class="line">            i_pre.MergeAttribute(<span class="string">"class"</span>, <span class="string">"material-icons"</span>);</span><br><span class="line">            i_pre.SetInnerText(<span class="string">"chevron_left"</span>);</span><br><span class="line">            pre_a.InnerHtml = i_pre.ToString();</span><br><span class="line">            <span class="keyword">if</span> (!pageinfo.HasPre)</span><br><span class="line">                pre.MergeAttribute(<span class="string">"class"</span>, <span class="string">"disabled"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pre_a.MergeAttribute(<span class="string">"href"</span>, pageUrl((pageinfo.CurrentDividePage - <span class="number">2</span>) * pageinfo.PageGroupSize + <span class="number">1</span>));</span><br><span class="line">            pre.InnerHtml = pre_a.ToString();</span><br><span class="line">            sb.Append(pre.ToString());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt;= length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                TagBuilder liTag = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"li"</span>);</span><br><span class="line"></span><br><span class="line">                TagBuilder tag = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pageinfo.CurrentPage % pageinfo.PageGroupSize != i)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (pageinfo.CurrentPage % pageinfo.PageGroupSize == <span class="number">0</span> &amp;&amp; i == length)</span><br><span class="line">                    &#123;</span><br><span class="line">                        liTag.MergeAttribute(<span class="string">"class"</span>, <span class="string">"active"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        liTag.MergeAttribute(<span class="string">"class"</span>, <span class="string">"waves-effect"</span>);</span><br><span class="line">                        tag.MergeAttribute(<span class="string">"href"</span>,</span><br><span class="line">                            pageUrl((pageinfo.CurrentDividePage - <span class="number">1</span>) * pageinfo.PageGroupSize + i));</span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    liTag.MergeAttribute(<span class="string">"class"</span>, <span class="string">"active"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                tag.SetInnerText(i.ToString());</span><br><span class="line"></span><br><span class="line">                liTag.InnerHtml = tag.ToString();</span><br><span class="line"></span><br><span class="line">                sb.Append(liTag.ToString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> next = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"li"</span>);</span><br><span class="line">            <span class="keyword">var</span> next_i = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"i"</span>);</span><br><span class="line">            next_i.MergeAttribute(<span class="string">"class"</span>, <span class="string">"material-icons"</span>);</span><br><span class="line">            next_i.SetInnerText(<span class="string">"chevron_right"</span>);</span><br><span class="line">            <span class="keyword">var</span> next_a = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"a"</span>);</span><br><span class="line">            next_a.InnerHtml = next_i.ToString();</span><br><span class="line">            <span class="keyword">if</span> (!pageinfo.HasNext)</span><br><span class="line">                next.MergeAttribute(<span class="string">"class"</span>, <span class="string">"disabled"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                next_a.MergeAttribute(<span class="string">"href"</span>, pageUrl(pageinfo.CurrentDividePage * pageinfo.PageGroupSize + <span class="number">1</span>));</span><br><span class="line">            next.InnerHtml = next_a.ToString();</span><br><span class="line">            sb.Append(next.ToString());</span><br><span class="line"></span><br><span class="line">            ul.InnerHtml = sb.ToString();</span><br><span class="line">            <span class="keyword">return</span> MvcHtmlString.Create(ul.ToString());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol><li>view文件夹下面web.config添加配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.web.webPages.razor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">host</span> <span class="attr">factoryType</span>=<span class="string">"System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.2.3.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pages</span> <span class="attr">pageBaseType</span>=<span class="string">"System.Web.Mvc.WebViewPage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">namespaces</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">"luox78.GraduationProject.WebDemo.Helper"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">namespaces</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.web.webPages.razor</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>view页面添加，生成块</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Html</span>.PageLink(Model.PageInfo,<span class="function"><span class="params">m</span>=&gt;</span>Url.Action(<span class="string">"Page"</span>,<span class="string">"Product"</span>,<span class="keyword">new</span> &#123; page = m &#125;))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;接着上一个demo&quot;&gt;&lt;a href=&quot;#接着上一个demo&quot; class=&quot;headerlink&quot; title=&quot;接着上一个demo&quot;&gt;&lt;/a&gt;接着上一个demo&lt;/h3&gt;&lt;p&gt;现在controller中创建一个新的action&lt;/p&gt;
&lt;p&gt;先添加两个私有字段分别表示每页条数，和整个一组多少个，为了方便演示，设置小点&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; PageSize = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; PageGroupSize = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="分页" scheme="https://luox78.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
      <category term="asp.net mvc" scheme="https://luox78.github.io/tags/asp-net-mvc/"/>
    
      <category term="HtmlHelper拓展" scheme="https://luox78.github.io/tags/HtmlHelper%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>autofac依赖注入</title>
    <link href="https://luox78.github.io/2018/01/22/Autofac_IOC/"/>
    <id>https://luox78.github.io/2018/01/22/Autofac_IOC/</id>
    <published>2018-01-22T13:39:05.652Z</published>
    <updated>2018-01-22T13:39:35.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-Asp-net-autofac依赖注入"><a href="#C-Asp-net-autofac依赖注入" class="headerlink" title="C# Asp.net autofac依赖注入"></a>C# Asp.net autofac依赖注入</h3><h4 id="service类创建实体，接口，具体实现类"><a href="#service类创建实体，接口，具体实现类" class="headerlink" title="service类创建实体，接口，具体实现类"></a>service类创建实体，接口，具体实现类</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> ProductID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">decimal</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IProductService</span><br><span class="line">   &#123;</span><br><span class="line">       IEnumerable&lt;Product&gt; Products &#123; get; &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class ProductService:IProductService</span><br><span class="line">    &#123;</span><br><span class="line">        public IEnumerable&lt;Product&gt; Products</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                //仅作演示</span><br><span class="line">                return new List&lt;Product&gt; &#123;</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">1</span>, <span class="attr">Name</span> = <span class="string">"Football"</span>, <span class="attr">Description</span> = <span class="string">"Football description"</span>, <span class="attr">Price</span> = <span class="number">25</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">2</span>, <span class="attr">Name</span> = <span class="string">"Stuff board"</span>, <span class="attr">Description</span> = <span class="string">"Stuff board description"</span>, <span class="attr">Price</span> = <span class="number">179</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">3</span>, <span class="attr">Name</span> = <span class="string">"Running shoes"</span>, <span class="attr">Description</span> = <span class="string">"Running shoes description"</span>, <span class="attr">Price</span> = <span class="number">95</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">4</span>, <span class="attr">Name</span> = <span class="string">"Basketball"</span>, <span class="attr">Description</span> = <span class="string">"Basketball description"</span>, <span class="attr">Price</span> = <span class="number">125</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">5</span>, <span class="attr">Name</span> = <span class="string">"Volleyball"</span>, <span class="attr">Description</span> = <span class="string">"Volleyball description"</span>, <span class="attr">Price</span> = <span class="number">59</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">6</span>, <span class="attr">Name</span> = <span class="string">"Basketball shoes"</span>, <span class="attr">Description</span> = <span class="string">"Basketball shoes description"</span>, <span class="attr">Price</span> = <span class="number">195</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">7</span>, <span class="attr">Name</span> = <span class="string">"Volleyball shoes"</span>, <span class="attr">Description</span> = <span class="string">"Volleyball shoes description"</span>, <span class="attr">Price</span> = <span class="number">205</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">8</span>, <span class="attr">Name</span> = <span class="string">"Swimming clothes"</span>, <span class="attr">Description</span> = <span class="string">"Swimming clothes description"</span>, <span class="attr">Price</span> = <span class="number">199</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">9</span>, <span class="attr">Name</span> = <span class="string">"Climbing boot"</span>, <span class="attr">Description</span> = <span class="string">"Climbing boot description"</span>, <span class="attr">Price</span> = <span class="number">900</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">10</span>, <span class="attr">Name</span> = <span class="string">"Football"</span>, <span class="attr">Description</span> = <span class="string">"Football description"</span>, <span class="attr">Price</span> = <span class="number">25</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">11</span>, <span class="attr">Name</span> = <span class="string">"Stuff board"</span>, <span class="attr">Description</span> = <span class="string">"Stuff board description"</span>, <span class="attr">Price</span> = <span class="number">179</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">12</span>, <span class="attr">Name</span> = <span class="string">"Running shoes"</span>, <span class="attr">Description</span> = <span class="string">"Running shoes description"</span>, <span class="attr">Price</span> = <span class="number">95</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">13</span>, <span class="attr">Name</span> = <span class="string">"Basketball"</span>, <span class="attr">Description</span> = <span class="string">"Basketball description"</span>, <span class="attr">Price</span> = <span class="number">125</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">14</span>, <span class="attr">Name</span> = <span class="string">"Volleyball"</span>, <span class="attr">Description</span> = <span class="string">"Volleyball description"</span>, <span class="attr">Price</span> = <span class="number">59</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">15</span>, <span class="attr">Name</span> = <span class="string">"Basketball shoes"</span>, <span class="attr">Description</span> = <span class="string">"Basketball shoes description"</span>, <span class="attr">Price</span> = <span class="number">195</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">16</span>, <span class="attr">Name</span> = <span class="string">"Volleyball shoes"</span>, <span class="attr">Description</span> = <span class="string">"Volleyball shoes description"</span>, <span class="attr">Price</span> = <span class="number">205</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">17</span>, <span class="attr">Name</span> = <span class="string">"Swimming clothes"</span>, <span class="attr">Description</span> = <span class="string">"Swimming clothes description"</span>, <span class="attr">Price</span> = <span class="number">199</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">18</span>, <span class="attr">Name</span> = <span class="string">"Climbing boot"</span>, <span class="attr">Description</span> = <span class="string">"Climbing boot description"</span>, <span class="attr">Price</span> = <span class="number">900</span> &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="mvc-引用中添加autofac-mvc5引用，再App-Start里面添加AutofacConfig-cs配置文件"><a href="#mvc-引用中添加autofac-mvc5引用，再App-Start里面添加AutofacConfig-cs配置文件" class="headerlink" title="mvc 引用中添加autofac  mvc5引用，再App_Start里面添加AutofacConfig.cs配置文件"></a>mvc 引用中添加autofac  mvc5引用，再App_Start里面添加AutofacConfig.cs配置文件</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AutoFacConfig</span></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="comment">//初始化容器</span></span><br><span class="line">           <span class="keyword">var</span> builder = <span class="keyword">new</span> ContainerBuilder();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//注册每个对象实例</span></span><br><span class="line">           <span class="keyword">var</span> container = RegisterServices(builder);</span><br><span class="line"></span><br><span class="line">           DependencyResolver.SetResolver(<span class="keyword">new</span> AutofacDependencyResolver(container));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IContainer <span class="title">RegisterServices</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="comment">//注册controller</span></span><br><span class="line">           builder.RegisterControllers(<span class="keyword">typeof</span>(MvcApplication).Assembly);</span><br><span class="line">           builder.RegisterInstance(<span class="keyword">new</span> ProductService()).As&lt;IProductService&gt;();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> builder.Build();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Application-Start初始化"><a href="#Application-Start初始化" class="headerlink" title="Application_Start初始化"></a>Application_Start初始化</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">protected</span> <span class="selector-tag">void</span> <span class="selector-tag">Application_Start</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="selector-tag">AreaRegistration</span><span class="selector-class">.RegisterAllAreas</span>();</span><br><span class="line">            <span class="selector-tag">FilterConfig</span><span class="selector-class">.RegisterGlobalFilters</span>(GlobalFilters.Filters);</span><br><span class="line">            <span class="selector-tag">RouteConfig</span><span class="selector-class">.RegisterRoutes</span>(RouteTable.Routes);</span><br><span class="line">            <span class="selector-tag">BundleConfig</span><span class="selector-class">.RegisterBundles</span>(BundleTable.Bundles);</span><br><span class="line"> </span><br><span class="line">            <span class="selector-tag">AutoFacConfig</span><span class="selector-class">.Initialize</span>();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="添加product控制器"><a href="#添加product控制器" class="headerlink" title="添加product控制器"></a>添加product控制器</h4><p>控制器中index返回整个list</p><p>先往控制器中添加传输层数据私有字段</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private IProductService productService<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProductController</span><span class="params">(IProductService productService)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.productService = productService;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>当程序需要<code>productService</code>时，会通过container自动获取对象</p><h4 id="添加对应视图"><a href="#添加对应视图" class="headerlink" title="添加对应视图"></a>添加对应视图</h4><p>选list模板，暂时用entities里面的模型类，自己调整layout</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;table class="striped responsive-table"&gt;</span></span><br><span class="line">    <span class="variable">&lt;tr&gt;</span></span><br><span class="line">        <span class="variable">&lt;th&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Name)</span><br><span class="line">        <span class="variable">&lt;/th&gt;</span></span><br><span class="line">        <span class="variable">&lt;th&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Description)</span><br><span class="line">        <span class="variable">&lt;/th&gt;</span></span><br><span class="line">        <span class="variable">&lt;th&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Price)</span><br><span class="line">        <span class="variable">&lt;/th&gt;</span></span><br><span class="line">        <span class="variable">&lt;th&gt;</span><span class="variable">&lt;/th&gt;</span></span><br><span class="line">    <span class="variable">&lt;/tr&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@foreach</span> (var item in Model) &#123;</span><br><span class="line">    <span class="variable">&lt;tr&gt;</span></span><br><span class="line">        <span class="variable">&lt;td&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Name)</span><br><span class="line">        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">        <span class="variable">&lt;td&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Description)</span><br><span class="line">        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">        <span class="variable">&lt;td&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Price)</span><br><span class="line">        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">    <span class="variable">&lt;/tr&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动调试，此时通过autofac创建的对象已经可以呈现出来了。"><a href="#启动调试，此时通过autofac创建的对象已经可以呈现出来了。" class="headerlink" title="启动调试，此时通过autofac创建的对象已经可以呈现出来了。"></a>启动调试，此时通过autofac创建的对象已经可以呈现出来了。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;C-Asp-net-autofac依赖注入&quot;&gt;&lt;a href=&quot;#C-Asp-net-autofac依赖注入&quot; class=&quot;headerlink&quot; title=&quot;C# Asp.net autofac依赖注入&quot;&gt;&lt;/a&gt;C# Asp.net autofac依赖注入&lt;/h3&gt;&lt;h4 id=&quot;service类创建实体，接口，具体实现类&quot;&gt;&lt;a href=&quot;#service类创建实体，接口，具体实现类&quot; class=&quot;headerlink&quot; title=&quot;service类创建实体，接口，具体实现类&quot;&gt;&lt;/a&gt;service类创建实体，接口，具体实现类&lt;/h4&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Product&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ProductID &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Name &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Description &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;decimal&lt;/span&gt; Price &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="autofac" scheme="https://luox78.github.io/tags/autofac/"/>
    
      <category term="IOC" scheme="https://luox78.github.io/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>控制反转与依赖注入</title>
    <link href="https://luox78.github.io/2018/01/22/IOC/"/>
    <id>https://luox78.github.io/2018/01/22/IOC/</id>
    <published>2018-01-22T11:47:29.334Z</published>
    <updated>2018-02-12T13:38:21.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、分享Iteye的开涛对Ioc的精彩讲解"><a href="#一、分享Iteye的开涛对Ioc的精彩讲解" class="headerlink" title="一、分享Iteye的开涛对Ioc的精彩讲解"></a>一、分享Iteye的开涛对Ioc的精彩讲解</h2><p>　　首先要分享的是Iteye的开涛这位技术牛人对Spring框架的IOC的理解，写得非常通俗易懂，以下内容全部来自原文，原文地址：<a href="http://jinnianshilongnian.iteye.com/blog/1413846" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/blog/1413846</a></p><a id="more"></a><h3 id="1-1、IoC是什么"><a href="#1-1、IoC是什么" class="headerlink" title="1.1、IoC是什么"></a>1.1、IoC是什么</h3><p>　　<strong>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。</strong>在Java开发中，<strong>Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</strong>如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><p>　　●<strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；<strong>谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</strong></p><p>　　●<strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？<strong>因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</strong></p><p>　　用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：</p><p><img src="https://luox78.github.io/images/IOC1.jpg" alt="https://luox78.github.io/images/IOC1.jpg"></p><p>图1-1 传统应用程序示意图</p><p>　　当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:</p><p><img src="https://luox78.github.io/images/IOC2.png" alt="https://luox78.github.io/images/IOC2.png"><br>图1-2有IoC/DI容器后程序结构示意图</p><h3 id="1-2、IoC能做什么"><a href="#1-2、IoC能做什么" class="headerlink" title="1.2、IoC能做什么"></a>1.2、IoC能做什么</h3><p>　　IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>　　其实<strong>IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</strong></p><p>　　<strong>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</strong></p><h3 id="1-3、IoC和DI"><a href="#1-3、IoC和DI" class="headerlink" title="1.3、IoC和DI"></a>1.3、IoC和DI</h3><p>　　<strong>DI—Dependency Injection，即“依赖注入”</strong>：<strong>组件之间依赖关系</strong>由容器在运行期决定，形象的说，即<strong>由容器动态的将某个依赖关系注入到组件之中</strong>。<strong>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。</strong>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>　　理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><p>　　●<strong>谁依赖于谁：</strong>当然是<strong>应用程序依赖于IoC容器</strong>；</p><p>　　●<strong>为什么需要依赖：**</strong>应用程序需要IoC容器来提供对象需要的外部资源**；</p><p>　　●<strong>谁注入谁：</strong>很明显是<strong>IoC容器注入应用程序某个对象，应用程序依赖的对象</strong>；</p><p><strong>　　●注入了什么：</strong>就是<strong>注入某个对象所需要的外部资源（包括对象、资源、常量数据）</strong>。</p><p>　　<strong>IoC和DI</strong>由什么<strong>关系</strong>呢？其实它们<strong>是同一个概念的不同角度描述</strong>，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，<strong>“**</strong>依赖注入”<strong><strong>明确描述了“被注入对象依赖IoC</strong></strong>容器配置依赖对象”。**</p><p>　　看过很多对Spring的Ioc理解的文章，好多人对Ioc和DI的解释都晦涩难懂，反正就是一种说不清，道不明的感觉，读完之后依然是一头雾水，感觉就是开涛这位技术牛人写得特别通俗易懂，他清楚地解释了IoC(控制反转) 和DI(依赖注入)中的每一个字，读完之后给人一种豁然开朗的感觉。我相信对于初学Spring框架的人对Ioc的理解应该是有很大帮助的。</p><h2 id="二、分享Bromon的blog上对IoC与DI浅显易懂的讲解"><a href="#二、分享Bromon的blog上对IoC与DI浅显易懂的讲解" class="headerlink" title="二、分享Bromon的blog上对IoC与DI浅显易懂的讲解"></a>二、分享Bromon的blog上对IoC与DI浅显易懂的讲解</h2><h3 id="2-1、IoC-控制反转"><a href="#2-1、IoC-控制反转" class="headerlink" title="2.1、IoC(控制反转)"></a>2.1、IoC(控制反转)</h3><p>　　首先想说说<strong>IoC（Inversion of Control，控制反转）</strong>。这是<strong>spring的核心</strong>，贯穿始终。<strong>所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。</strong>这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。</p><p>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。<strong>Spring所倡导的开发方式</strong>就是如此，<strong>所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</strong></p><h3 id="2-2、DI-依赖注入"><a href="#2-2、DI-依赖注入" class="headerlink" title="2.2、DI(依赖注入)"></a>2.2、DI(依赖注入)</h3><p>　　<strong>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的</strong>。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p><p>　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、分享Iteye的开涛对Ioc的精彩讲解&quot;&gt;&lt;a href=&quot;#一、分享Iteye的开涛对Ioc的精彩讲解&quot; class=&quot;headerlink&quot; title=&quot;一、分享Iteye的开涛对Ioc的精彩讲解&quot;&gt;&lt;/a&gt;一、分享Iteye的开涛对Ioc的精彩讲解&lt;/h2&gt;&lt;p&gt;　　首先要分享的是Iteye的开涛这位技术牛人对Spring框架的IOC的理解，写得非常通俗易懂，以下内容全部来自原文，原文地址：&lt;a href=&quot;http://jinnianshilongnian.iteye.com/blog/1413846&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://jinnianshilongnian.iteye.com/blog/1413846&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DailyLearning" scheme="https://luox78.github.io/categories/DailyLearning/"/>
    
    
      <category term="IOC" scheme="https://luox78.github.io/tags/IOC/"/>
    
      <category term="DI" scheme="https://luox78.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>三层01</title>
    <link href="https://luox78.github.io/2018/01/21/sanchen01/"/>
    <id>https://luox78.github.io/2018/01/21/sanchen01/</id>
    <published>2018-01-21T04:39:30.895Z</published>
    <updated>2018-01-21T13:11:56.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SqlHelper实现"><a href="#SqlHelper实现" class="headerlink" title="SqlHelper实现"></a>SqlHelper实现</h2><ol><li><strong>往app.config中添加connectionstrings</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"constr"</span> <span class="attr">connectionString</span>=<span class="string">"data source=”LUOX78“的WIN;initial catalog=school;integrated security=true"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>创建SqlHelper类<a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> constr；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加引用给constr赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> constr = ConfigurationManager.ConnectionStrings[<span class="string">"constr"</span>].ConnectionString;</span><br></pre></td></tr></table></figure></li><li><p>编写无返回值，有一行返回值，返回多行，返回datatable的方法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public static int ExecuteNoQuery(string sql, CommandType<span class="built_in"> type </span>= CommandType.Text,params SqlParameter[] sqlParameters)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var con = new SqlConnection(constr))</span><br><span class="line">            &#123;</span><br><span class="line">                using (var cmd = new SqlCommand(sql, con))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sqlParameters == <span class="literal">null</span>)</span><br><span class="line">                        return 0;</span><br><span class="line">                    cmd.Parameters.AddRange(sqlParameters);</span><br><span class="line">                    cmd.CommandType = type;</span><br><span class="line">                    con.Open();</span><br><span class="line">                    return cmd.ExecuteNonQuery();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">public static SqlDataReader ExecuteReader(string sql, CommandType<span class="built_in"> type </span>= CommandType.Text,</span><br><span class="line">            params SqlParameter[] sqlParameters)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var con = new SqlConnection(constr))</span><br><span class="line">            &#123;</span><br><span class="line">                using (var cmd = new SqlCommand(sql, con))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sqlParameters == <span class="literal">null</span>)</span><br><span class="line">                        return <span class="literal">null</span>;</span><br><span class="line">                    cmd.CommandType = type;</span><br><span class="line">                    cmd.Parameters.AddRange(sqlParameters);</span><br><span class="line">                    try</span><br><span class="line">                    &#123;</span><br><span class="line">                        con.Open();</span><br><span class="line">                        return cmd.ExecuteReader(CommandBehavior.CloseConnection);</span><br><span class="line">                    &#125;</span><br><span class="line">                    catch (Exception e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        con.Close();</span><br><span class="line">                        Console.WriteLine(e);</span><br><span class="line">                        throw;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">  public static DataTable ExecuteDataTable(string sql, CommandType<span class="built_in"> type </span>= CommandType.Text,</span><br><span class="line">            params SqlParameter[] sqlParameters)</span><br><span class="line">        &#123;</span><br><span class="line">            var <span class="attribute">dt</span>=new DataTable();</span><br><span class="line">            using (var adapter = new SqlDataAdapter(sql, constr))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sqlParameters != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    adapter.SelectCommand.Parameters.AddRange(sqlParameters);</span><br><span class="line">                &#125;</span><br><span class="line">                adapter.SelectCommand.CommandType = type;</span><br><span class="line">                adapter.Fill(dt);</span><br><span class="line">            &#125;</span><br><span class="line">            return dt;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><p>MD5算法是一种<strong>散列（hash）算法</strong>（摘要算法，指纹算法），不是一种加密算法（易错）。任何长度的任意内容都可以用MD5计算出散列值。介绍工具：CalcMD5.zip。主要作用就是【验明“真身”】，字符串与文件均可。</p><p>MD5长度一般是<strong>32位的16进制数字符串</strong>（比如71f396e4134a1160d90bb1439876df31），<strong>MD5值的个数是有限的，但是源数据是无限的，因此存在着不同的内容产生相同MD5值的概率</strong>。因此MD5算法<strong>不可逆</strong>，也就是只能得到内容对应的MD5值，无法由MD5值反推内容。但是对不同的内容产生相同MD5值的概率非常非常非常低！</p><p>   同一个字符串或文件生成的MD5都是一样的</p><p>   用处：登录密码存入数据库使用MD5，检验文件是否被修改过</p><p>   .NET下MD5使用</p><p>   string的MD5</p>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建MD5对象</span></span><br><span class="line">MD5 obj=MD5.Create();</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换</span></span><br><span class="line"><span class="comment">//编码的不同会导致获取MD5值不一样</span></span><br><span class="line"><span class="keyword">var</span> md5Bytes = obj.ComputeHash(Encoding.UTF8.GetBytes(str));</span><br><span class="line"><span class="keyword">var</span> sb=new StringBuilder(32);</span><br><span class="line"><span class="keyword">foreach</span> (byte md5Byte <span class="keyword">in</span> md5Bytes)</span><br><span class="line">&#123;</span><br><span class="line">sb.<span class="keyword">Append</span>(md5Byte.<span class="keyword">ToString</span>(<span class="string">"x2"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者直接使用bitconvert</span></span><br><span class="line">BitConverter.<span class="keyword">ToString</span>(md5Bytes).<span class="keyword">Replace</span>(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">obj.<span class="keyword">Clear</span>();</span><br></pre></td></tr></table></figure><p>   文件的MD5(向<code>ComputeHash</code>传入流即可)</p>   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] md5Bytes;</span><br><span class="line"><span class="keyword">using</span> (var reader = <span class="built_in">File</span>.OpenRead(path))</span><br><span class="line">&#123;</span><br><span class="line">md5Bytes = obj.ComputeHash(reader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   其他的散列算法：SHA512或SHA256，用法与MD5一样</p>   <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHA512 obj = SHA512.Create()<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="使用NPOI操作Excel"><a href="#使用NPOI操作Excel" class="headerlink" title="使用NPOI操作Excel"></a>使用NPOI操作Excel</h2><p>   Excel组成：workbook（工作簿），sheet [ʃit] （工作表），row行，cell单元格</p><p>   先添加NOPI引用</p><pre><code>1. 写入excel表单</code></pre>   <figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建excel对象(workbook)</span></span><br><span class="line"><span class="type">IWorkbook</span> wk=<span class="function"><span class="keyword">new</span> <span class="title">HSSFWorkbook</span>();</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//workbook中创建sheet</span></span></span><br><span class="line"><span class="function"><span class="title">ISheet</span> <span class="title">sheet</span> = <span class="title">wk</span>.<span class="title">CreateSheet</span>("工作表<span class="number">1</span>");</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//创建10行</span></span></span><br><span class="line"><span class="function"><span class="title">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function"><span class="title">IRow</span> <span class="title">row</span> = <span class="title">sheet</span>.<span class="title">CreateRow</span>(i);</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">cell</span> = <span class="title">row</span>.<span class="title">CreateCell</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="function"><span class="title">cell</span>.<span class="title">SetCellValue</span>("luox78");</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">cell2</span> = <span class="title">row</span>.<span class="title">CreateCell</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="function"><span class="title">cell2</span>.<span class="title">SetCellValue</span>(i);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//保存</span></span></span><br><span class="line"><span class="function"><span class="title">using</span> (var writer=<span class="type">File</span>.<span class="type">OpenWrite</span>("wk1.xls"))</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function"><span class="title">wk</span>.<span class="title">Write</span>(writer);</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><pre><code>2. 读取excel</code></pre>   <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadFromXls</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="comment">//创建excel对象(workbook)</span></span><br><span class="line">          <span class="keyword">using</span> (<span class="keyword">var</span> reader=File.OpenRead(<span class="string">"ReadExcel.xls"</span>))</span><br><span class="line">          &#123;</span><br><span class="line">              IWorkbook wk = <span class="keyword">new</span> HSSFWorkbook(reader);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wk.NumberOfSheets; i++)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="comment">//获取每个sheet</span></span><br><span class="line">                  <span class="keyword">var</span> sheet = wk.GetSheetAt(i);</span><br><span class="line">                  Console.WriteLine(<span class="string">$"sheet<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;sheet.SheetName&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= sheet.LastRowNum; j++)</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="comment">//获取每个row</span></span><br><span class="line">                      <span class="keyword">var</span> row = sheet.GetRow(j);</span><br><span class="line">                      Console.WriteLine(<span class="string">$"row<span class="subst">&#123;j&#125;</span>:"</span>);</span><br><span class="line">                      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; row.LastCellNum; k++)</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="comment">//输出每个cell的内容</span></span><br><span class="line">                          Console.WriteLine(row.GetCell(k).ToString());</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><ol><li><p>从数据库中导出excel</p><p>两步和之前一样</p><p>从数据库中读取数据</p><p>调用<code>WriteToExcel(IWorkbook wk,Dictionary&lt;ISheet,List&lt;IRow&gt;&gt; sheets )</code></p><p>对于空处理：从数据库读取为unknown，模型的值类型修改成可空值类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">reader</span><span class="selector-class">.IsDBNull</span>(<span class="selector-tag">column</span>)?<span class="selector-tag">null</span><span class="selector-pseudo">:(int</span>?)<span class="selector-tag">reader</span><span class="selector-class">.GetInt32</span>(<span class="selector-tag">column</span>);</span><br></pre></td></tr></table></figure><p>写入到excel时</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ICell <span class="keyword">cell</span> = row<span class="variable">.CreateCell</span>(colomn);</span><br><span class="line"><span class="keyword">if</span>(read == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">cell</span><span class="variable">.SetCellType</span>(CellType<span class="variable">.BLANK</span>);<span class="comment">//设置创建的单元格为空单元格</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">cell</span><span class="variable">.SetCellValue</span>((Type)read);<span class="comment">//将Type类型的数据放入cell</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SqlHelper实现&quot;&gt;&lt;a href=&quot;#SqlHelper实现&quot; class=&quot;headerlink&quot; title=&quot;SqlHelper实现&quot;&gt;&lt;/a&gt;SqlHelper实现&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;往app.config中添加connectionstrings&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;connectionStrings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;constr&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;connectionString&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;data source=”LUOX78“的WIN;initial catalog=school;integrated security=true&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;connectionStrings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建SqlHelper类
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="三层" scheme="https://luox78.github.io/tags/%E4%B8%89%E5%B1%82/"/>
    
      <category term="MD5" scheme="https://luox78.github.io/tags/MD5/"/>
    
      <category term="NOPI" scheme="https://luox78.github.io/tags/NOPI/"/>
    
      <category term="SqlHelper" scheme="https://luox78.github.io/tags/SqlHelper/"/>
    
  </entry>
  
  <entry>
    <title>Entity Framework02-code first修改模型，迁移数据库</title>
    <link href="https://luox78.github.io/2018/01/18/Entity%20Framework%20Code%20First%20to%20a%20Update%20model%20and%20migrate/"/>
    <id>https://luox78.github.io/2018/01/18/Entity Framework Code First to a Update model and migrate/</id>
    <published>2018-01-18T14:24:01.824Z</published>
    <updated>2018-01-19T15:39:15.091Z</updated>
    
    <content type="html"><![CDATA[<p> 本文以<code>asp.net mvc</code>自己提供的身份验证为例</p><h2 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h2><p>在<code>Models\IdentityModels.cs</code> 里 <code>ApplicationUser</code>类下添加你想添加的属性，比如生日</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DateTime BirthDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用Migrations修改数据库"><a href="#使用Migrations修改数据库" class="headerlink" title="使用Migrations修改数据库"></a>使用<strong>Migrations</strong>修改数据库</h2><ul><li><p>由于已经改变了model的属性所以应该修改之前的数据库</p></li><li><p>前往工具/NUGET/程序包管理器控制台</p></li><li><p>输入<code>Enable-Migrations</code>初始化迁移</p><p><code>Add-Migration &quot;Birthdate&quot;</code> 添加名为Birthdate的迁移文件进你的工程</p><p><code>Update-Database</code>执行你的迁移文件更新数据库</p></li></ul><h2 id="修改你的view对应的model"><a href="#修改你的view对应的model" class="headerlink" title="修改你的view对应的model"></a>修改你的view对应的model</h2><p>在 <code>Models\AccountViewModels.cs</code>中找到<code>RegisterViewModel</code>类添加属性，当然也可以添加你想要的特性</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DateTime BirthDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="修改对应的view展示"><a href="#修改对应的view展示" class="headerlink" title="修改对应的view展示"></a>修改对应的view展示</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-field col s12 m3 l3"</span>&gt;</span><br><span class="line">      &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"material-icons prefix"</span>&gt;date_range&lt;<span class="regexp">/i&gt;</span></span><br><span class="line"><span class="regexp">       @Html.LabelFor(m =&gt; m.BirthDate)</span></span><br><span class="line"><span class="regexp">       @Html.TextBoxFor(m =&gt; m.BirthDate, new &#123; @class = "datepicker" &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>运行就能看到修改后的结果了</p><h2 id="如何展示新的信息"><a href="#如何展示新的信息" class="headerlink" title="如何展示新的信息"></a>如何展示新的信息</h2><ul><li><p>得到 <code>UserId</code>, 可以通过 <code>ASP.NET Identity system</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var currentUserId</span> = User.Identity.GetUserId();</span><br></pre></td></tr></table></figure></li><li><p>实例化<code>UserManager</code>在ASP.Identity system命名空间下</p></li><li><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> manager = <span class="keyword">new</span> <span class="type">UserManager</span>&lt;MyUser&gt;(<span class="keyword">new</span> <span class="type">UserStore</span>&lt;MyUser&gt;(<span class="keyword">new</span> <span class="type">MyDbContext</span>()));</span><br></pre></td></tr></table></figure></li><li><p>得到当前用户实例</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var currentUser</span> = manager.FindById(User.Identity.GetUserId());</span><br></pre></td></tr></table></figure></li><li><p>通过实例展现修改的信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> birthdate = currentUser.BirthDate</span><br></pre></td></tr></table></figure></li></ul><h2 id="自己创建新的model，展示想显示的信息"><a href="#自己创建新的model，展示想显示的信息" class="headerlink" title="自己创建新的model，展示想显示的信息"></a>自己创建新的model，展示想显示的信息</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUser</span> : <span class="type">IdentityUser</span></span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> virtual MyUserInfo MyUserInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserInfo</span></span>&#123;</span><br><span class="line">       <span class="keyword">public</span> int Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> string FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> string LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDbContext</span> : <span class="type">IdentityDbContext</span>&lt;<span class="type">MyUser</span>&gt;</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> MyDbContext()</span><br><span class="line">           : base(<span class="string">"DefaultConnection"</span>)</span><br><span class="line">       &#123;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> System.Data.Entity.DbSet&lt;MyUserInfo&gt; MyUserInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Getting Profile information</strong></p><ul><li><p>When the User Logs in, you can display the profile information by doing the following</p></li><li><p>Get the current logged in UserId, so you can look the user up in ASP.NET Identity system</p></li><li><ul><li>var currentUserId = User.Identity.GetUserId();</li></ul></li><li><p>Instantiate the UserManager in ASP.Identity system so you can look up the user in the system</p></li><li><ul><li>var manager = new UserManager<myuser>(new UserStore<myuser>(new MyDbContext()));</myuser></myuser></li></ul></li><li><p>Get the User object</p></li><li><ul><li>var currentUser = manager.FindById(User.Identity.GetUserId());</li></ul></li><li><p>Get the profile information about the user</p></li><li><ul><li>currentUser.MyUserInfo.FirstName</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 本文以&lt;code&gt;asp.net mvc&lt;/code&gt;自己提供的身份验证为例&lt;/p&gt;
&lt;h2 id=&quot;添加属性&quot;&gt;&lt;a href=&quot;#添加属性&quot; class=&quot;headerlink&quot; title=&quot;添加属性&quot;&gt;&lt;/a&gt;添加属性&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;Models\IdentityModels.cs&lt;/code&gt; 里 &lt;code&gt;ApplicationUser&lt;/code&gt;类下添加你想添加的属性，比如生日&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DateTime BirthDate &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="Entity Framework" scheme="https://luox78.github.io/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>初始JQuery03</title>
    <link href="https://luox78.github.io/2018/01/17/JQuery03/"/>
    <id>https://luox78.github.io/2018/01/17/JQuery03/</id>
    <published>2018-01-17T11:49:11.642Z</published>
    <updated>2018-01-20T15:28:50.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RadioButton-checkbox"><a href="#RadioButton-checkbox" class="headerlink" title="RadioButton|checkbox"></a>RadioButton|checkbox</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"Radio2"</span> <span class="attribute">checked</span>=<span class="string">"checked"</span> <span class="attribute">name</span>=<span class="string">"gender"</span> <span class="attribute">type</span>=<span class="string">"radio"</span> <span class="attribute">value</span>=<span class="string">"男"</span> /&gt;男</span><br><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"Radio1"</span> <span class="attribute">checked</span>=<span class="string">"checked"</span> <span class="attribute">name</span>=<span class="string">"gender"</span> <span class="attribute">type</span>=<span class="string">"radio"</span> <span class="attribute">value</span>=<span class="string">"女"</span> /&gt;女</span><br><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"Radio3"</span>checked="checked" <span class="attribute">name</span>=<span class="string">"gender"</span> <span class="attribute">type</span>=<span class="string">"radio"</span> <span class="attribute">value</span>=<span class="string">"未知"</span> /&gt;未知</span><br></pre></td></tr></table></figure><a id="more"></a>如何取选中的值<br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">"input[name=gender]:checked"</span>).val()</span></span><br></pre></td></tr></table></figure><p>设置<code>RadioButton</code>的选中值</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.attr(‘<span class="keyword">checked</span>’,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><code>$(&quot;input[name=gender]&quot;).val([&quot;女&quot;]);</code>也可以直接设置，注意val中参数的[]不能省略,val()的参数必须是一个数组。</p><p><code>RadioButton</code>的选择技巧对于<code>CheckBox</code>和<code>Select</code>列表框也适用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(‘<span class="comment">#selOne’).val([‘1’,’2’,’3’]);//同时设置多个下拉菜单选中</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">"#btn1"</span>).attr(<span class="string">"checked"</span>,<span class="literal">true</span>)</span></span><br></pre></td></tr></table></figure><p>实现全选部不选</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"input:checkbox"</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"input:checkbox"</span>).prop(&#123; <span class="attr">checked</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="一些事件"><a href="#一些事件" class="headerlink" title="一些事件"></a>一些事件</h2><p><code>$(&quot;#btn&quot;).bind(&quot;click&quot;,function(){})</code>事件绑定</p><p><code>hover(entern,leavefn)</code>当鼠标放在元素上时调用enterfn方法，当鼠标离开元素的时候调用leavefn方法。相当于mouseover与mouseout事件的结合。</p><p><code>$(&#39;#bt&#39;).toggle(funtion)</code> 相互切换</p><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>事件冒泡：jQuery中也像JavaScript一样是事件冒泡<code>window.event.cancelBubble=true</code>,ie取消</p><p>如果想获得事件相关的信息，只要给响应的匿名函数增加一个参数：e，</p><p><strong><em>e就是事件对象</em></strong>。调用事件对象的<code>stopPropagation()</code>方法终止冒泡。</p><p><code>e. stopPropagation();</code><br>标准js方式：<code>e.stopPropagation();</code><br>IE下：<code>e.cancelBubble = true；</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"tr"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">alert(<span class="string">"tr被点击"</span>); </span><br><span class="line">e.stopPropagation(); </span><br><span class="line">&#125;);<span class="comment">//注意函数的参数是e</span></span><br></pre></td></tr></table></figure><h2 id="重写移动图片案例"><a href="#重写移动图片案例" class="headerlink" title="重写移动图片案例"></a>重写移动图片案例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"office.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"img"</span>).offset(&#123; <span class="attr">left</span>: e.pageX, <span class="attr">top</span>: e.pageY &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery的事件对象：event对象"><a href="#jQuery的事件对象：event对象" class="headerlink" title="jQuery的事件对象：event对象"></a>jQuery的事件对象：event对象</h2><ul><li>属性：<code>pageX</code>、<code>pageY</code>、<code>target</code>(指事件源)</li><li><code>e.which</code>如果是鼠标事件获得按键（1左键，2中键，3右键）</li><li><code>keydown</code>则获取的是keyCode</li><li><code>unbind()</code>方法即可移除元素上所有绑定的事件，如果unbind(“click”)则只移除click事件的绑定。bind:+=；unbind:-=</li><li><code>one()</code>方法进行事件绑定,值执行一次</li></ul><h2 id="jquery-animate"><a href="#jquery-animate" class="headerlink" title="jquery animate"></a>jquery animate</h2><p><code>show()</code>、<code>hide()</code>方法会显示、隐藏元素。用<code>toggle(speed)</code>方法在显示、隐藏之间切换</p><p>滑动效果<br><code>slideDown()</code>、<code>slideUp()</code>、<code>slideToggle()</code>隐藏就显示,显示就隐藏</p><p>淡入淡出（透明）<br><code>fadeIn()</code>、<code>fadeOut()</code>、<code>fadeToggle(</code>)同上、<code>fadeTo()</code>到达透明度多少2000，0.1</p><p>自定义动画<br><code>animate({样式},speed)</code><br>部分样式不支持：backgroundColor、color、borderStyle、……<br>使用animate设置对象位置的时候要确保<code>position</code>的值为<code>absolute</code>或<code>relative</code>.<br>停止动画正在执行动画的元素<code>.stop()(*)</code>,带参数的<code>stop(true,false);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#im'</span>).animate(&#123; <span class="string">'height'</span>: <span class="string">'20px'</span>, <span class="string">'width'</span>: <span class="string">'20px'</span>, <span class="string">'left'</span>: <span class="string">'10px'</span>, <span class="string">'top'</span>: <span class="string">'500px'</span> &#125;, <span class="number">3000</span>).animate(&#123; <span class="string">'height'</span>: <span class="string">'+=200px'</span>, <span class="string">'width'</span>: <span class="string">'+=200px'</span>, <span class="string">'left'</span>: <span class="string">'500px'</span>, <span class="string">'top'</span>: <span class="string">'50px'</span> &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">$(<span class="string">`#im`</span>).stop(<span class="literal">true</span>);<span class="comment">//带参数继续当前动画,后面动画清空</span></span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><strong>什么是cookie：</strong>Cookie就是保存在浏览器上的内容，用户在这次浏览页面的时候向Cookie中保存文本内容，下次再访问页面的时候就可以取出来上次保存的内容，这样就可以得到上次“记忆”的内容。Cookie不是jQuery特有的概念，只不过jQueryCookie把它简化的更好用而已。Cookie就是存储在浏览器里的一些数据。</p><p>Cookie需要浏览器的支持，浏览器的Cookie是可以禁用的，如果禁用了Cookie就不能使用了，不过一般不用考虑禁用Cookie的情况。Cookie的几个特征：Cookie是与域名相关的，所以163.com不能读取baidu.com记录的Cookie，正因为如此读取、设置Cookie的时候不用担心不同域名cookie的冲突；一个域名能写入的Cookie总尺寸是有限制的，一般是是几千字节，能写入的Cookie总条数一般是几十条，超过以后浏览器自己会根据自己的策略移除一些Cookie；Cookie不是写入以后一定下次能读出来，浏览器可能会定期清除、用户也可能会手动清除。写到Cookie中的数据一定是可有可无的数据，像防止投票作弊就不能用Cookie。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RadioButton-checkbox&quot;&gt;&lt;a href=&quot;#RadioButton-checkbox&quot; class=&quot;headerlink&quot; title=&quot;RadioButton|checkbox&quot;&gt;&lt;/a&gt;RadioButton|checkbox&lt;/h2&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Radio2&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;checked&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;男&quot;&lt;/span&gt; /&amp;gt;男&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Radio1&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;checked&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;女&quot;&lt;/span&gt; /&amp;gt;女&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Radio3&quot;&lt;/span&gt;checked=&quot;checked&quot; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;未知&quot;&lt;/span&gt; /&amp;gt;未知&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JQuery" scheme="https://luox78.github.io/categories/JQuery/"/>
    
    
      <category term="jsfoundation" scheme="https://luox78.github.io/tags/jsfoundation/"/>
    
      <category term="jQueryfoundation" scheme="https://luox78.github.io/tags/jQueryfoundation/"/>
    
  </entry>
  
  <entry>
    <title>Entity Framework01-code first建立一个新数据库</title>
    <link href="https://luox78.github.io/2018/01/16/Entity%20Framework%20Code%20First%20to%20a%20New%20Database/"/>
    <id>https://luox78.github.io/2018/01/16/Entity Framework Code First to a New Database/</id>
    <published>2018-01-16T12:24:50.695Z</published>
    <updated>2018-01-16T12:42:21.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建立model"><a href="#建立model" class="headerlink" title="建立model"></a>建立model</h2><p>编写.net class建立model</p><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blog</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> BlogId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> List&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Post</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> PostId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> BlogId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> Blog Blog &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类中带id的会自动标志成主键</li><li>两个导航属性 (Blog.Posts and Post.Blog) virtual，这是entity framework懒加载（ Lazy Loading </li><li>）的特征，懒加载值得是这些属性内容会自动从数据库中加载出来</li></ul><h2 id="建立上下文（Context）"><a href="#建立上下文（Context）" class="headerlink" title="建立上下文（Context）"></a>建立上下文（Context）</h2><p>添加引用</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.<span class="built_in">Data</span>.Entity;</span><br></pre></td></tr></table></figure><p>建立数据库上下文，继承自<code>DbContext</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloggingContext</span> : <span class="type">DbContext</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Blog&gt; Blogs &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DbSet</code>代表数据库中的表，上下文中存储就是关系表</p><h2 id="读取-存入数据"><a href="#读取-存入数据" class="headerlink" title="读取 存入数据"></a>读取 存入数据</h2><p>存入</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmpBlog = <span class="keyword">new</span> <span class="type">Blog</span>() &#123; Name = <span class="string">"luox78's blog"</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> <span class="type">BloggingContext</span>();</span><br><span class="line">db.Blogs.Add(tmpBlog);</span><br><span class="line">db.SaveChanges();</span><br></pre></td></tr></table></figure><p>读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = db.Blogs.Where(<span class="function"><span class="params">blog</span> =&gt;</span> blog.BlogId == <span class="number">1</span>);</span><br><span class="line">foreach (<span class="keyword">var</span> blog <span class="keyword">in</span> obj)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(blog.Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//luox78's blog</span></span><br></pre></td></tr></table></figure><p>数据在哪儿？</p><ul><li>Visual Studio 2010数据库一般建在 local SQL Express</li><li>Visual Studio 2012以上一般在 <a href="https://msdn.microsoft.com/library/hh510202(v=sql.110" target="_blank" rel="noopener">LocalDb</a>.aspx)</li><li>数据库命名是项目名加上建立的上下文名字</li></ul><p><img src="https://luox78.github.io/images/entity1.png" alt="https://luox78.github.io/images/entity1.png"></p><p>执行完写入之后数据已经进入数据库</p><p><img src="https://luox78.github.io/images/entity2.png" alt="https://luox78.github.io/images/entity2.png"></p><h2 id="接下来我会分别介绍各个部分"><a href="#接下来我会分别介绍各个部分" class="headerlink" title="接下来我会分别介绍各个部分"></a>接下来我会分别介绍各个部分</h2><blockquote><p>原文：<a href="https://msdn.microsoft.com/en-us/library/jj193542(v=vs.113" target="_blank" rel="noopener">Entity Framework Code First to a New Database</a>.aspx)</p><p>翻译：luox78</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;建立model&quot;&gt;&lt;a href=&quot;#建立model&quot; class=&quot;headerlink&quot; title=&quot;建立model&quot;&gt;&lt;/a&gt;建立model&lt;/h2&gt;&lt;p&gt;编写.net class建立model&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="Entity Framework" scheme="https://luox78.github.io/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>初始JQuery02</title>
    <link href="https://luox78.github.io/2018/01/15/JQuery02/"/>
    <id>https://luox78.github.io/2018/01/15/JQuery02/</id>
    <published>2018-01-15T11:48:34.839Z</published>
    <updated>2018-01-15T15:20:34.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>不仅可以使用选择器进行进行绝对定位，还可以进行相对定位，只要在$()指定第二个参数，第二个参数为相对的元素.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$(this) 代表tr，在tr下面找td</span></span><br><span class="line">$(<span class="string">"tr"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       $(<span class="string">"td:even"</span>, $(<span class="keyword">this</span>)).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><ul><li><code>$(&quot;div[id]&quot;)</code>选取有id属性的<code>&lt;div&gt;</code></li><li><code>$(&quot;div[title=test]&quot;)</code>选取title属性为“test”的<code>&lt;div&gt;</code>，jQuery中没有对<code>getElementsByName</code>进行封装，用<code>$(&quot;input[name=abc]&quot;)</code></li><li><code>$(&quot;div[title!=test]&quot;)</code>选取title属性不为“test”的<code>&lt;div&gt;</code></li><li>还可以选择开头<code>[name^=值]</code>、结束<code>[] name$=值]</code>、包含<code>[ name*=值]</code>等，条件还可以复合。【[属性1=a][属性2=b]…】</li></ul><h3 id="表单对象属性选择器（过滤器）"><a href="#表单对象属性选择器（过滤器）" class="headerlink" title="表单对象属性选择器（过滤器）"></a>表单对象属性选择器（过滤器）</h3><ul><li><code>$(&quot;#form1:enabled&quot;)</code>选取id为form1的表单内所有启用的元素</li><li><code>$(&quot;#form1:disabled&quot;)</code>选取id为form1的表单内所有禁用的元素</li><li><code>$(“input:checked”)</code>选取所有选中的元素（Radio、CheckBox）,这个中间不能加空格.</li><li><code>$(&quot;select:selected&quot;)</code>选取所有选中的选项元素（下拉列表）</li><li><strong>注意</strong>：<code>$(&#39;&#39;:input&quot;)</code>选取所有<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>和<code>&lt;button&gt;</code>元素。和<code>$(&quot;input&quot;)</code>不一样， <code>$(&quot;input&quot;)</code>只获得<code>&lt;input&gt;</code></li><li><code>$(&quot;:text&quot;)</code>选取所有单行文本框，等价于<code>$(&quot;input[type=text]&quot;)</code>,<code>$(‘input[type=text]’)</code>,<code>$(‘:text’)</code>;</li><li>同理还有<code>:radio</code>、<code>:checkbox</code>、<code>:submit</code>、<code>:image</code>、<code>:reset</code>、<code>:button</code>、<code>:file</code>、<code>:hidden</code>。</li></ul><h2 id="jQuery的Dom操作"><a href="#jQuery的Dom操作" class="headerlink" title="jQuery的Dom操作"></a>jQuery的Dom操作</h2><ol><li><p>使用<code>html()</code>方法读取或者设置元素的<code>innerHTML</code></p></li><li><p>使用<code>text()</code>方法读取或者设置元素的innerText：</p></li><li><p>使用<code>attr()</code>方法读取或者设置元素的属性，对于jQuery没有封装的属性（所有浏览器没有差异的属性）用attr进行操作。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取</span></span><br><span class="line">alert(<span class="symbol">$</span>(<span class="string">"a:first"</span>).attr(<span class="string">"href"</span>));</span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="symbol">$</span>(<span class="string">"a:first"</span>).attr(<span class="string">"href"</span>, <span class="string">"http://www.luox78.com"</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用<code>removeAttr</code>删除属性。删除的属性在源代码中看不到，这是和清空属性的区别。attr(‘name’,’’)</p></li></ol><h3 id="动态创建Dom节点"><a href="#动态创建Dom节点" class="headerlink" title="动态创建Dom节点"></a>动态创建Dom节点</h3><p>先创建jquery dom对象<code>var obj=$(&quot;&lt;div style=&quot;background-color:blue;&quot; /&gt;&quot;);</code></p><p>再动态添加<code>$(&quot;body&quot;).append(obj);或者obj.appendTo($(&quot;body&quot;))</code></p><p><code>append</code>方法用来在元素的末尾追加元素（最后一个子节点）。增加元素末尾(儿子)</p><p><code>prepend</code>，在元素的开始添加元素（第一个子节点）。增加元素开始(儿子)</p><p><code>after</code>，在元素之后添加元素（添加兄弟）增加元素后面(兄弟)</p><p><code>before：</code>在元素之前添加元素（添加兄弟）增加元素前面(兄弟)</p><p><code>子元素.appendTo(父元素);</code>//主动巴结!到最后一个</p><p><code>子元素.prependTo(父元素);</code>//主动巴结到第一个。</p><p><code>(*)A.insertBefore(B);</code>将A加到到B的前面，等同于B.before(A);</p><p><code>(*)X.insertAfter(Y);</code>将X加到到Y的后面，等同于Y.after(X);</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><code>empty();</code>清空某元素下的所有子节点</p><p><code>remove(selector)</code><br>删除当前元素，返回值为被删除的元素。还可以继续使用被删除的节点。比如重新添加到其他节点下：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">lis</span> = $(<span class="string">"#ulSite li"</span>).remove();</span><br><span class="line">$(<span class="string">"#ulSite2"</span>).<span class="keyword">append</span>(<span class="keyword">lis</span>);</span><br></pre></td></tr></table></figure><p><code>clone()</code>克隆节点，只复制节点，没事件</p><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><ul><li>替换节点：</li></ul><p><code>$(&quot;br&quot;).replaceWith(&quot;&lt;hr/&gt;&quot;);</code>用<code>&lt;hr/&gt;</code>替换br<code>$(‘&lt;br/’).replaceAll(‘hr’);</code> //调用者也得是选择器选择到</p><p>的元素。用<code>&lt;br/&gt;</code>元素替换所有的hr</p><ul><li>包裹节点</li></ul><p><code>wrap()</code>方法用来将所有元素逐个用指定标签包裹：<code>[wrapAll()]$(“b”).wrap(“&lt;font color=‘red’&gt;&lt;/font&gt;”)</code>将所粗体字红色显示<br>结果：<code>&lt;font color=‘red’&gt;&lt;b&gt;&lt;/b&gt;&lt;/font&gt;</code><br><code>wrapInner()</code>//在内部围绕</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;selector&quot;&gt;&lt;a href=&quot;#selector&quot; class=&quot;headerlink&quot; title=&quot;selector&quot;&gt;&lt;/a&gt;selector&lt;/h2&gt;&lt;h3 id=&quot;相对定位&quot;&gt;&lt;a href=&quot;#相对定位&quot; class=&quot;headerlink&quot; title=&quot;相对定位&quot;&gt;&lt;/a&gt;相对定位&lt;/h3&gt;&lt;p&gt;不仅可以使用选择器进行进行绝对定位，还可以进行相对定位，只要在$()指定第二个参数，第二个参数为相对的元素.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//$(this) 代表tr，在tr下面找td&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;tr&quot;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       $(&lt;span class=&quot;string&quot;&gt;&quot;td:even&quot;&lt;/span&gt;, $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)).css(&lt;span class=&quot;string&quot;&gt;&quot;backgroundColor&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JQuery" scheme="https://luox78.github.io/categories/JQuery/"/>
    
    
      <category term="jsfoundation" scheme="https://luox78.github.io/tags/jsfoundation/"/>
    
      <category term="jQueryfoundation" scheme="https://luox78.github.io/tags/jQueryfoundation/"/>
    
  </entry>
  
</feed>
