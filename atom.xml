<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luox78</title>
  
  <subtitle>Daily Learning</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luox78.github.io/"/>
  <updated>2018-01-22T17:14:35.967Z</updated>
  <id>https://luox78.github.io/</id>
  
  <author>
    <name>luox78</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态创建分页</title>
    <link href="https://luox78.github.io/2018/01/22/paginginfo/"/>
    <id>https://luox78.github.io/2018/01/22/paginginfo/</id>
    <published>2018-01-22T13:48:40.513Z</published>
    <updated>2018-01-22T17:14:35.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接着上一个demo"><a href="#接着上一个demo" class="headerlink" title="接着上一个demo"></a>接着上一个demo</h3><p>现在controller中创建一个新的action</p><p>先添加两个私有字段分别表示每页条数，和整个一组多少个，为了方便演示，设置小点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> PageSize = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> PageGroupSize = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="创建page页的model"><a href="#创建page页的model" class="headerlink" title="创建page页的model"></a>创建page页的model</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PagingInfo</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> CurrentPage &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> PageSize &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> TotalItems &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> CurrentDividePage</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (CurrentPage % PageGroupSize == <span class="number">0</span>)</span><br><span class="line">                  <span class="keyword">return</span> (<span class="keyword">int</span>)CurrentPage / PageGroupSize;</span><br><span class="line">              <span class="keyword">return</span> (<span class="keyword">int</span>)CurrentPage / PageGroupSize + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> TotalDividePages</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">return</span> (<span class="keyword">int</span>)Math.Ceiling((<span class="keyword">decimal</span>)TotalItems / PageSize / PageGroupSize);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> TotalPages</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">return</span> (<span class="keyword">int</span>)Math.Ceiling((<span class="keyword">decimal</span>)TotalItems / PageSize);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> PageGroupSize &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;<span class="comment">//底端呈现多少页</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">bool</span> HasPre</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span> &#123; <span class="keyword">return</span> CurrentDividePage == <span class="number">1</span> ? <span class="literal">false</span> : <span class="literal">true</span>; &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">bool</span> HasNext</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span> &#123; <span class="keyword">return</span> CurrentDividePage == TotalDividePages ? <span class="literal">false</span> : <span class="literal">true</span>; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="编写page-action-分一下步骤"><a href="#编写page-action-分一下步骤" class="headerlink" title="编写page action 分一下步骤"></a>编写page action 分一下步骤</h3><ol><li>想取得对应页的list</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var products = productService.Products</span><br><span class="line">                <span class="string">.OrderBy</span><span class="params">(<span class="attr">m</span> =&gt; m.ProductID)</span></span><br><span class="line">                <span class="string">.Skip</span><span class="params">((page - 1)</span> * PageSize)</span><br><span class="line">                <span class="string">.Take</span><span class="params">(PageSize)</span>;</span><br></pre></td></tr></table></figure><ol><li>创建对应的pageinfo</li></ol><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var <span class="attr">pageinfo</span> = new PagingInfo()</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="attr">CurrentPage</span> = page,</span><br><span class="line">               <span class="attr">PageSize</span> = this.PageSize,</span><br><span class="line">               <span class="attr">TotalItems</span> = productService.Products.Count(),</span><br><span class="line">               <span class="attr">PageGroupSize</span> = PageGroupSize</span><br><span class="line">           &#125;;</span><br></pre></td></tr></table></figure><ol><li><p>此时需要创建创建对应的page页view model</p><p>添加实体中的项目方便model操作</p></li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductViewModel</span></span><br><span class="line">   &#123;</span><br><span class="line">       [<span class="meta">DisplayName(<span class="meta-string">"编号"</span>)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> ProductID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       [<span class="meta">DisplayName(<span class="meta-string">"商品名"</span>)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       [<span class="meta">DisplayName(<span class="meta-string">"描述"</span>)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       [<span class="meta">DisplayName(<span class="meta-string">"价格"</span>)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">decimal</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> IEnumerable&lt;Product&gt; Products &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> PagingInfo PageInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li>创建view对象，返回view（model）完成action</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> model=<span class="keyword">new</span> <span class="type">ProductViewModel</span>()</span><br><span class="line">           &#123;</span><br><span class="line">               Products = products,</span><br><span class="line">               PageInfo = pageinfo</span><br><span class="line">           &#125;;</span><br><span class="line"> </span><br><span class="line">           <span class="keyword">return</span> View(model);</span><br></pre></td></tr></table></figure><ol><li>创建对应的视图</li></ol><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;table class="striped responsive-table"&gt;</span></span><br><span class="line">                <span class="variable">&lt;tr&gt;</span></span><br><span class="line">                    <span class="variable">&lt;th&gt;</span></span><br><span class="line">                        <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.ProductID)</span><br><span class="line">                    <span class="variable">&lt;/th&gt;</span></span><br><span class="line">                    <span class="variable">&lt;th&gt;</span></span><br><span class="line">                        <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Name)</span><br><span class="line">                    <span class="variable">&lt;/th&gt;</span></span><br><span class="line">                    <span class="variable">&lt;th&gt;</span></span><br><span class="line">                        <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Description)</span><br><span class="line">                    <span class="variable">&lt;/th&gt;</span></span><br><span class="line">                    <span class="variable">&lt;th&gt;</span></span><br><span class="line">                        <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Price)</span><br><span class="line">                    <span class="variable">&lt;/th&gt;</span></span><br><span class="line">                <span class="variable">&lt;/tr&gt;</span></span><br><span class="line"> </span><br><span class="line">                <span class="meta">@foreach</span> (var item in Model.Products)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="variable">&lt;tr&gt;</span></span><br><span class="line">                        <span class="variable">&lt;td&gt;</span></span><br><span class="line">                            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.ProductID)</span><br><span class="line">                        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">                        <span class="variable">&lt;td&gt;</span></span><br><span class="line">                            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Name)</span><br><span class="line">                        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">                        <span class="variable">&lt;td&gt;</span></span><br><span class="line">                            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Description)</span><br><span class="line">                        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">                        <span class="variable">&lt;td&gt;</span></span><br><span class="line">                            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Price)</span><br><span class="line">                        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">                    <span class="variable">&lt;/tr&gt;</span></span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="variable">&lt;/table&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建page-navigation"><a href="#创建page-navigation" class="headerlink" title="创建page navigation"></a>创建page navigation</h3><p>创建pagehelper用来动态创建page navigation ，委托用来传pageindex对应的url，可以用方法代替</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PageHelper</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MvcHtmlString <span class="title">PageLink</span><span class="params">(<span class="keyword">this</span> HtmlHelper htmlHelper, PagingInfo pageinfo，Func&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; pageUrl)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先创建一个为htmlhelper拓展方法的静态方法，方便在razor视图里面操作</p><p>此时创建的会根据你使用的界面有所不同</p><ol><li>先根据传入的pageinfo.CurrentPage</li><li>方法中主要是对尾页跟每个页组最后一位进行特殊处理，</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> MvcHtmlString PageLink(<span class="built_in">this</span> HtmlHelper htmlHelper, PagingInfo pageinfo, Func&lt;int, string&gt; pageUrl)</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> <span class="type">StringBuilder</span>();</span><br><span class="line">            int length;</span><br><span class="line">            <span class="keyword">if</span> (pageinfo.TotalPages &lt; pageinfo.PageGroupSize)</span><br><span class="line">                length = pageinfo.TotalPages;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pageinfo.CurrentDividePage == pageinfo.TotalDividePages)</span><br><span class="line">            &#123;</span><br><span class="line">                length = pageinfo.TotalPages - (pageinfo.CurrentDividePage - <span class="number">1</span>) * pageinfo.PageGroupSize;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                length = pageinfo.PageGroupSize;</span><br><span class="line"></span><br><span class="line">            TagBuilder ul = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"ul"</span>);</span><br><span class="line">            ul.MergeAttribute(<span class="string">"class"</span>, <span class="string">"pagination"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> pre = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"li"</span>);</span><br><span class="line">            <span class="keyword">var</span> pre_a = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"a"</span>);</span><br><span class="line">            <span class="keyword">var</span> i_pre = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"i"</span>);</span><br><span class="line">            i_pre.MergeAttribute(<span class="string">"class"</span>, <span class="string">"material-icons"</span>);</span><br><span class="line">            i_pre.SetInnerText(<span class="string">"chevron_left"</span>);</span><br><span class="line">            pre_a.InnerHtml = i_pre.ToString();</span><br><span class="line">            <span class="keyword">if</span> (!pageinfo.HasPre)</span><br><span class="line">                pre.MergeAttribute(<span class="string">"class"</span>, <span class="string">"disabled"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pre_a.MergeAttribute(<span class="string">"href"</span>, pageUrl((pageinfo.CurrentDividePage - <span class="number">2</span>) * pageinfo.PageGroupSize + <span class="number">1</span>));</span><br><span class="line">            pre.InnerHtml = pre_a.ToString();</span><br><span class="line">            sb.Append(pre.ToString());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt;= length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                TagBuilder liTag = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"li"</span>);</span><br><span class="line"></span><br><span class="line">                TagBuilder tag = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pageinfo.CurrentPage % pageinfo.PageGroupSize != i)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (pageinfo.CurrentPage % pageinfo.PageGroupSize == <span class="number">0</span> &amp;&amp; i == length)</span><br><span class="line">                    &#123;</span><br><span class="line">                        liTag.MergeAttribute(<span class="string">"class"</span>, <span class="string">"active"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        liTag.MergeAttribute(<span class="string">"class"</span>, <span class="string">"waves-effect"</span>);</span><br><span class="line">                        tag.MergeAttribute(<span class="string">"href"</span>,</span><br><span class="line">                            pageUrl((pageinfo.CurrentDividePage - <span class="number">1</span>) * pageinfo.PageGroupSize + i));</span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    liTag.MergeAttribute(<span class="string">"class"</span>, <span class="string">"active"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                tag.SetInnerText(i.ToString());</span><br><span class="line"></span><br><span class="line">                liTag.InnerHtml = tag.ToString();</span><br><span class="line"></span><br><span class="line">                sb.Append(liTag.ToString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> next = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"li"</span>);</span><br><span class="line">            <span class="keyword">var</span> next_i = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"i"</span>);</span><br><span class="line">            next_i.MergeAttribute(<span class="string">"class"</span>, <span class="string">"material-icons"</span>);</span><br><span class="line">            next_i.SetInnerText(<span class="string">"chevron_right"</span>);</span><br><span class="line">            <span class="keyword">var</span> next_a = <span class="keyword">new</span> <span class="type">TagBuilder</span>(<span class="string">"a"</span>);</span><br><span class="line">            next_a.InnerHtml = next_i.ToString();</span><br><span class="line">            <span class="keyword">if</span> (!pageinfo.HasNext)</span><br><span class="line">                next.MergeAttribute(<span class="string">"class"</span>, <span class="string">"disabled"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                next_a.MergeAttribute(<span class="string">"href"</span>, pageUrl(pageinfo.CurrentDividePage * pageinfo.PageGroupSize + <span class="number">1</span>));</span><br><span class="line">            next.InnerHtml = next_a.ToString();</span><br><span class="line">            sb.Append(next.ToString());</span><br><span class="line"></span><br><span class="line">            ul.InnerHtml = sb.ToString();</span><br><span class="line">            <span class="keyword">return</span> MvcHtmlString.Create(ul.ToString());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol><li>view文件夹下面web.config添加配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.web.webPages.razor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">host</span> <span class="attr">factoryType</span>=<span class="string">"System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.2.3.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pages</span> <span class="attr">pageBaseType</span>=<span class="string">"System.Web.Mvc.WebViewPage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">namespaces</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">namespace</span>=<span class="string">"luox78.GraduationProject.WebDemo.Helper"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">namespaces</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pages</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.web.webPages.razor</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>view页面添加，生成块</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Html</span>.PageLink(Model.PageInfo,<span class="function"><span class="params">m</span>=&gt;</span>Url.Action(<span class="string">"Page"</span>,<span class="string">"Product"</span>,<span class="keyword">new</span> &#123; page = m &#125;))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;接着上一个demo&quot;&gt;&lt;a href=&quot;#接着上一个demo&quot; class=&quot;headerlink&quot; title=&quot;接着上一个demo&quot;&gt;&lt;/a&gt;接着上一个demo&lt;/h3&gt;&lt;p&gt;现在controller中创建一个新的action&lt;/p&gt;
&lt;p&gt;先添加两个私有字段分别表示每页条数，和整个一组多少个，为了方便演示，设置小点&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; PageSize = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; PageGroupSize = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="分页" scheme="https://luox78.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
      <category term="asp.net mvc" scheme="https://luox78.github.io/tags/asp-net-mvc/"/>
    
      <category term="HtmlHelper拓展" scheme="https://luox78.github.io/tags/HtmlHelper%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>autofac依赖注入</title>
    <link href="https://luox78.github.io/2018/01/22/Autofac_IOC/"/>
    <id>https://luox78.github.io/2018/01/22/Autofac_IOC/</id>
    <published>2018-01-22T13:39:05.652Z</published>
    <updated>2018-01-22T13:39:35.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-Asp-net-autofac依赖注入"><a href="#C-Asp-net-autofac依赖注入" class="headerlink" title="C# Asp.net autofac依赖注入"></a>C# Asp.net autofac依赖注入</h3><h4 id="service类创建实体，接口，具体实现类"><a href="#service类创建实体，接口，具体实现类" class="headerlink" title="service类创建实体，接口，具体实现类"></a>service类创建实体，接口，具体实现类</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> ProductID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">decimal</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IProductService</span><br><span class="line">   &#123;</span><br><span class="line">       IEnumerable&lt;Product&gt; Products &#123; get; &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class ProductService:IProductService</span><br><span class="line">    &#123;</span><br><span class="line">        public IEnumerable&lt;Product&gt; Products</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                //仅作演示</span><br><span class="line">                return new List&lt;Product&gt; &#123;</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">1</span>, <span class="attr">Name</span> = <span class="string">"Football"</span>, <span class="attr">Description</span> = <span class="string">"Football description"</span>, <span class="attr">Price</span> = <span class="number">25</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">2</span>, <span class="attr">Name</span> = <span class="string">"Stuff board"</span>, <span class="attr">Description</span> = <span class="string">"Stuff board description"</span>, <span class="attr">Price</span> = <span class="number">179</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">3</span>, <span class="attr">Name</span> = <span class="string">"Running shoes"</span>, <span class="attr">Description</span> = <span class="string">"Running shoes description"</span>, <span class="attr">Price</span> = <span class="number">95</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">4</span>, <span class="attr">Name</span> = <span class="string">"Basketball"</span>, <span class="attr">Description</span> = <span class="string">"Basketball description"</span>, <span class="attr">Price</span> = <span class="number">125</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">5</span>, <span class="attr">Name</span> = <span class="string">"Volleyball"</span>, <span class="attr">Description</span> = <span class="string">"Volleyball description"</span>, <span class="attr">Price</span> = <span class="number">59</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">6</span>, <span class="attr">Name</span> = <span class="string">"Basketball shoes"</span>, <span class="attr">Description</span> = <span class="string">"Basketball shoes description"</span>, <span class="attr">Price</span> = <span class="number">195</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">7</span>, <span class="attr">Name</span> = <span class="string">"Volleyball shoes"</span>, <span class="attr">Description</span> = <span class="string">"Volleyball shoes description"</span>, <span class="attr">Price</span> = <span class="number">205</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">8</span>, <span class="attr">Name</span> = <span class="string">"Swimming clothes"</span>, <span class="attr">Description</span> = <span class="string">"Swimming clothes description"</span>, <span class="attr">Price</span> = <span class="number">199</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">9</span>, <span class="attr">Name</span> = <span class="string">"Climbing boot"</span>, <span class="attr">Description</span> = <span class="string">"Climbing boot description"</span>, <span class="attr">Price</span> = <span class="number">900</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">10</span>, <span class="attr">Name</span> = <span class="string">"Football"</span>, <span class="attr">Description</span> = <span class="string">"Football description"</span>, <span class="attr">Price</span> = <span class="number">25</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">11</span>, <span class="attr">Name</span> = <span class="string">"Stuff board"</span>, <span class="attr">Description</span> = <span class="string">"Stuff board description"</span>, <span class="attr">Price</span> = <span class="number">179</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">12</span>, <span class="attr">Name</span> = <span class="string">"Running shoes"</span>, <span class="attr">Description</span> = <span class="string">"Running shoes description"</span>, <span class="attr">Price</span> = <span class="number">95</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">13</span>, <span class="attr">Name</span> = <span class="string">"Basketball"</span>, <span class="attr">Description</span> = <span class="string">"Basketball description"</span>, <span class="attr">Price</span> = <span class="number">125</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">14</span>, <span class="attr">Name</span> = <span class="string">"Volleyball"</span>, <span class="attr">Description</span> = <span class="string">"Volleyball description"</span>, <span class="attr">Price</span> = <span class="number">59</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">15</span>, <span class="attr">Name</span> = <span class="string">"Basketball shoes"</span>, <span class="attr">Description</span> = <span class="string">"Basketball shoes description"</span>, <span class="attr">Price</span> = <span class="number">195</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">16</span>, <span class="attr">Name</span> = <span class="string">"Volleyball shoes"</span>, <span class="attr">Description</span> = <span class="string">"Volleyball shoes description"</span>, <span class="attr">Price</span> = <span class="number">205</span>&#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">17</span>, <span class="attr">Name</span> = <span class="string">"Swimming clothes"</span>, <span class="attr">Description</span> = <span class="string">"Swimming clothes description"</span>, <span class="attr">Price</span> = <span class="number">199</span> &#125;,</span><br><span class="line">                    new Product &#123;<span class="attr">ProductID</span> = <span class="number">18</span>, <span class="attr">Name</span> = <span class="string">"Climbing boot"</span>, <span class="attr">Description</span> = <span class="string">"Climbing boot description"</span>, <span class="attr">Price</span> = <span class="number">900</span> &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="mvc-引用中添加autofac-mvc5引用，再App-Start里面添加AutofacConfig-cs配置文件"><a href="#mvc-引用中添加autofac-mvc5引用，再App-Start里面添加AutofacConfig-cs配置文件" class="headerlink" title="mvc 引用中添加autofac  mvc5引用，再App_Start里面添加AutofacConfig.cs配置文件"></a>mvc 引用中添加autofac  mvc5引用，再App_Start里面添加AutofacConfig.cs配置文件</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AutoFacConfig</span></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="comment">//初始化容器</span></span><br><span class="line">           <span class="keyword">var</span> builder = <span class="keyword">new</span> ContainerBuilder();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//注册每个对象实例</span></span><br><span class="line">           <span class="keyword">var</span> container = RegisterServices(builder);</span><br><span class="line"></span><br><span class="line">           DependencyResolver.SetResolver(<span class="keyword">new</span> AutofacDependencyResolver(container));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> IContainer <span class="title">RegisterServices</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="comment">//注册controller</span></span><br><span class="line">           builder.RegisterControllers(<span class="keyword">typeof</span>(MvcApplication).Assembly);</span><br><span class="line">           builder.RegisterInstance(<span class="keyword">new</span> ProductService()).As&lt;IProductService&gt;();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> builder.Build();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Application-Start初始化"><a href="#Application-Start初始化" class="headerlink" title="Application_Start初始化"></a>Application_Start初始化</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">protected</span> <span class="selector-tag">void</span> <span class="selector-tag">Application_Start</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="selector-tag">AreaRegistration</span><span class="selector-class">.RegisterAllAreas</span>();</span><br><span class="line">            <span class="selector-tag">FilterConfig</span><span class="selector-class">.RegisterGlobalFilters</span>(GlobalFilters.Filters);</span><br><span class="line">            <span class="selector-tag">RouteConfig</span><span class="selector-class">.RegisterRoutes</span>(RouteTable.Routes);</span><br><span class="line">            <span class="selector-tag">BundleConfig</span><span class="selector-class">.RegisterBundles</span>(BundleTable.Bundles);</span><br><span class="line"> </span><br><span class="line">            <span class="selector-tag">AutoFacConfig</span><span class="selector-class">.Initialize</span>();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="添加product控制器"><a href="#添加product控制器" class="headerlink" title="添加product控制器"></a>添加product控制器</h4><p>控制器中index返回整个list</p><p>先往控制器中添加传输层数据私有字段</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private IProductService productService<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProductController</span><span class="params">(IProductService productService)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.productService = productService;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>当程序需要<code>productService</code>时，会通过container自动获取对象</p><h4 id="添加对应视图"><a href="#添加对应视图" class="headerlink" title="添加对应视图"></a>添加对应视图</h4><p>选list模板，暂时用entities里面的模型类，自己调整layout</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;table class="striped responsive-table"&gt;</span></span><br><span class="line">    <span class="variable">&lt;tr&gt;</span></span><br><span class="line">        <span class="variable">&lt;th&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Name)</span><br><span class="line">        <span class="variable">&lt;/th&gt;</span></span><br><span class="line">        <span class="variable">&lt;th&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Description)</span><br><span class="line">        <span class="variable">&lt;/th&gt;</span></span><br><span class="line">        <span class="variable">&lt;th&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayNameFor(model</span> =&gt; model.Price)</span><br><span class="line">        <span class="variable">&lt;/th&gt;</span></span><br><span class="line">        <span class="variable">&lt;th&gt;</span><span class="variable">&lt;/th&gt;</span></span><br><span class="line">    <span class="variable">&lt;/tr&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@foreach</span> (var item in Model) &#123;</span><br><span class="line">    <span class="variable">&lt;tr&gt;</span></span><br><span class="line">        <span class="variable">&lt;td&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Name)</span><br><span class="line">        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">        <span class="variable">&lt;td&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Description)</span><br><span class="line">        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">        <span class="variable">&lt;td&gt;</span></span><br><span class="line">            <span class="meta">@Html.DisplayFor(modelItem</span> =&gt; item.Price)</span><br><span class="line">        <span class="variable">&lt;/td&gt;</span></span><br><span class="line">    <span class="variable">&lt;/tr&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动调试，此时通过autofac创建的对象已经可以呈现出来了。"><a href="#启动调试，此时通过autofac创建的对象已经可以呈现出来了。" class="headerlink" title="启动调试，此时通过autofac创建的对象已经可以呈现出来了。"></a>启动调试，此时通过autofac创建的对象已经可以呈现出来了。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;C-Asp-net-autofac依赖注入&quot;&gt;&lt;a href=&quot;#C-Asp-net-autofac依赖注入&quot; class=&quot;headerlink&quot; title=&quot;C# Asp.net autofac依赖注入&quot;&gt;&lt;/a&gt;C# Asp.net autofac依赖注入&lt;/h3&gt;&lt;h4 id=&quot;service类创建实体，接口，具体实现类&quot;&gt;&lt;a href=&quot;#service类创建实体，接口，具体实现类&quot; class=&quot;headerlink&quot; title=&quot;service类创建实体，接口，具体实现类&quot;&gt;&lt;/a&gt;service类创建实体，接口，具体实现类&lt;/h4&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Product&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ProductID &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Name &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Description &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;decimal&lt;/span&gt; Price &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="autofac" scheme="https://luox78.github.io/tags/autofac/"/>
    
      <category term="IOC" scheme="https://luox78.github.io/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>控制反转与依赖注入</title>
    <link href="https://luox78.github.io/2018/01/22/IOC/"/>
    <id>https://luox78.github.io/2018/01/22/IOC/</id>
    <published>2018-01-22T11:47:29.334Z</published>
    <updated>2018-01-22T11:54:35.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、分享Iteye的开涛对Ioc的精彩讲解"><a href="#一、分享Iteye的开涛对Ioc的精彩讲解" class="headerlink" title="一、分享Iteye的开涛对Ioc的精彩讲解"></a>一、分享Iteye的开涛对Ioc的精彩讲解</h2><p>　　首先要分享的是Iteye的开涛这位技术牛人对Spring框架的IOC的理解，写得非常通俗易懂，以下内容全部来自原文，原文地址：<a href="http://jinnianshilongnian.iteye.com/blog/1413846" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/blog/1413846</a></p><a id="more"></a><h3 id="1-1、IoC是什么"><a href="#1-1、IoC是什么" class="headerlink" title="1.1、IoC是什么"></a>1.1、IoC是什么</h3><p>　　<strong>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。</strong>在Java开发中，<strong>Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</strong>如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><p>　　●<strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；<strong>谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</strong></p><p>　　●<strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？<strong>因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</strong></p><p>　　用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：</p><p><img src="https://luox78.github.io/images/IOC1.jpg" alt="https://luox78.github.io/images/IOC1.jpg"></p><p>图1-1 传统应用程序示意图</p><p>　　当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:</p><p><img src="https://luox78.github.io/images/IOC2.png" alt="https://luox78.github.io/images/IOC2.png"><br>图1-2有IoC/DI容器后程序结构示意图</p><h3 id="1-2、IoC能做什么"><a href="#1-2、IoC能做什么" class="headerlink" title="1.2、IoC能做什么"></a>1.2、IoC能做什么</h3><p>　　IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>　　其实<strong>IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</strong></p><p>　　<strong>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</strong></p><h3 id="1-3、IoC和DI"><a href="#1-3、IoC和DI" class="headerlink" title="1.3、IoC和DI"></a>1.3、IoC和DI</h3><p>　　<strong>DI—Dependency Injection，即“依赖注入”</strong>：<strong>组件之间依赖关系</strong>由容器在运行期决定，形象的说，即<strong>由容器动态的将某个依赖关系注入到组件之中</strong>。<strong>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。</strong>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>　　理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><p>　　●<strong>谁依赖于谁：</strong>当然是<strong>应用程序依赖于IoC容器</strong>；</p><p>　　●<strong>为什么需要依赖：**</strong>应用程序需要IoC容器来提供对象需要的外部资源**；</p><p>　　●<strong>谁注入谁：</strong>很明显是<strong>IoC容器注入应用程序某个对象，应用程序依赖的对象</strong>；</p><p><strong>　　●注入了什么：</strong>就是<strong>注入某个对象所需要的外部资源（包括对象、资源、常量数据）</strong>。</p><p>　　<strong>IoC和DI</strong>由什么<strong>关系</strong>呢？其实它们<strong>是同一个概念的不同角度描述</strong>，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，<strong>“**</strong>依赖注入”<strong><strong>明确描述了“被注入对象依赖IoC</strong></strong>容器配置依赖对象”。**</p><p>　　看过很多对Spring的Ioc理解的文章，好多人对Ioc和DI的解释都晦涩难懂，反正就是一种说不清，道不明的感觉，读完之后依然是一头雾水，感觉就是开涛这位技术牛人写得特别通俗易懂，他清楚地解释了IoC(控制反转) 和DI(依赖注入)中的每一个字，读完之后给人一种豁然开朗的感觉。我相信对于初学Spring框架的人对Ioc的理解应该是有很大帮助的。</p><h2 id="二、分享Bromon的blog上对IoC与DI浅显易懂的讲解"><a href="#二、分享Bromon的blog上对IoC与DI浅显易懂的讲解" class="headerlink" title="二、分享Bromon的blog上对IoC与DI浅显易懂的讲解"></a>二、分享Bromon的blog上对IoC与DI浅显易懂的讲解</h2><h3 id="2-1、IoC-控制反转"><a href="#2-1、IoC-控制反转" class="headerlink" title="2.1、IoC(控制反转)"></a>2.1、IoC(控制反转)</h3><p>　　首先想说说<strong>IoC（Inversion of Control，控制反转）</strong>。这是<strong>spring的核心</strong>，贯穿始终。<strong>所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。</strong>这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。</p><p>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。<strong>Spring所倡导的开发方式</strong>就是如此，<strong>所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</strong></p><h3 id="2-2、DI-依赖注入"><a href="#2-2、DI-依赖注入" class="headerlink" title="2.2、DI(依赖注入)"></a>2.2、DI(依赖注入)</h3><p>　　<strong>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的</strong>。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p><p>　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、分享Iteye的开涛对Ioc的精彩讲解&quot;&gt;&lt;a href=&quot;#一、分享Iteye的开涛对Ioc的精彩讲解&quot; class=&quot;headerlink&quot; title=&quot;一、分享Iteye的开涛对Ioc的精彩讲解&quot;&gt;&lt;/a&gt;一、分享Iteye的开涛对Ioc的精彩讲解&lt;/h2&gt;&lt;p&gt;　　首先要分享的是Iteye的开涛这位技术牛人对Spring框架的IOC的理解，写得非常通俗易懂，以下内容全部来自原文，原文地址：&lt;a href=&quot;http://jinnianshilongnian.iteye.com/blog/1413846&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://jinnianshilongnian.iteye.com/blog/1413846&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Learning" scheme="https://luox78.github.io/categories/Learning/"/>
    
    
      <category term="IOC" scheme="https://luox78.github.io/tags/IOC/"/>
    
      <category term="DI" scheme="https://luox78.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>三层01</title>
    <link href="https://luox78.github.io/2018/01/21/sanchen01/"/>
    <id>https://luox78.github.io/2018/01/21/sanchen01/</id>
    <published>2018-01-21T04:39:30.895Z</published>
    <updated>2018-01-21T13:11:56.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SqlHelper实现"><a href="#SqlHelper实现" class="headerlink" title="SqlHelper实现"></a>SqlHelper实现</h2><ol><li><strong>往app.config中添加connectionstrings</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"constr"</span> <span class="attr">connectionString</span>=<span class="string">"data source=”LUOX78“的WIN;initial catalog=school;integrated security=true"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>创建SqlHelper类<a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> constr；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加引用给constr赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> constr = ConfigurationManager.ConnectionStrings[<span class="string">"constr"</span>].ConnectionString;</span><br></pre></td></tr></table></figure></li><li><p>编写无返回值，有一行返回值，返回多行，返回datatable的方法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public static int ExecuteNoQuery(string sql, CommandType<span class="built_in"> type </span>= CommandType.Text,params SqlParameter[] sqlParameters)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var con = new SqlConnection(constr))</span><br><span class="line">            &#123;</span><br><span class="line">                using (var cmd = new SqlCommand(sql, con))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sqlParameters == <span class="literal">null</span>)</span><br><span class="line">                        return 0;</span><br><span class="line">                    cmd.Parameters.AddRange(sqlParameters);</span><br><span class="line">                    cmd.CommandType = type;</span><br><span class="line">                    con.Open();</span><br><span class="line">                    return cmd.ExecuteNonQuery();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">public static SqlDataReader ExecuteReader(string sql, CommandType<span class="built_in"> type </span>= CommandType.Text,</span><br><span class="line">            params SqlParameter[] sqlParameters)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var con = new SqlConnection(constr))</span><br><span class="line">            &#123;</span><br><span class="line">                using (var cmd = new SqlCommand(sql, con))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sqlParameters == <span class="literal">null</span>)</span><br><span class="line">                        return <span class="literal">null</span>;</span><br><span class="line">                    cmd.CommandType = type;</span><br><span class="line">                    cmd.Parameters.AddRange(sqlParameters);</span><br><span class="line">                    try</span><br><span class="line">                    &#123;</span><br><span class="line">                        con.Open();</span><br><span class="line">                        return cmd.ExecuteReader(CommandBehavior.CloseConnection);</span><br><span class="line">                    &#125;</span><br><span class="line">                    catch (Exception e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        con.Close();</span><br><span class="line">                        Console.WriteLine(e);</span><br><span class="line">                        throw;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">  public static DataTable ExecuteDataTable(string sql, CommandType<span class="built_in"> type </span>= CommandType.Text,</span><br><span class="line">            params SqlParameter[] sqlParameters)</span><br><span class="line">        &#123;</span><br><span class="line">            var <span class="attribute">dt</span>=new DataTable();</span><br><span class="line">            using (var adapter = new SqlDataAdapter(sql, constr))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sqlParameters != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    adapter.SelectCommand.Parameters.AddRange(sqlParameters);</span><br><span class="line">                &#125;</span><br><span class="line">                adapter.SelectCommand.CommandType = type;</span><br><span class="line">                adapter.Fill(dt);</span><br><span class="line">            &#125;</span><br><span class="line">            return dt;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><p>MD5算法是一种<strong>散列（hash）算法</strong>（摘要算法，指纹算法），不是一种加密算法（易错）。任何长度的任意内容都可以用MD5计算出散列值。介绍工具：CalcMD5.zip。主要作用就是【验明“真身”】，字符串与文件均可。</p><p>MD5长度一般是<strong>32位的16进制数字符串</strong>（比如71f396e4134a1160d90bb1439876df31），<strong>MD5值的个数是有限的，但是源数据是无限的，因此存在着不同的内容产生相同MD5值的概率</strong>。因此MD5算法<strong>不可逆</strong>，也就是只能得到内容对应的MD5值，无法由MD5值反推内容。但是对不同的内容产生相同MD5值的概率非常非常非常低！</p><p>   同一个字符串或文件生成的MD5都是一样的</p><p>   用处：登录密码存入数据库使用MD5，检验文件是否被修改过</p><p>   .NET下MD5使用</p><p>   string的MD5</p>   <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建MD5对象</span></span><br><span class="line">MD5 obj=MD5.Create();</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换</span></span><br><span class="line"><span class="comment">//编码的不同会导致获取MD5值不一样</span></span><br><span class="line"><span class="keyword">var</span> md5Bytes = obj.ComputeHash(Encoding.UTF8.GetBytes(str));</span><br><span class="line"><span class="keyword">var</span> sb=new StringBuilder(32);</span><br><span class="line"><span class="keyword">foreach</span> (byte md5Byte <span class="keyword">in</span> md5Bytes)</span><br><span class="line">&#123;</span><br><span class="line">sb.<span class="keyword">Append</span>(md5Byte.<span class="keyword">ToString</span>(<span class="string">"x2"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者直接使用bitconvert</span></span><br><span class="line">BitConverter.<span class="keyword">ToString</span>(md5Bytes).<span class="keyword">Replace</span>(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">obj.<span class="keyword">Clear</span>();</span><br></pre></td></tr></table></figure><p>   文件的MD5(向<code>ComputeHash</code>传入流即可)</p>   <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] md5Bytes;</span><br><span class="line"><span class="keyword">using</span> (var reader = <span class="built_in">File</span>.OpenRead(path))</span><br><span class="line">&#123;</span><br><span class="line">md5Bytes = obj.ComputeHash(reader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   其他的散列算法：SHA512或SHA256，用法与MD5一样</p>   <figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHA512 obj = SHA512.Create()<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="使用NPOI操作Excel"><a href="#使用NPOI操作Excel" class="headerlink" title="使用NPOI操作Excel"></a>使用NPOI操作Excel</h2><p>   Excel组成：workbook（工作簿），sheet [ʃit] （工作表），row行，cell单元格</p><p>   先添加NOPI引用</p><pre><code>1. 写入excel表单</code></pre>   <figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建excel对象(workbook)</span></span><br><span class="line"><span class="type">IWorkbook</span> wk=<span class="function"><span class="keyword">new</span> <span class="title">HSSFWorkbook</span>();</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//workbook中创建sheet</span></span></span><br><span class="line"><span class="function"><span class="title">ISheet</span> <span class="title">sheet</span> = <span class="title">wk</span>.<span class="title">CreateSheet</span>("工作表<span class="number">1</span>");</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//创建10行</span></span></span><br><span class="line"><span class="function"><span class="title">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function"><span class="title">IRow</span> <span class="title">row</span> = <span class="title">sheet</span>.<span class="title">CreateRow</span>(i);</span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">cell</span> = <span class="title">row</span>.<span class="title">CreateCell</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="function"><span class="title">cell</span>.<span class="title">SetCellValue</span>("luox78");</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">cell2</span> = <span class="title">row</span>.<span class="title">CreateCell</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="function"><span class="title">cell2</span>.<span class="title">SetCellValue</span>(i);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//保存</span></span></span><br><span class="line"><span class="function"><span class="title">using</span> (var writer=<span class="type">File</span>.<span class="type">OpenWrite</span>("wk1.xls"))</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function"><span class="title">wk</span>.<span class="title">Write</span>(writer);</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><pre><code>2. 读取excel</code></pre>   <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadFromXls</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="comment">//创建excel对象(workbook)</span></span><br><span class="line">          <span class="keyword">using</span> (<span class="keyword">var</span> reader=File.OpenRead(<span class="string">"ReadExcel.xls"</span>))</span><br><span class="line">          &#123;</span><br><span class="line">              IWorkbook wk = <span class="keyword">new</span> HSSFWorkbook(reader);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wk.NumberOfSheets; i++)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="comment">//获取每个sheet</span></span><br><span class="line">                  <span class="keyword">var</span> sheet = wk.GetSheetAt(i);</span><br><span class="line">                  Console.WriteLine(<span class="string">$"sheet<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;sheet.SheetName&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= sheet.LastRowNum; j++)</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="comment">//获取每个row</span></span><br><span class="line">                      <span class="keyword">var</span> row = sheet.GetRow(j);</span><br><span class="line">                      Console.WriteLine(<span class="string">$"row<span class="subst">&#123;j&#125;</span>:"</span>);</span><br><span class="line">                      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; row.LastCellNum; k++)</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="comment">//输出每个cell的内容</span></span><br><span class="line">                          Console.WriteLine(row.GetCell(k).ToString());</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><ol><li><p>从数据库中导出excel</p><p>两步和之前一样</p><p>从数据库中读取数据</p><p>调用<code>WriteToExcel(IWorkbook wk,Dictionary&lt;ISheet,List&lt;IRow&gt;&gt; sheets )</code></p><p>对于空处理：从数据库读取为unknown，模型的值类型修改成可空值类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">reader</span><span class="selector-class">.IsDBNull</span>(<span class="selector-tag">column</span>)?<span class="selector-tag">null</span><span class="selector-pseudo">:(int</span>?)<span class="selector-tag">reader</span><span class="selector-class">.GetInt32</span>(<span class="selector-tag">column</span>);</span><br></pre></td></tr></table></figure><p>写入到excel时</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ICell <span class="keyword">cell</span> = row<span class="variable">.CreateCell</span>(colomn);</span><br><span class="line"><span class="keyword">if</span>(read == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">cell</span><span class="variable">.SetCellType</span>(CellType<span class="variable">.BLANK</span>);<span class="comment">//设置创建的单元格为空单元格</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">cell</span><span class="variable">.SetCellValue</span>((Type)read);<span class="comment">//将Type类型的数据放入cell</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SqlHelper实现&quot;&gt;&lt;a href=&quot;#SqlHelper实现&quot; class=&quot;headerlink&quot; title=&quot;SqlHelper实现&quot;&gt;&lt;/a&gt;SqlHelper实现&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;往app.config中添加connectionstrings&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;connectionStrings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;constr&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;connectionString&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;data source=”LUOX78“的WIN;initial catalog=school;integrated security=true&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;connectionStrings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建SqlHelper类
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="三层" scheme="https://luox78.github.io/tags/%E4%B8%89%E5%B1%82/"/>
    
      <category term="MD5" scheme="https://luox78.github.io/tags/MD5/"/>
    
      <category term="NOPI" scheme="https://luox78.github.io/tags/NOPI/"/>
    
      <category term="SqlHelper" scheme="https://luox78.github.io/tags/SqlHelper/"/>
    
  </entry>
  
  <entry>
    <title>Entity Framework02-code first修改模型，迁移数据库</title>
    <link href="https://luox78.github.io/2018/01/18/Entity%20Framework%20Code%20First%20to%20a%20Update%20model%20and%20migrate/"/>
    <id>https://luox78.github.io/2018/01/18/Entity Framework Code First to a Update model and migrate/</id>
    <published>2018-01-18T14:24:01.824Z</published>
    <updated>2018-01-19T15:39:15.091Z</updated>
    
    <content type="html"><![CDATA[<p> 本文以<code>asp.net mvc</code>自己提供的身份验证为例</p><h2 id="添加属性"><a href="#添加属性" class="headerlink" title="添加属性"></a>添加属性</h2><p>在<code>Models\IdentityModels.cs</code> 里 <code>ApplicationUser</code>类下添加你想添加的属性，比如生日</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DateTime BirthDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用Migrations修改数据库"><a href="#使用Migrations修改数据库" class="headerlink" title="使用Migrations修改数据库"></a>使用<strong>Migrations</strong>修改数据库</h2><ul><li><p>由于已经改变了model的属性所以应该修改之前的数据库</p></li><li><p>前往工具/NUGET/程序包管理器控制台</p></li><li><p>输入<code>Enable-Migrations</code>初始化迁移</p><p><code>Add-Migration &quot;Birthdate&quot;</code> 添加名为Birthdate的迁移文件进你的工程</p><p><code>Update-Database</code>执行你的迁移文件更新数据库</p></li></ul><h2 id="修改你的view对应的model"><a href="#修改你的view对应的model" class="headerlink" title="修改你的view对应的model"></a>修改你的view对应的model</h2><p>在 <code>Models\AccountViewModels.cs</code>中找到<code>RegisterViewModel</code>类添加属性，当然也可以添加你想要的特性</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DateTime BirthDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="修改对应的view展示"><a href="#修改对应的view展示" class="headerlink" title="修改对应的view展示"></a>修改对应的view展示</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-field col s12 m3 l3"</span>&gt;</span><br><span class="line">      &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"material-icons prefix"</span>&gt;date_range&lt;<span class="regexp">/i&gt;</span></span><br><span class="line"><span class="regexp">       @Html.LabelFor(m =&gt; m.BirthDate)</span></span><br><span class="line"><span class="regexp">       @Html.TextBoxFor(m =&gt; m.BirthDate, new &#123; @class = "datepicker" &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>运行就能看到修改后的结果了</p><h2 id="如何展示新的信息"><a href="#如何展示新的信息" class="headerlink" title="如何展示新的信息"></a>如何展示新的信息</h2><ul><li><p>得到 <code>UserId</code>, 可以通过 <code>ASP.NET Identity system</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var currentUserId</span> = User.Identity.GetUserId();</span><br></pre></td></tr></table></figure></li><li><p>实例化<code>UserManager</code>在ASP.Identity system命名空间下</p></li><li><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> manager = <span class="keyword">new</span> <span class="type">UserManager</span>&lt;MyUser&gt;(<span class="keyword">new</span> <span class="type">UserStore</span>&lt;MyUser&gt;(<span class="keyword">new</span> <span class="type">MyDbContext</span>()));</span><br></pre></td></tr></table></figure></li><li><p>得到当前用户实例</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var currentUser</span> = manager.FindById(User.Identity.GetUserId());</span><br></pre></td></tr></table></figure></li><li><p>通过实例展现修改的信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> birthdate = currentUser.BirthDate</span><br></pre></td></tr></table></figure></li></ul><h2 id="自己创建新的model，展示想显示的信息"><a href="#自己创建新的model，展示想显示的信息" class="headerlink" title="自己创建新的model，展示想显示的信息"></a>自己创建新的model，展示想显示的信息</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUser</span> : <span class="type">IdentityUser</span></span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> virtual MyUserInfo MyUserInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserInfo</span></span>&#123;</span><br><span class="line">       <span class="keyword">public</span> int Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> string FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> string LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDbContext</span> : <span class="type">IdentityDbContext</span>&lt;<span class="type">MyUser</span>&gt;</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> MyDbContext()</span><br><span class="line">           : base(<span class="string">"DefaultConnection"</span>)</span><br><span class="line">       &#123;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> System.Data.Entity.DbSet&lt;MyUserInfo&gt; MyUserInfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>Getting Profile information</strong></p><ul><li><p>When the User Logs in, you can display the profile information by doing the following</p></li><li><p>Get the current logged in UserId, so you can look the user up in ASP.NET Identity system</p></li><li><ul><li>var currentUserId = User.Identity.GetUserId();</li></ul></li><li><p>Instantiate the UserManager in ASP.Identity system so you can look up the user in the system</p></li><li><ul><li>var manager = new UserManager<myuser>(new UserStore<myuser>(new MyDbContext()));</myuser></myuser></li></ul></li><li><p>Get the User object</p></li><li><ul><li>var currentUser = manager.FindById(User.Identity.GetUserId());</li></ul></li><li><p>Get the profile information about the user</p></li><li><ul><li>currentUser.MyUserInfo.FirstName</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 本文以&lt;code&gt;asp.net mvc&lt;/code&gt;自己提供的身份验证为例&lt;/p&gt;
&lt;h2 id=&quot;添加属性&quot;&gt;&lt;a href=&quot;#添加属性&quot; class=&quot;headerlink&quot; title=&quot;添加属性&quot;&gt;&lt;/a&gt;添加属性&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;Models\IdentityModels.cs&lt;/code&gt; 里 &lt;code&gt;ApplicationUser&lt;/code&gt;类下添加你想添加的属性，比如生日&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DateTime BirthDate &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="Entity Framework" scheme="https://luox78.github.io/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>初始JQuery03</title>
    <link href="https://luox78.github.io/2018/01/17/JQuery03/"/>
    <id>https://luox78.github.io/2018/01/17/JQuery03/</id>
    <published>2018-01-17T11:49:11.642Z</published>
    <updated>2018-01-20T15:28:50.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RadioButton-checkbox"><a href="#RadioButton-checkbox" class="headerlink" title="RadioButton|checkbox"></a>RadioButton|checkbox</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"Radio2"</span> <span class="attribute">checked</span>=<span class="string">"checked"</span> <span class="attribute">name</span>=<span class="string">"gender"</span> <span class="attribute">type</span>=<span class="string">"radio"</span> <span class="attribute">value</span>=<span class="string">"男"</span> /&gt;男</span><br><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"Radio1"</span> <span class="attribute">checked</span>=<span class="string">"checked"</span> <span class="attribute">name</span>=<span class="string">"gender"</span> <span class="attribute">type</span>=<span class="string">"radio"</span> <span class="attribute">value</span>=<span class="string">"女"</span> /&gt;女</span><br><span class="line">&lt;input <span class="attribute">id</span>=<span class="string">"Radio3"</span>checked="checked" <span class="attribute">name</span>=<span class="string">"gender"</span> <span class="attribute">type</span>=<span class="string">"radio"</span> <span class="attribute">value</span>=<span class="string">"未知"</span> /&gt;未知</span><br></pre></td></tr></table></figure><a id="more"></a>如何取选中的值<br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">"input[name=gender]:checked"</span>).val()</span></span><br></pre></td></tr></table></figure><p>设置<code>RadioButton</code>的选中值</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.attr(‘<span class="keyword">checked</span>’,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><code>$(&quot;input[name=gender]&quot;).val([&quot;女&quot;]);</code>也可以直接设置，注意val中参数的[]不能省略,val()的参数必须是一个数组。</p><p><code>RadioButton</code>的选择技巧对于<code>CheckBox</code>和<code>Select</code>列表框也适用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(‘<span class="comment">#selOne’).val([‘1’,’2’,’3’]);//同时设置多个下拉菜单选中</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">"#btn1"</span>).attr(<span class="string">"checked"</span>,<span class="literal">true</span>)</span></span><br></pre></td></tr></table></figure><p>实现全选部不选</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"input:checkbox"</span>).prop(<span class="string">"checked"</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"input:checkbox"</span>).prop(&#123; <span class="attr">checked</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="一些事件"><a href="#一些事件" class="headerlink" title="一些事件"></a>一些事件</h2><p><code>$(&quot;#btn&quot;).bind(&quot;click&quot;,function(){})</code>事件绑定</p><p><code>hover(entern,leavefn)</code>当鼠标放在元素上时调用enterfn方法，当鼠标离开元素的时候调用leavefn方法。相当于mouseover与mouseout事件的结合。</p><p><code>$(&#39;#bt&#39;).toggle(funtion)</code> 相互切换</p><h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>事件冒泡：jQuery中也像JavaScript一样是事件冒泡<code>window.event.cancelBubble=true</code>,ie取消</p><p>如果想获得事件相关的信息，只要给响应的匿名函数增加一个参数：e，</p><p><strong><em>e就是事件对象</em></strong>。调用事件对象的<code>stopPropagation()</code>方法终止冒泡。</p><p><code>e. stopPropagation();</code><br>标准js方式：<code>e.stopPropagation();</code><br>IE下：<code>e.cancelBubble = true；</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"tr"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">alert(<span class="string">"tr被点击"</span>); </span><br><span class="line">e.stopPropagation(); </span><br><span class="line">&#125;);<span class="comment">//注意函数的参数是e</span></span><br></pre></td></tr></table></figure><h2 id="重写移动图片案例"><a href="#重写移动图片案例" class="headerlink" title="重写移动图片案例"></a>重写移动图片案例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"office.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"img"</span>).offset(&#123; <span class="attr">left</span>: e.pageX, <span class="attr">top</span>: e.pageY &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery的事件对象：event对象"><a href="#jQuery的事件对象：event对象" class="headerlink" title="jQuery的事件对象：event对象"></a>jQuery的事件对象：event对象</h2><ul><li>属性：<code>pageX</code>、<code>pageY</code>、<code>target</code>(指事件源)</li><li><code>e.which</code>如果是鼠标事件获得按键（1左键，2中键，3右键）</li><li><code>keydown</code>则获取的是keyCode</li><li><code>unbind()</code>方法即可移除元素上所有绑定的事件，如果unbind(“click”)则只移除click事件的绑定。bind:+=；unbind:-=</li><li><code>one()</code>方法进行事件绑定,值执行一次</li></ul><h2 id="jquery-animate"><a href="#jquery-animate" class="headerlink" title="jquery animate"></a>jquery animate</h2><p><code>show()</code>、<code>hide()</code>方法会显示、隐藏元素。用<code>toggle(speed)</code>方法在显示、隐藏之间切换</p><p>滑动效果<br><code>slideDown()</code>、<code>slideUp()</code>、<code>slideToggle()</code>隐藏就显示,显示就隐藏</p><p>淡入淡出（透明）<br><code>fadeIn()</code>、<code>fadeOut()</code>、<code>fadeToggle(</code>)同上、<code>fadeTo()</code>到达透明度多少2000，0.1</p><p>自定义动画<br><code>animate({样式},speed)</code><br>部分样式不支持：backgroundColor、color、borderStyle、……<br>使用animate设置对象位置的时候要确保<code>position</code>的值为<code>absolute</code>或<code>relative</code>.<br>停止动画正在执行动画的元素<code>.stop()(*)</code>,带参数的<code>stop(true,false);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#im'</span>).animate(&#123; <span class="string">'height'</span>: <span class="string">'20px'</span>, <span class="string">'width'</span>: <span class="string">'20px'</span>, <span class="string">'left'</span>: <span class="string">'10px'</span>, <span class="string">'top'</span>: <span class="string">'500px'</span> &#125;, <span class="number">3000</span>).animate(&#123; <span class="string">'height'</span>: <span class="string">'+=200px'</span>, <span class="string">'width'</span>: <span class="string">'+=200px'</span>, <span class="string">'left'</span>: <span class="string">'500px'</span>, <span class="string">'top'</span>: <span class="string">'50px'</span> &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">$(<span class="string">`#im`</span>).stop(<span class="literal">true</span>);<span class="comment">//带参数继续当前动画,后面动画清空</span></span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><strong>什么是cookie：</strong>Cookie就是保存在浏览器上的内容，用户在这次浏览页面的时候向Cookie中保存文本内容，下次再访问页面的时候就可以取出来上次保存的内容，这样就可以得到上次“记忆”的内容。Cookie不是jQuery特有的概念，只不过jQueryCookie把它简化的更好用而已。Cookie就是存储在浏览器里的一些数据。</p><p>Cookie需要浏览器的支持，浏览器的Cookie是可以禁用的，如果禁用了Cookie就不能使用了，不过一般不用考虑禁用Cookie的情况。Cookie的几个特征：Cookie是与域名相关的，所以163.com不能读取baidu.com记录的Cookie，正因为如此读取、设置Cookie的时候不用担心不同域名cookie的冲突；一个域名能写入的Cookie总尺寸是有限制的，一般是是几千字节，能写入的Cookie总条数一般是几十条，超过以后浏览器自己会根据自己的策略移除一些Cookie；Cookie不是写入以后一定下次能读出来，浏览器可能会定期清除、用户也可能会手动清除。写到Cookie中的数据一定是可有可无的数据，像防止投票作弊就不能用Cookie。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RadioButton-checkbox&quot;&gt;&lt;a href=&quot;#RadioButton-checkbox&quot; class=&quot;headerlink&quot; title=&quot;RadioButton|checkbox&quot;&gt;&lt;/a&gt;RadioButton|checkbox&lt;/h2&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Radio2&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;checked&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;男&quot;&lt;/span&gt; /&amp;gt;男&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Radio1&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;checked&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;女&quot;&lt;/span&gt; /&amp;gt;女&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Radio3&quot;&lt;/span&gt;checked=&quot;checked&quot; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;未知&quot;&lt;/span&gt; /&amp;gt;未知&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JQuery" scheme="https://luox78.github.io/categories/JQuery/"/>
    
    
      <category term="jQueryfoundation" scheme="https://luox78.github.io/tags/jQueryfoundation/"/>
    
      <category term="jsfoundation" scheme="https://luox78.github.io/tags/jsfoundation/"/>
    
  </entry>
  
  <entry>
    <title>Entity Framework01-code first建立一个新数据库</title>
    <link href="https://luox78.github.io/2018/01/16/Entity%20Framework%20Code%20First%20to%20a%20New%20Database/"/>
    <id>https://luox78.github.io/2018/01/16/Entity Framework Code First to a New Database/</id>
    <published>2018-01-16T12:24:50.695Z</published>
    <updated>2018-01-16T12:42:21.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建立model"><a href="#建立model" class="headerlink" title="建立model"></a>建立model</h2><p>编写.net class建立model</p><a id="more"></a><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blog</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> BlogId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> List&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Post</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> PostId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> BlogId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> Blog Blog &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类中带id的会自动标志成主键</li><li>两个导航属性 (Blog.Posts and Post.Blog) virtual，这是entity framework懒加载（ Lazy Loading </li><li>）的特征，懒加载值得是这些属性内容会自动从数据库中加载出来</li></ul><h2 id="建立上下文（Context）"><a href="#建立上下文（Context）" class="headerlink" title="建立上下文（Context）"></a>建立上下文（Context）</h2><p>添加引用</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.<span class="built_in">Data</span>.Entity;</span><br></pre></td></tr></table></figure><p>建立数据库上下文，继承自<code>DbContext</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloggingContext</span> : <span class="type">DbContext</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Blog&gt; Blogs &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DbSet</code>代表数据库中的表，上下文中存储就是关系表</p><h2 id="读取-存入数据"><a href="#读取-存入数据" class="headerlink" title="读取 存入数据"></a>读取 存入数据</h2><p>存入</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmpBlog = <span class="keyword">new</span> <span class="type">Blog</span>() &#123; Name = <span class="string">"luox78's blog"</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> <span class="type">BloggingContext</span>();</span><br><span class="line">db.Blogs.Add(tmpBlog);</span><br><span class="line">db.SaveChanges();</span><br></pre></td></tr></table></figure><p>读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = db.Blogs.Where(<span class="function"><span class="params">blog</span> =&gt;</span> blog.BlogId == <span class="number">1</span>);</span><br><span class="line">foreach (<span class="keyword">var</span> blog <span class="keyword">in</span> obj)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(blog.Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//luox78's blog</span></span><br></pre></td></tr></table></figure><p>数据在哪儿？</p><ul><li>Visual Studio 2010数据库一般建在 local SQL Express</li><li>Visual Studio 2012以上一般在 <a href="https://msdn.microsoft.com/library/hh510202(v=sql.110" target="_blank" rel="noopener">LocalDb</a>.aspx)</li><li>数据库命名是项目名加上建立的上下文名字</li></ul><p><img src="https://luox78.github.io/images/entity1.png" alt="https://luox78.github.io/images/entity1.png"></p><p>执行完写入之后数据已经进入数据库</p><p><img src="https://luox78.github.io/images/entity2.png" alt="https://luox78.github.io/images/entity2.png"></p><h2 id="接下来我会分别介绍各个部分"><a href="#接下来我会分别介绍各个部分" class="headerlink" title="接下来我会分别介绍各个部分"></a>接下来我会分别介绍各个部分</h2><blockquote><p>原文：<a href="https://msdn.microsoft.com/en-us/library/jj193542(v=vs.113" target="_blank" rel="noopener">Entity Framework Code First to a New Database</a>.aspx)</p><p>翻译：luox78</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;建立model&quot;&gt;&lt;a href=&quot;#建立model&quot; class=&quot;headerlink&quot; title=&quot;建立model&quot;&gt;&lt;/a&gt;建立model&lt;/h2&gt;&lt;p&gt;编写.net class建立model&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="Entity Framework" scheme="https://luox78.github.io/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>初始JQuery02</title>
    <link href="https://luox78.github.io/2018/01/15/JQuery02/"/>
    <id>https://luox78.github.io/2018/01/15/JQuery02/</id>
    <published>2018-01-15T11:48:34.839Z</published>
    <updated>2018-01-15T15:20:34.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>不仅可以使用选择器进行进行绝对定位，还可以进行相对定位，只要在$()指定第二个参数，第二个参数为相对的元素.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$(this) 代表tr，在tr下面找td</span></span><br><span class="line">$(<span class="string">"tr"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       $(<span class="string">"td:even"</span>, $(<span class="keyword">this</span>)).css(<span class="string">"backgroundColor"</span>, <span class="string">"red"</span>);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><ul><li><code>$(&quot;div[id]&quot;)</code>选取有id属性的<code>&lt;div&gt;</code></li><li><code>$(&quot;div[title=test]&quot;)</code>选取title属性为“test”的<code>&lt;div&gt;</code>，jQuery中没有对<code>getElementsByName</code>进行封装，用<code>$(&quot;input[name=abc]&quot;)</code></li><li><code>$(&quot;div[title!=test]&quot;)</code>选取title属性不为“test”的<code>&lt;div&gt;</code></li><li>还可以选择开头<code>[name^=值]</code>、结束<code>[] name$=值]</code>、包含<code>[ name*=值]</code>等，条件还可以复合。【[属性1=a][属性2=b]…】</li></ul><h3 id="表单对象属性选择器（过滤器）"><a href="#表单对象属性选择器（过滤器）" class="headerlink" title="表单对象属性选择器（过滤器）"></a>表单对象属性选择器（过滤器）</h3><ul><li><code>$(&quot;#form1:enabled&quot;)</code>选取id为form1的表单内所有启用的元素</li><li><code>$(&quot;#form1:disabled&quot;)</code>选取id为form1的表单内所有禁用的元素</li><li><code>$(“input:checked”)</code>选取所有选中的元素（Radio、CheckBox）,这个中间不能加空格.</li><li><code>$(&quot;select:selected&quot;)</code>选取所有选中的选项元素（下拉列表）</li><li><strong>注意</strong>：<code>$(&#39;&#39;:input&quot;)</code>选取所有<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>和<code>&lt;button&gt;</code>元素。和<code>$(&quot;input&quot;)</code>不一样， <code>$(&quot;input&quot;)</code>只获得<code>&lt;input&gt;</code></li><li><code>$(&quot;:text&quot;)</code>选取所有单行文本框，等价于<code>$(&quot;input[type=text]&quot;)</code>,<code>$(‘input[type=text]’)</code>,<code>$(‘:text’)</code>;</li><li>同理还有<code>:radio</code>、<code>:checkbox</code>、<code>:submit</code>、<code>:image</code>、<code>:reset</code>、<code>:button</code>、<code>:file</code>、<code>:hidden</code>。</li></ul><h2 id="jQuery的Dom操作"><a href="#jQuery的Dom操作" class="headerlink" title="jQuery的Dom操作"></a>jQuery的Dom操作</h2><ol><li><p>使用<code>html()</code>方法读取或者设置元素的<code>innerHTML</code></p></li><li><p>使用<code>text()</code>方法读取或者设置元素的innerText：</p></li><li><p>使用<code>attr()</code>方法读取或者设置元素的属性，对于jQuery没有封装的属性（所有浏览器没有差异的属性）用attr进行操作。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取</span></span><br><span class="line">alert(<span class="symbol">$</span>(<span class="string">"a:first"</span>).attr(<span class="string">"href"</span>));</span><br><span class="line"><span class="comment">//设置</span></span><br><span class="line"><span class="symbol">$</span>(<span class="string">"a:first"</span>).attr(<span class="string">"href"</span>, <span class="string">"http://www.luox78.com"</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用<code>removeAttr</code>删除属性。删除的属性在源代码中看不到，这是和清空属性的区别。attr(‘name’,’’)</p></li></ol><h3 id="动态创建Dom节点"><a href="#动态创建Dom节点" class="headerlink" title="动态创建Dom节点"></a>动态创建Dom节点</h3><p>先创建jquery dom对象<code>var obj=$(&quot;&lt;div style=&quot;background-color:blue;&quot; /&gt;&quot;);</code></p><p>再动态添加<code>$(&quot;body&quot;).append(obj);或者obj.appendTo($(&quot;body&quot;))</code></p><p><code>append</code>方法用来在元素的末尾追加元素（最后一个子节点）。增加元素末尾(儿子)</p><p><code>prepend</code>，在元素的开始添加元素（第一个子节点）。增加元素开始(儿子)</p><p><code>after</code>，在元素之后添加元素（添加兄弟）增加元素后面(兄弟)</p><p><code>before：</code>在元素之前添加元素（添加兄弟）增加元素前面(兄弟)</p><p><code>子元素.appendTo(父元素);</code>//主动巴结!到最后一个</p><p><code>子元素.prependTo(父元素);</code>//主动巴结到第一个。</p><p><code>(*)A.insertBefore(B);</code>将A加到到B的前面，等同于B.before(A);</p><p><code>(*)X.insertAfter(Y);</code>将X加到到Y的后面，等同于Y.after(X);</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p><code>empty();</code>清空某元素下的所有子节点</p><p><code>remove(selector)</code><br>删除当前元素，返回值为被删除的元素。还可以继续使用被删除的节点。比如重新添加到其他节点下：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">lis</span> = $(<span class="string">"#ulSite li"</span>).remove();</span><br><span class="line">$(<span class="string">"#ulSite2"</span>).<span class="keyword">append</span>(<span class="keyword">lis</span>);</span><br></pre></td></tr></table></figure><p><code>clone()</code>克隆节点，只复制节点，没事件</p><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><ul><li>替换节点：</li></ul><p><code>$(&quot;br&quot;).replaceWith(&quot;&lt;hr/&gt;&quot;);</code>用<code>&lt;hr/&gt;</code>替换br<code>$(‘&lt;br/’).replaceAll(‘hr’);</code> //调用者也得是选择器选择到</p><p>的元素。用<code>&lt;br/&gt;</code>元素替换所有的hr</p><ul><li>包裹节点</li></ul><p><code>wrap()</code>方法用来将所有元素逐个用指定标签包裹：<code>[wrapAll()]$(“b”).wrap(“&lt;font color=‘red’&gt;&lt;/font&gt;”)</code>将所粗体字红色显示<br>结果：<code>&lt;font color=‘red’&gt;&lt;b&gt;&lt;/b&gt;&lt;/font&gt;</code><br><code>wrapInner()</code>//在内部围绕</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;selector&quot;&gt;&lt;a href=&quot;#selector&quot; class=&quot;headerlink&quot; title=&quot;selector&quot;&gt;&lt;/a&gt;selector&lt;/h2&gt;&lt;h3 id=&quot;相对定位&quot;&gt;&lt;a href=&quot;#相对定位&quot; class=&quot;headerlink&quot; title=&quot;相对定位&quot;&gt;&lt;/a&gt;相对定位&lt;/h3&gt;&lt;p&gt;不仅可以使用选择器进行进行绝对定位，还可以进行相对定位，只要在$()指定第二个参数，第二个参数为相对的元素.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//$(this) 代表tr，在tr下面找td&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;tr&quot;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       $(&lt;span class=&quot;string&quot;&gt;&quot;td:even&quot;&lt;/span&gt;, $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)).css(&lt;span class=&quot;string&quot;&gt;&quot;backgroundColor&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JQuery" scheme="https://luox78.github.io/categories/JQuery/"/>
    
    
      <category term="jQueryfoundation" scheme="https://luox78.github.io/tags/jQueryfoundation/"/>
    
      <category term="jsfoundation" scheme="https://luox78.github.io/tags/jsfoundation/"/>
    
  </entry>
  
  <entry>
    <title>GET，POST，PUT，DELETE的区别</title>
    <link href="https://luox78.github.io/2018/01/15/get_post/"/>
    <id>https://luox78.github.io/2018/01/15/get_post/</id>
    <published>2018-01-15T11:46:57.475Z</published>
    <updated>2018-01-15T11:52:23.430Z</updated>
    
    <content type="html"><![CDATA[<p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。<a id="more"></a></p><p>　　<strong>1</strong>.根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p><p>　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p><ul><li>注意：这里安全的含义仅仅是指是非修改信息。</li></ul><p>　　(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下<strong>幂等</strong>这个概念：</p><p>　　<strong>幂等</strong>（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br>　　幂等有一下几种定义：<br>　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如<a href="http://www.so.com/s?q=%E7%BB%9D%E5%AF%B9%E5%80%BC%E8%BF%90%E7%AE%97&amp;ie=utf-8&amp;src=se_lighten_f" target="_blank" rel="noopener">绝对值运算</a>就是一个例子，在实数集中，有abs(a)</p><p>=</p><p>abs(abs(a))。<br>　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) </p><p>=</p><p> x。</p><p>看完上述解释后，应该可以理解GET幂等的含义了。</p><p>　　但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然<a href="http://www.so.com/s?q=%E8%A2%AB%E8%AE%A4%E4%B8%BA%E6%98%AF&amp;ie=utf-8&amp;src=se_lighten_f" target="_blank" rel="noopener">被认为是</a>安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p><p>　　<strong>2</strong>.根据HTTP规范，POST表示可能修改变服务器上的资源的请求。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</p><p>　　上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p><p>　　<strong>1</strong>.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。</p><p>　　<strong>2</strong>.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。</p><p>　　<strong>3</strong>.另外一个是，早期的Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</p><ul><li>简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</li></ul><p>　　以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《<a href="http://www.so.com/s?q=RESTful%20Web%20Services&amp;ie=utf-8&amp;src=se_lighten_quotes_f" target="_blank" rel="noopener">RESTful Web Services</a>》。</p><p>　　说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：</p><p>　　<strong>1</strong>.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p><p>　　POST把提交的数据则放置在是HTTP包的包体中。</p><p>　　<strong>2</strong>.”GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB”？？！</p><p>　　以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：</p><p>　　(1).首先是”GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有<a href="http://www.so.com/s?q=%E7%9B%B4%E6%8E%A5%E5%85%B3%E7%B3%BB&amp;ie=utf-8&amp;src=se_lighten_f" target="_blank" rel="noopener">直接关系</a>了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p><p>　　注意这是限制是整个URL长度，而不仅仅是你的参数值<a href="http://www.so.com/s?q=%E6%95%B0%E6%8D%AE%E9%95%BF%E5%BA%A6&amp;ie=utf-8&amp;src=se_lighten_f" target="_blank" rel="noopener">数据长度</a>。[见参考资料5]</p><p>　　(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。</p><p>　　对于ASP程序，Request对象处理每个表单域时存在100K的数据长度限制。但如果使用Request.BinaryRead则没有这个限制。</p><p>　　由这个延伸出去，对于IIS 6.0，微软出于安全考虑，加大了限制。我们还需要注意：</p><p>　　　　 1).IIS 6.0默认ASP POST数据量最大为200KB，每个表单域限制是100KB。<br>　　　　 2).IIS 6.0默认上传文件的最大大小是4MB。<br>　　　　 3).IIS 6.0默认最大请求头是16KB。<br>　　IIS 6.0之前没有这些限制。[见参考资料5]</p><p>　　所以上面的80K，100K可能只是默认值而已(注：关于IIS4和IIS5的参数，我还没有确认)，但肯定是可以自己设置的。由于每个版本的IIS对这些参数的默认值都不一样，具体请参考相关的IIS配置文档。</p><p>　　<strong>3</strong>.在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。在JSP中，用request.getParameter(\”XXXX\”)来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个test.jsp?name=hyddd&amp;password=hyddd，用request.getQueryString()得到的是：name=hyddd&amp;password=hyddd。在PHP中，可以用$_GET和$_POST分别获取GET和POST中的数据，而$_REQUEST则可以获取GET和POST两种请求中的数据。值得注意的是，JSP中使用request和PHP中使用$_REQUEST都会有隐患，这个下次再写个文章总结。</p><p>　　<strong>4</strong>.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)<a href="http://www.so.com/s?q=%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2&amp;ie=utf-8&amp;src=se_lighten_f" target="_blank" rel="noopener">登录页面</a>有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</p><p>　　总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发！</p><p>　　纯属hyddd个人总结，如有错漏请指出。:&gt;</p><p><strong>参考资料</strong>：</p><p>[1].<a href="http://hi.baidu.com/liuzd003/blog/item/7bfecbfa6ea94ed8b58f318c.html" target="_blank" rel="noopener">http://hi.baidu.com/liuzd003/blog/item/7bfecbfa6ea94ed8b58f318c.html</a></p><p>[2].<a href="http://www.blogjava.net/onlykeke/archive/2006/08/23/65285.aspx" target="_blank" rel="noopener">http://www.blogjava.net/onlykeke/archive/2006/08/23/65285.aspx</a></p><p>[3].<a href="http://baike.baidu.com/view/2067025.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/2067025.htm</a></p><p>[4].<a href="http://www.chxwei.com/article.asp?id=373" target="_blank" rel="noopener">http://www.chxwei.com/article.asp?id=373</a></p><p>[5].<a href="http://blog.csdn.net/somat/archive/2004/10/29/158707.aspx" target="_blank" rel="noopener">http://blog.csdn.net/somat/archive/2004/10/29/158707.aspx</a></p><p>转载请说明出处，谢谢[hyddd(<a href="http://www.cnblogs.com/hyddd/" target="_blank" rel="noopener">http://www.cnblogs.com/hyddd/</a>)]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。
    
    </summary>
    
      <category term="DailyLearning" scheme="https://luox78.github.io/categories/DailyLearning/"/>
    
    
      <category term="request" scheme="https://luox78.github.io/tags/request/"/>
    
  </entry>
  
  <entry>
    <title>Swagger - 前后端分离后的契约</title>
    <link href="https://luox78.github.io/2018/01/15/swagger/"/>
    <id>https://luox78.github.io/2018/01/15/swagger/</id>
    <published>2018-01-15T11:39:51.811Z</published>
    <updated>2018-01-15T11:52:05.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>按照现在的趋势，前后端分离几乎已经是业界对开发和部署方式所达成的一种共识。所谓的前后端分离，并不是传统行业中的按部门划分，一部分人只做前端（HTML/CSS/JavaScript等等），另一部分人只做后端（或者叫服务端），因为这种方式是不工作的：比如很多团队采取了后端的模板技术（JSP, FreeMarker, ERB等等），前端的开发和调试需要一个后台Web容器的支持，从而无法将前后端开发和部署做到真正的分离。<a id="more"></a></p><p>通常，前后端分别有着自己的开发流程，构建工具，测试等。做前端的谁也不会想要用Maven或者Gradle作为构建工具，同样的道理，做后端的谁也不会想要用Grunt或者Gulp作为构建工具。前后端仅仅通过接口来协作，这个接口可能是JSON格式的RESTFul的接口，也可能是XML的，重点是后台只负责数据的提供和计算，而完全不处理展现。而前端则负责拿到数据，组织数据并展现的工作。这样结构清晰，关注点分离，前后端会变得相对独立并松耦合。但是这种想法依然还是很理想化，前后端集成往往还是一个很头痛的问题。比如在最后需要集成的时候，我们才发现最开始商量好的数据结构发生了变化，而且这种变化往往是在所难免的，这样就会增加大量的集成时间。</p><p>归根结底，还是前端或者后端感知到变化的时间周期太长，不能“及时协商，尽早解决”，最终导致集中爆发。怎么解决这个问题呢？我们需要提前协商好一些契约，并将这些契约作为可以被测试的中间产品，然后前后端都通过自动化测试来检验这些契约，一旦契约发生变化，测试就会失败。这样，每个失败的测试都会驱动双方再次协商，有效的缩短了反馈周期，并且降低集成风险。具体的实践方式，请参加我同事的一篇博文，“前后端分离了，然后呢？”<a href="http://icodeit.org/2015/06/whats-next-after-separate-frontend-and-backend/" target="_blank" rel="noopener">http://icodeit.org/2015/06/whats-next-after-separate-frontend-and-backend/</a>。</p><p>不过，仅仅靠纪律是不够的，还需要通过工具的辅助来提高效率。下面，我们就来看一下，一个API设计工具——Swagger，将如何帮助我们更好的实现“前后端分离”。</p><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><p>Swagger包括库、编辑器、代码生成器等很多部分，这里我们主要讲一下Swagger Editor。这是一个完全开源的项目，并且它也是一个基于Angular的成功案例，我们可以下载源码并自己部署它，也可以修改它或集成到我们自己的软件中。</p><p>在Swagger Editor中，我们可以基于YAML语法定义我们的RESTful API，然后它会自动生成一篇排版优美的API文档，并且提供实时预览。相信大多数朋友都遇到过这样一个场景：明明调用的是之前约定好的API，拿到的结果却不是想要的。可能因为是有人修改了API的接口，却忘了更新文档；或者是文档更新的不及时；又或者是文档写的有歧义，大家的理解各不相同。总之，让API文档总是与API定义同步更新，是一件非常有价值的事。下面我们通过一个例子来感受一下Swagger给我们带来的好处。</p><p>首先我们需要安装一个Swagger Editor，或者也可以直接使用在线版本<a href="http://editor.swagger.io/" target="_blank" rel="noopener">http://editor.swagger.io/</a>。如果需要在本地启动编辑器，执行以下三行命令即可（前提是已经安装好了Node.js）：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/swagger-api/swagger-editor.git</span><br><span class="line">cd swagger-editor</span><br><span class="line">npm <span class="literal">start</span></span><br></pre></td></tr></table></figure><p>当我们修改了API的定义之后，在编辑器右侧就可以看到相应的API文档了，而且永远是最新的。</p><p><img src="http://greengerong.github.io/images/blog_img/SwaggerEditor.png" alt="Swagger editor"></p><p>不仅如此，它还能够自动生成Mock server所需要的代码，这样一来前端开发就再也不用等着后端API 的实现了。除此之外，它还有一个更强大的功能，甚至能够帮助我们自动生成不同语言的客户端的代码。Swagger是基于插件来实现各种不同的语言的，所以，如果已经提供的语言中没有你正在用的，你也可以自己实现相应的插件，甚至是从源代码级别进行定制化。</p><p><img src="http://greengerong.github.io/images/blog_img/SwaggerGenerateClient.png" alt="Swagger generate client"></p><h3 id="契约测试"><a href="#契约测试" class="headerlink" title="契约测试"></a>契约测试</h3><p>谈到了前后端分离，那么在所难免，会遇到一些集成的问题：一拨人在全心全意的进行前端开发，另一拨人在心无旁骛的做后端开发，那么谁应该为集成买单呢？在现在这个持续集成、持续交付的年代里，我们应该如何去保证双方不会分道扬镳、越走越远呢？</p><p>所以，在一开始就定一个契约就成了迫在眉睫的事情，双方就API相关的内容，包括路径、参数、类型等达成一致，当然，这份契约并不是一旦创建就不能修改的，而且，如果一开始没有设计好，很有可能会频繁的修改。这个时候，要让双方都能够实时的跟踪最新的API就成了一个难题。还好，在总结了前人的经验和教训之后，我们早已有了应对之策，那就是<code>契约测试</code>。</p><p>老马（Martin Fowler）早在2011年的时候就发表了一篇博客<a href="http://martinfowler.com/bliki/IntegrationContractTest.html" target="_blank" rel="noopener">http://martinfowler.com/bliki/IntegrationContractTest.html</a>，专门讨论了如何做契约测试。</p><p>首先，我们先假设我们已经有了一份契约，可能是基于JSON格式的，有可能是基于XML格式的，这都不重要。然后，前端会根据这份契约建立一个Mock server，所有的测试都发往这个Mock server。有两方面的原因：一是这个时候可能后台的API还没有开发完成；二是有可能因为网络等其他方面的原因导致直接调用真实的后台API会很不稳定或者很耗时。到这里，可能有人就要说了，如果后台的API实现和之前约定的并不一样，怎么能保证到了集成的时候双方还能很顺利的集成呢？其实这个问题并不难，只需要让前端的测试定期连接真实的API执行一遍就能尽早的发现差异性。比方说，在我们平常的build pipeline上添加一个job，让这些测试每天在午夜里连着真实的API执行。如果，第二天发现这些测试有的失败了，那么就需要和开发后台API的人员进行一次沟通了，很有可能由于真实的业务逻辑发生了变化，API在实现的时候，已经和之前的契约不一致了，如果是这样，那么相应的测试和契约定义就需要更新以满足最新的业务需求。</p><p>总之，进行契约测试的目的就是尽早的发现差异性，并作出调整，将最后集成的风险降到最低。</p><blockquote><p>原文 <a href="http://www.cnblogs.com/whitewolf/" target="_blank" rel="noopener">http://www.cnblogs.com/whitewolf/</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前后端分离&quot;&gt;&lt;a href=&quot;#前后端分离&quot; class=&quot;headerlink&quot; title=&quot;前后端分离&quot;&gt;&lt;/a&gt;前后端分离&lt;/h3&gt;&lt;p&gt;按照现在的趋势，前后端分离几乎已经是业界对开发和部署方式所达成的一种共识。所谓的前后端分离，并不是传统行业中的按部门划分，一部分人只做前端（HTML/CSS/JavaScript等等），另一部分人只做后端（或者叫服务端），因为这种方式是不工作的：比如很多团队采取了后端的模板技术（JSP, FreeMarker, ERB等等），前端的开发和调试需要一个后台Web容器的支持，从而无法将前后端开发和部署做到真正的分离。
    
    </summary>
    
      <category term="DailyLearning" scheme="https://luox78.github.io/categories/DailyLearning/"/>
    
    
      <category term="swagger" scheme="https://luox78.github.io/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>初始JQuery01</title>
    <link href="https://luox78.github.io/2018/01/14/JQuery01/"/>
    <id>https://luox78.github.io/2018/01/14/JQuery01/</id>
    <published>2018-01-14T07:30:29.287Z</published>
    <updated>2018-01-14T14:00:04.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见的JavaScript框架库"><a href="#常见的JavaScript框架库" class="headerlink" title="常见的JavaScript框架库"></a>常见的JavaScript框架库</h2><p><strong>为什么使用JavaScript框架库？</strong></p><p>普通JavaScript的缺点：每种控件的操作方式不统一，不同浏览器下有区别，要编写跨浏览器的程序非常麻烦。因此出现了很多对JavaScript的封装库</p><a id="more"></a><p><strong>jQuery:</strong></p><ul><li>jQuery就是JavaScript语法写的一些函数类，内部仍然是调用JavaScript实现的，所以并不是代替JavaScript的。使用jQuery的代码、编写jQuery的扩展插件等仍然需要JavaScript的技术，jQuery本身就是一堆JavaScript函数。</li><li>jQuery是最火的JavaScript库，已经被集成到VS2010了，得到了MS的支持，MS的Ajax toolkit和jQuery结合也是最方便，jQuery的扩展插件也是非常多</li></ul><h2 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h2><p><strong>什么是jQuery？</strong></p><p>jQuery就是一个JavaScript函数库</p><p><strong>jQuery能做什么？jQuery是做什么的？</strong></p><p>jQuery本身就是一堆JavaScript函数，JavaScript是做什么的，jQuery也一样。毕竟jQuery只是用JavaScript编写的函数库而已，有些功能jQuery没有封装，则还需要通过自己写JavaScript来实现。</p><h2 id="jQuery中的顶级对象"><a href="#jQuery中的顶级对象" class="headerlink" title="jQuery中的顶级对象$"></a>jQuery中的顶级对象$</h2><p>$jQuery中最常用的对象即对象，要想使用jQuery的方法必须通过对象。只有将普通的Dom对象封装成jQuery对象，然后才能调用jQuery中的各种方法。</p><p>$是jQuery简写，在代码中可以使用jQuery代替，但一般为了方便大家都直接使用。</p><p><strong>jquery里面的几个函数</strong></p><ol><li><p><code>$.map(array,callback(element,index));</code>element 为元素 ，index 为遍历的索引</p><p>一个数组中的元素转换到另一个数组中。</p><p>作为参数的转换函数会为每个数组元素调用，而且会给这个转换函数传递一个表示被转换的元素作为参数。转换函数可以返回转换后的值、null（删除数组中的项目）或一个包含值的数组，并扩展至原始数组中。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">     $.map(arr,</span><br><span class="line">     <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] * <span class="number">2</span>);</span><br><span class="line">     &#125;);</span><br><span class="line">     </span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="string">"luox78"</span>: <span class="string">"shuai"</span>, <span class="string">"age"</span>: <span class="number">18</span> &#125;;</span><br><span class="line"> $.map(data,</span><br><span class="line">     <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><p>return false 演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.map(arr,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>] &gt; <span class="number">3</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line"> <span class="comment">//1, 2, 3, 4</span></span><br></pre></td></tr></table></figure><ol><li><code>each(callback)</code></li></ol><p>以每一个匹配的元素作为上下文来执行一个函数。</p><p>意味着，每次执行传递进来的函数时，函数中的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。而且，在每次执行函数时，都会给函数传递一个表示作为执行环境的元素在匹配的元素集合中所处位置的数字值作为参数（从零开始的整型）。<strong>返回 ‘false’ 将停止循环 (就像在普通的循环中使用 ‘break’)。返回 ‘true’ 跳至下一个循环(就像在普通的循环中使用’continue’)。</strong></p><p>HTML 代码:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;img/&gt;</span><span class="section">&lt;img/&gt;</span></span><br></pre></td></tr></table></figure><p>jQuery 代码:</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.src = <span class="string">"test"</span> + i + <span class="string">".jpg"</span>;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>   <code>jQuery.each(object, [callback])</code></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.each( [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>)</span>&#123;</span><br><span class="line">  alert( <span class="string">"Item #"</span> + i + <span class="string">": "</span> + n );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><p><code>jQuery.trim(str)</code></p><p>去掉字符串起始和结尾的空格。</p><p> jQuery 代码:</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$.</span>trim(<span class="comment">"  hello, how are you?  "</span>);</span><br></pre></td></tr></table></figure><p> 结果:</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">"hello, how are you?"</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h2><p>js dom 转换成JQuery对象</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">div</span> = document.getElementById(<span class="string">"div"</span>);</span><br><span class="line">$(<span class="keyword">div</span>).css(<span class="string">"backgroundColor"</span>, <span class="string">"black"</span>);</span><br></pre></td></tr></table></figure><p>JQuery转换成dom对象</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span>div).get[<span class="number">0</span>];<span class="regexp">//</span><span class="variable">$(</span>div)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p><strong>问题</strong></p><p>Array（数组）对象有没有对应的jQuery对象？</p><p>数组本身就不是Dom对象。不存在与jQuery对象之间的转换。使用jQuery语句可以直接使用数组，就像jquery.each()或jquery.map()</p><h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><p>什么是 链式编程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)).<span class="title">css</span>(<span class="params">XXX</span>).<span class="title">text</span>(<span class="params"></span>);</span></span><br></pre></td></tr></table></figure><p>说明</p><p>Jquery对象中的方法，一般带参数的返回jquery对象本身，不带参数的返回要的值，使用带参数的方法就实现了所谓的 链式编程，注意：返回的jquery对象有可能是一个集合</p><h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><p>常见的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">'#id'</span>)、Id选择器</span></span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">'span'</span>)、标签选择器</span></span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">'.cls'</span>)，类选择器</span></span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">'*[name=gender]'</span>)或$(<span class="string">'[name=gender]'</span>)，属性过滤选择器：</span></span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">'div.cls'</span>) 标签类选择器</span></span><br></pre></td></tr></table></figure><p><strong>多条件选择器</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(“<span class="selector-tag">p</span>,<span class="selector-tag">div</span>,<span class="selector-tag">span</span>.menuitem”)，同时选择p标签、div标签和拥有menuitem样式的span标签元素</span><br></pre></td></tr></table></figure><p><strong>层次选择器</strong></p><ol><li>后代，$(“div li”)获取div下的所有li元素（后代，子、子的子……）</li><li>子元素，$(“div &gt; li”)获取div下的直接li子元素 【必须是直接子元素】</li><li>相邻元素1：jquery(“.menuitem + div”)获取样式名为menuitem之后的相邻的（紧接着的）第一个div元素（不常用）等同于jquery(‘.menuitem’).next(‘div’);如果相邻的那个元素不是div,则不会继续向后找。</li><li>相邻元素2：jquery(“.menuitem ~ div”)获取样式名为menuitem之后所有的兄弟div元素，等同于jquery(‘. menuitem ’).nextAll(‘div’)。【nextAll(‘*’)或nextAll()表示后面的所有元素。】</li></ol><p><strong>获得兄弟元素的几个方法</strong></p><ul><li>next();//当前元素之后的紧邻着的第一个兄弟元素（下一个）</li><li>nextAll();//当前元素之后的所有兄弟元素</li><li>prev();//当前元素之前的紧邻着的兄弟元素（上一个）</li><li>prevAll();//当前元素之前的所有兄弟元素</li><li>siblings();//当前元素的所有兄弟元素</li></ul><p>html</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;div&gt;</span></span><br><span class="line">       &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"使第一个层变色"</span> id=<span class="string">"btn1"</span> /&gt;</span><br><span class="line">       &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"使第三个层变色"</span> id=<span class="string">"btn2"</span> /&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       $(<span class="string">"#div"</span>).prev().css(<span class="string">'backgroundColor'</span>, <span class="string">"red"</span>);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>注意方法括号中可以加筛选的表达式，限制查找的元素</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTML 代码:</span><br><span class="line"><span class="variable">&lt;div&gt;</span><span class="variable">&lt;span&gt;</span>Hello<span class="variable">&lt;/span&gt;</span><span class="variable">&lt;/div&gt;</span></span><br><span class="line"><span class="variable">&lt;p class="selected"&gt;</span>Hello Again<span class="variable">&lt;/p&gt;</span></span><br><span class="line"><span class="variable">&lt;p&gt;</span><span class="keyword">And</span> Again<span class="variable">&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">jQuery 代码:</span><br><span class="line">$(<span class="string">"p"</span>).prev(<span class="string">".selected"</span>)</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">[ <span class="variable">&lt;p class="selected"&gt;</span>Hello Again<span class="variable">&lt;/p&gt;</span> ]</span><br></pre></td></tr></table></figure><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><p>:first选取第一个元素。$(“div:first”)选取第一个<code>&lt;div&gt;</code></p><p>:last选取最后一个元素。$(“div:last”)选取最后一个<code>&lt;div&gt;</code></p><p>:not(选择器) 选取不满足“选择器”条件的元素，$(“input:not(.myClass)”)选取样式名不是myClass的<code>&lt;input&gt;</code></p><p>:even、:odd，选取索引是偶数、奇数的元素：$(“input:even”)选取索引是奇数的<code>&lt;input&gt;</code></p><p>:eq(索引序号)、gt(索引序号)、:lt(索引序号) 选取索引等于、大于、小于索引序号的元素，比如$(“input:lt(5)”)选取索引小于5的<code>&lt;input&gt;</code></p><p>$(“:header”)选取所有的h1……h6元素（*）</p><p>$(“div:animated”)选取正在执行动画的<code>&lt;div&gt;</code>元素。 （*）</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大于索引2的又小于后面索引2的,每次筛选都是上次筛选,即每次筛选后索引都清零</span></span><br><span class="line"><span class="symbol">$</span>(<span class="string">'div:gt(2):lt(2)'</span>).css(<span class="string">'backgroundColor'</span>, <span class="string">'yellow'</span>);</span><br></pre></td></tr></table></figure><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><p><strong>如何判断对象是否存在</strong></p><p>jQuery选择器返回的是一个对象数组，调用text()、html()、click()之类方法的时候其实是对数组中每个元素迭代调用每个方法，因此即使通过id选择的元素不存在也不会报错，如果需要判断指定的id是否存在，应该写</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">"#btn1"</span>).<span class="built_in">length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">alert(<span class="string">"id为btn1的元素不存在！"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h2><h3 id="addClass-class-fn"><a href="#addClass-class-fn" class="headerlink" title="addClass(class|fn)"></a>addClass(class|fn)</h3><p> 概述</p><p>为每个匹配的元素添加指定的类名。</p><p> 参数</p><p> <strong>class</strong> String<em>V1.0</em></p><p>一个或多个要添加到元素中的CSS类名，请用空格分开</p><p><strong>function(index, class)</strong> Function<em>V1.4</em></p><p>此函数必须返回一个或多个空格分隔的class名。接受两个参数，index参数为对象在这个集合中的索引值，class参数为这个对象原先的class属性值。</p><p>示例</p><p>参数class 描述:</p><p>为匹配的元素加上 ‘selected’ 类</p><p> jQuery 代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">"p"</span>).addClass(<span class="string">"selected"</span>);</span></span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">"p"</span>).addClass(<span class="string">"selected1 selected2"</span>);</span></span><br></pre></td></tr></table></figure><h3 id="removeClass-class-fn"><a href="#removeClass-class-fn" class="headerlink" title="removeClass([class|fn])"></a>removeClass([class|fn])</h3><p> 概述</p><p>从所有匹配的元素中删除全部或者指定的类。</p><p> 参数</p><p> <strong>class</strong>String<em>V1.0</em></p><p>一个或多个要删除的CSS类名，请用空格分开</p><p> <strong>function(index, class)</strong>Function<em>V1.4</em></p><p>此函数必须返回一个或多个空格分隔的class名。接受两个参数，index参数为对象在这个集合中的索引值，class参数为这个对象原先的class属性值。</p><p> 示例</p><p> 参数class 描述:</p><p>从匹配的元素中删除 ‘selected’ 类</p><p> jQuery 代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">"p"</span>).removeClass(<span class="string">"selected"</span>);</span></span><br></pre></td></tr></table></figure><p> 参数class 描述:</p><p>删除匹配元素的所有类</p><p> jQuery 代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">"p"</span>).removeClass();</span></span><br></pre></td></tr></table></figure><p> 回调函数描述:</p><p>删除最后一个元素上与前面重复的class</p><p> jQuery 代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li:last'</span>).removeClass(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="keyword">this</span>).prev().attr(<span class="string">'class'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="toggleClass-class-fn-sw"><a href="#toggleClass-class-fn-sw" class="headerlink" title="toggleClass (class|fn[,sw])"></a>toggleClass (class|fn[,sw])</h3><p> 概述</p><p>如果存在（不存在）就删除（添加）一个类。</p><p> 参数</p><p> <strong>class</strong>String<em>V1.0</em></p><p>CSS类名</p><p> <strong>class,switch</strong>String,Boolean<em>V1.3</em></p><p>1:要切换的CSS类名.</p><p>2:用于决定元素是否包含class的布尔值。</p><p> <strong>switch</strong>Boolean<em>V1.4</em></p><p>用于决定元素是否包含class的布尔值。</p><p> <strong>function(index, class,switch)[, switch]</strong>Function,Boolean<em>V1.4</em></p><p>1:用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数。</p><p>2: 一个用来判断样式类添加还是移除的 boolean 值。</p><p> 示例</p><p> 参数class 描述:</p><p>为匹配的元素切换 ‘selected’ 类</p><p> jQuery 代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">(<span class="string">"p"</span>).toggleClass(<span class="string">"selected"</span>);</span></span><br></pre></td></tr></table></figure><p>参数class,switch 描述:</p><p>每点击三下加上一次 ‘highlight’ 类</p><p> HTML 代码:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong&gt;jQuery 代码<span class="symbol">:&lt;/strong&gt;</span></span><br></pre></td></tr></table></figure><p> jQuery 代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">$(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">"highlight"</span>, count++ % <span class="number">3</span> == <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 回调函数 描述:</p><p>根据父元素来设置class属性</p><p> jQuery 代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div.foo'</span>).toggleClass(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($(<span class="keyword">this</span>).parent().is(<span class="string">'.bar'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'happy'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'sad'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="hasClass-class"><a href="#hasClass-class" class="headerlink" title="hasClass(class)"></a>hasClass(class)</h3><p> 概述</p><p>检查当前的元素是否含有某个特定的类，如果有，则返回true。</p><p>这其实就是 is(“.” + class)。</p><p> 参数</p><p> <strong>class</strong>String<em>V1.2</em></p><p>用于匹配的类名</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常见的JavaScript框架库&quot;&gt;&lt;a href=&quot;#常见的JavaScript框架库&quot; class=&quot;headerlink&quot; title=&quot;常见的JavaScript框架库&quot;&gt;&lt;/a&gt;常见的JavaScript框架库&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;为什么使用JavaScript框架库？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;普通JavaScript的缺点：每种控件的操作方式不统一，不同浏览器下有区别，要编写跨浏览器的程序非常麻烦。因此出现了很多对JavaScript的封装库&lt;/p&gt;
    
    </summary>
    
      <category term="JQuery" scheme="https://luox78.github.io/categories/JQuery/"/>
    
    
      <category term="jQueryfoundation" scheme="https://luox78.github.io/tags/jQueryfoundation/"/>
    
      <category term="jsfoundation" scheme="https://luox78.github.io/tags/jsfoundation/"/>
    
  </entry>
  
  <entry>
    <title>初识JavaScript06</title>
    <link href="https://luox78.github.io/2018/01/13/JavaScript06/"/>
    <id>https://luox78.github.io/2018/01/13/JavaScript06/</id>
    <published>2018-01-13T11:39:26.030Z</published>
    <updated>2018-01-13T14:09:01.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><ul><li><p><code>window.event.keyCode</code>实现对键盘的获取</p><p>回车的<code>keyCode</code>为13，Tab的<code>keyCode</code>为9,只有少数的键才能被替换，大部分是不行的，有权限问题</p></li><li><p><code>checkbox</code></p><p><code>&lt;input type=&quot;checkbox&quot; id=&quot;check&quot;/&gt;&lt;label for=&quot;check&quot;&gt;11111&lt;/label&gt;</code>让标签指向<code>checkbox</code>，<a id="more"></a></p><p><code>checkbox</code>属性<code>checked=“checked”|true</code>为选中，<code>=false</code>为未选中,=false只在js中使用</p></li><li><p>JS中操作<code>select</code></p><p><strong>清空options</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">document</span>.getElementById(<span class="string">"shi"</span>).firstChild) &#123;          <span class="built_in">document</span>.getElementById(<span class="string">"shi"</span>).removeChild(<span class="built_in">document</span>.getElementById(<span class="string">"shi"</span>).firstChild);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>根据数据添加</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> datas) &#123;</span><br><span class="line">            <span class="keyword">var</span> opt = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span><br><span class="line">            opt.innerText = key;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"shen"</span>).appendChild(opt);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>如何获取选择项</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shis = datas[<span class="keyword">this</span>[<span class="keyword">this</span>.selectedIndex].text];<span class="comment">//this指select对象</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一些问题&quot;&gt;&lt;a href=&quot;#一些问题&quot; class=&quot;headerlink&quot; title=&quot;一些问题&quot;&gt;&lt;/a&gt;一些问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;window.event.keyCode&lt;/code&gt;实现对键盘的获取&lt;/p&gt;
&lt;p&gt;回车的&lt;code&gt;keyCode&lt;/code&gt;为13，Tab的&lt;code&gt;keyCode&lt;/code&gt;为9,只有少数的键才能被替换，大部分是不行的，有权限问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;checkbox&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;check&amp;quot;/&amp;gt;&amp;lt;label for=&amp;quot;check&amp;quot;&amp;gt;11111&amp;lt;/label&amp;gt;&lt;/code&gt;让标签指向&lt;code&gt;checkbox&lt;/code&gt;，
    
    </summary>
    
      <category term="JavaScript" scheme="https://luox78.github.io/categories/JavaScript/"/>
    
    
      <category term="jsfoundation" scheme="https://luox78.github.io/tags/jsfoundation/"/>
    
  </entry>
  
  <entry>
    <title>Newtonsoft.Json介绍</title>
    <link href="https://luox78.github.io/2018/01/12/Newtonsoft_Json/"/>
    <id>https://luox78.github.io/2018/01/12/Newtonsoft_Json/</id>
    <published>2018-01-12T15:43:30.908Z</published>
    <updated>2018-01-12T16:31:33.467Z</updated>
    
    <content type="html"><![CDATA[<p>在做开发的时候，很多数据交换都是以json格式传输的。而使用Json的时候，我们很多时候会涉及到几个序列化对象的使用：<strong>DataContractJsonSerializer,JavaScriptSerializer </strong><a id="more"></a>和<a href="http://json.codeplex.com/" target="_blank" rel="noopener"><strong> Json.NET</strong></a>即Newtonsoft.Json。大多数人都会选择性能以及通用性较好Json.NET，这个不是微软的类库，但是一个开源的世界级的Json操作类库，从下面的性能对比就可以看到它的其中之一的性能优点。</p><p><img src="https://images0.cnblogs.com/i/8867/201404/282228152051648.png" alt="img"></p><p>齐全的<a href="http://www.newtonsoft.com/json/help/html/N_Newtonsoft_Json.htm" target="_blank" rel="noopener">API</a>介绍，使用方式简单</p><p><img src="https://images0.cnblogs.com/blog2015/336693/201506/281434460338410.png" alt="img"></p><h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><h3 id="JsonConvert"><a href="#JsonConvert" class="headerlink" title="JsonConvert"></a>JsonConvert</h3><p>　Json.Net是支持序列化和反序列化DataTable,DataSet,Entity Framework和Entity的。下面分别举例说明序列化和反序列化。</p><p><strong>DataTable：</strong></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//序列化DataTable</span><br><span class="line">DataTable dt = new DataTable();</span><br><span class="line">dt.Columns.<span class="keyword">Add</span>(<span class="string">"Age"</span>, <span class="keyword">Type</span>.GetType(<span class="string">"System.Int32"</span>));</span><br><span class="line">dt.Columns.<span class="keyword">Add</span>(<span class="string">"Name"</span>, <span class="keyword">Type</span>.GetType(<span class="string">"System.String"</span>));</span><br><span class="line">dt.Columns.<span class="keyword">Add</span>(<span class="string">"Sex"</span>, <span class="keyword">Type</span>.GetType(<span class="string">"System.String"</span>));</span><br><span class="line">dt.Columns.<span class="keyword">Add</span>(<span class="string">"IsMarry"</span>, <span class="keyword">Type</span>.GetType(<span class="string">"System.Boolean"</span>));</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    DataRow dr = dt.NewRow();</span><br><span class="line">    dr[<span class="string">"Age"</span>] = i + <span class="number">1</span>;</span><br><span class="line">    dr[<span class="string">"Name"</span>] = <span class="string">"Name"</span> + i;</span><br><span class="line">    dr[<span class="string">"Sex"</span>] = i % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">"男"</span> : <span class="string">"女"</span>;</span><br><span class="line">    dr[<span class="string">"IsMarry"</span>] = i % <span class="number">2</span> &gt; <span class="number">0</span> ? true : false;</span><br><span class="line">    dt.Rows.<span class="keyword">Add</span>(dr);</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(JsonConvert.SerializeObject(dt));</span><br></pre></td></tr></table></figure><p><img src="https://images0.cnblogs.com/blog2015/336693/201506/281443553617087.png" alt="https://images0.cnblogs.com/blog2015/336693/201506/281443553617087.png"></p><p>利用上面字符串进行反序列化</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">string</span> json = JsonConvert.SerializeObject(dt);</span><br><span class="line">dt=JsonConvert.DeserializeObject&lt;DataTable&gt;(json);</span><br><span class="line">foreach (DataRow dr in dt.Rows)</span><br><span class="line">&#123;</span><br><span class="line">　　Console.WriteLine(<span class="string">"&#123;0&#125;<span class="subst">\t</span>&#123;1&#125;<span class="subst">\t</span>&#123;2&#125;<span class="subst">\t</span>&#123;3&#125;<span class="subst">\t</span>"</span>, dr[<span class="number">0</span>], dr[<span class="number">1</span>], dr[<span class="number">2</span>], dr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images0.cnblogs.com/blog2015/336693/201506/281448403619018.png" alt="https://images0.cnblogs.com/blog2015/336693/201506/281448403619018.png"></p><p>Entity序列化和DataTable一样，就不过多介绍了。</p><h3 id="JsonSerializer"><a href="#JsonSerializer" class="headerlink" title="JsonSerializer"></a>JsonSerializer</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Product product = <span class="keyword">new</span> <span class="type">Product</span>();</span><br><span class="line">product.ExpiryDate = <span class="keyword">new</span> <span class="type">DateTime</span>(<span class="number">2008</span>, <span class="number">12</span>, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">JsonSerializer serializer = <span class="keyword">new</span> <span class="type">JsonSerializer</span>();</span><br><span class="line">serializer.Converters.Add(<span class="keyword">new</span> <span class="type">JavaScriptDateTimeConverter</span>());</span><br><span class="line">serializer.NullValueHandling = NullValueHandling.Ignore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (StreamWriter sw = <span class="keyword">new</span> <span class="type">StreamWriter</span>(@<span class="string">"c:\json.txt"</span>))</span><br><span class="line"><span class="keyword">using</span> (JsonWriter writer = <span class="keyword">new</span> <span class="type">JsonTextWriter</span>(sw))</span><br><span class="line">&#123;</span><br><span class="line">    serializer.Serialize(writer, product);</span><br><span class="line">    <span class="comment">// &#123;"ExpiryDate":new Date(1230375600000),"Price":0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LINQ-to-JSON"><a href="#LINQ-to-JSON" class="headerlink" title="LINQ to JSON"></a>LINQ to JSON</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">JObject o = JObject.Parse(@<span class="string">"&#123;</span></span><br><span class="line"><span class="string">  'CPU': 'Intel',</span></span><br><span class="line"><span class="string">  'Drives': [</span></span><br><span class="line"><span class="string">    'DVD read/writer',</span></span><br><span class="line"><span class="string">    '500 gigabyte hard drive'</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">string</span> cpu = (<span class="type">string</span>)o[<span class="string">"CPU"</span>];</span><br><span class="line"><span class="comment">// Intel</span></span><br><span class="line"></span><br><span class="line"><span class="type">string</span> firstDrive = (<span class="type">string</span>)o[<span class="string">"Drives"</span>][<span class="number">0</span>];</span><br><span class="line"><span class="comment">// DVD read/writer</span></span><br><span class="line"></span><br><span class="line">IList&lt;<span class="type">string</span>&gt; allDrives = o[<span class="string">"Drives"</span>].Select(t =&gt; (<span class="type">string</span>)t).ToList();</span><br><span class="line"><span class="comment">// DVD read/writer</span></span><br><span class="line"><span class="comment">// 500 gigabyte hard drive</span></span><br></pre></td></tr></table></figure><h4 id="Parsing-JSON-text"><a href="#Parsing-JSON-text" class="headerlink" title="Parsing JSON text"></a>Parsing JSON text</h4><p>Parsing a JSON Object from text</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">string json = @<span class="string">"&#123;</span></span><br><span class="line">  CPU: 'Intel',</span><br><span class="line">  Drives: [</span><br><span class="line">    'DVD read/writer',</span><br><span class="line">    '500 gigabyte hard drive'</span><br><span class="line">  ]</span><br><span class="line">&#125;<span class="string">";</span></span><br><span class="line"></span><br><span class="line">JObject o = JObject.Parse(json);</span><br></pre></td></tr></table></figure><p>Parsing a JSON Array from text</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string json = @<span class="string">"[</span></span><br><span class="line">  'Small',</span><br><span class="line">  'Medium',</span><br><span class="line">  'Large'</span><br><span class="line">]<span class="string">";</span></span><br><span class="line"></span><br><span class="line">JArray a = JArray.Parse(json);</span><br></pre></td></tr></table></figure><h4 id="Loading-JSON-from-a-file"><a href="#Loading-JSON-from-a-file" class="headerlink" title="Loading JSON from a file"></a>Loading JSON from a file</h4><p>Reading JSON from a file</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> (StreamReader reader = <span class="built_in">File</span>.OpenText(@<span class="string">"c:\person.json"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    JObject o = (JObject)JToken.ReadFrom(<span class="keyword">new</span> JsonTextReader(reader));</span><br><span class="line">    <span class="comment">// do stuff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Querying-JSON-with-LINQ"><a href="#Querying-JSON-with-LINQ" class="headerlink" title="Querying JSON with LINQ"></a>Querying JSON with LINQ</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">string json = @<span class="string">"&#123;</span></span><br><span class="line">   'channel': &#123;</span><br><span class="line">     'title': 'James Newton-King',</span><br><span class="line">     'link': 'http://james.newtonking.com',</span><br><span class="line">     'description': 'James Newton-King\'s blog.',</span><br><span class="line">     'item': [</span><br><span class="line">       &#123;</span><br><span class="line">         'title': 'Json.NET <span class="number">1.3</span> + New license + Now on CodePlex',</span><br><span class="line">         'description': 'Annoucing the release of Json.NET <span class="number">1.3</span>, the MIT license and the source on CodePlex',</span><br><span class="line">         'link': 'http:<span class="comment">//james.newtonking.com/projects/json-net.aspx',</span></span><br><span class="line">         'categories': [</span><br><span class="line">           'Json.NET',</span><br><span class="line">           'CodePlex'</span><br><span class="line">         ]</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         'title': 'LINQ to JSON beta',</span><br><span class="line">         'description': 'Annoucing LINQ to JSON',</span><br><span class="line">         'link': 'http://james.newtonking.com/projects/json-net.aspx',</span><br><span class="line">         'categories': [</span><br><span class="line">           'Json.NET',</span><br><span class="line">           'LINQ'</span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;<span class="string">";</span></span><br><span class="line"> </span><br><span class="line"> JObject rss = JObject.Parse(json);</span><br><span class="line"> </span><br><span class="line"> string rssTitle = (string)rss[<span class="string">"channel"</span>][<span class="string">"title"</span>];</span><br><span class="line"> <span class="comment">// James Newton-King</span></span><br><span class="line"> </span><br><span class="line"> string itemTitle = (string)rss[<span class="string">"channel"</span>][<span class="string">"item"</span>][<span class="number">0</span>][<span class="string">"title"</span>];</span><br><span class="line"> <span class="comment">// Json.NET 1.3 + New license + Now on CodePlex</span></span><br><span class="line"> </span><br><span class="line"> JArray categories = (JArray)rss[<span class="string">"channel"</span>][<span class="string">"item"</span>][<span class="number">0</span>][<span class="string">"categories"</span>];</span><br><span class="line"> <span class="comment">// ["Json.NET", "CodePlex"]</span></span><br><span class="line"> </span><br><span class="line"> IList&lt;string&gt; categoriesText = categories.Select(c =&gt; (string)c).ToList();</span><br><span class="line"> <span class="comment">// Json.NET</span></span><br><span class="line"> <span class="comment">// CodePlex</span></span><br></pre></td></tr></table></figure><h3 id="Convert-JSON-to-XML"><a href="#Convert-JSON-to-XML" class="headerlink" title="Convert JSON to XML"></a>Convert JSON to XML</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XNode <span class="keyword">node</span> <span class="title">= JsonConvert</span>.DeserializeXNode(json, <span class="string">"Root"</span>);</span><br></pre></td></tr></table></figure><h3 id="Convert-XML-to-JSON"><a href="#Convert-XML-to-JSON" class="headerlink" title="Convert XML to JSON"></a>Convert XML to JSON</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>string xml = @<span class="string">"&lt;?xml version='1.0' standalone='no'?&gt;</span></span><br><span class="line"><span class="string"> 2&lt;root&gt;</span></span><br><span class="line"><span class="string"> 3  &lt;person id='1'&gt;</span></span><br><span class="line"><span class="string"> 4  &lt;name&gt;Alan&lt;/name&gt;</span></span><br><span class="line"><span class="string"> 5  &lt;url&gt;http://www.google.com&lt;/url&gt;</span></span><br><span class="line"><span class="string"> 6  &lt;/person&gt;</span></span><br><span class="line"><span class="string"> 7  &lt;person id='2'&gt;</span></span><br><span class="line"><span class="string"> 8  &lt;name&gt;Louis&lt;/name&gt;</span></span><br><span class="line"><span class="string"> 9  &lt;url&gt;http://www.yahoo.com&lt;/url&gt;</span></span><br><span class="line"><span class="string">10  &lt;/person&gt;</span></span><br><span class="line"><span class="string">11&lt;/root&gt;"</span>;</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span>XmlDocument doc = new XmlDocument();</span><br><span class="line"><span class="number">14</span>doc.LoadXml(xml);</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span>string json = JsonConvert.SerializeXmlNode(doc);</span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span>Console.WriteLine(json);</span><br><span class="line"><span class="number">19</span><span class="comment">// &#123;</span></span><br><span class="line"><span class="number">20</span><span class="comment">//   "?xml": &#123;</span></span><br><span class="line"><span class="number">21</span><span class="comment">//     "@version": "1.0",</span></span><br><span class="line"><span class="number">22</span><span class="comment">//     "@standalone": "no"</span></span><br><span class="line"><span class="number">23</span><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="number">24</span><span class="comment">//   "root": &#123;</span></span><br><span class="line"><span class="number">25</span><span class="comment">//     "person": [</span></span><br><span class="line"><span class="number">26</span><span class="comment">//       &#123;</span></span><br><span class="line"><span class="number">27</span><span class="comment">//         "@id": "1",</span></span><br><span class="line"><span class="number">28</span><span class="comment">//         "name": "Alan",</span></span><br><span class="line"><span class="number">29</span><span class="comment">//         "url": "http://www.google.com"</span></span><br><span class="line"><span class="number">30</span><span class="comment">//       &#125;,</span></span><br><span class="line"><span class="number">31</span><span class="comment">//       &#123;</span></span><br><span class="line"><span class="number">32</span><span class="comment">//         "@id": "2",</span></span><br><span class="line"><span class="number">33</span><span class="comment">//         "name": "Louis",</span></span><br><span class="line"><span class="number">34</span><span class="comment">//         "url": "http://www.yahoo.com"</span></span><br><span class="line"><span class="number">35</span><span class="comment">//       &#125;</span></span><br><span class="line"><span class="number">36</span><span class="comment">//     ]</span></span><br><span class="line"><span class="number">37</span><span class="comment">//   &#125;</span></span><br><span class="line"><span class="number">38</span><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Convert-XML-to-JSON-and-force-array"><a href="#Convert-XML-to-JSON-and-force-array" class="headerlink" title="Convert XML to JSON and force array"></a>Convert XML to JSON and force array</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>string xml = @<span class="string">"&lt;person id='1'&gt;</span></span><br><span class="line"><span class="string"> 2  &lt;name&gt;Alan&lt;/name&gt;</span></span><br><span class="line"><span class="string"> 3  &lt;url&gt;http://www.google.com&lt;/url&gt;</span></span><br><span class="line"><span class="string"> 4  &lt;role&gt;Admin1&lt;/role&gt;</span></span><br><span class="line"><span class="string"> 5&lt;/person&gt;"</span>;</span><br><span class="line"> <span class="number">6</span></span><br><span class="line"> <span class="number">7</span>XmlDocument doc = new XmlDocument();</span><br><span class="line"> <span class="number">8</span>doc.LoadXml(xml);</span><br><span class="line"> <span class="number">9</span></span><br><span class="line"><span class="number">10</span>string json = JsonConvert.SerializeXmlNode(doc);</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span>Console.WriteLine(json);</span><br><span class="line"><span class="number">13</span><span class="comment">// &#123;</span></span><br><span class="line"><span class="number">14</span><span class="comment">//   "person": &#123;</span></span><br><span class="line"><span class="number">15</span><span class="comment">//     "@id": "1",</span></span><br><span class="line"><span class="number">16</span><span class="comment">//     "name": "Alan",</span></span><br><span class="line"><span class="number">17</span><span class="comment">//     "url": "http://www.google.com",</span></span><br><span class="line"><span class="number">18</span><span class="comment">//     "role": "Admin1"</span></span><br><span class="line"><span class="number">19</span><span class="comment">//   &#125;</span></span><br><span class="line"><span class="number">20</span><span class="comment">// &#125;</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span>xml = @<span class="string">"&lt;person xmlns:json='http://james.newtonking.com/projects/json' id='1'&gt;</span></span><br><span class="line"><span class="string">23  &lt;name&gt;Alan&lt;/name&gt;</span></span><br><span class="line"><span class="string">24  &lt;url&gt;http://www.google.com&lt;/url&gt;</span></span><br><span class="line"><span class="string">25  &lt;role json:Array='true'&gt;Admin&lt;/role&gt;</span></span><br><span class="line"><span class="string">26&lt;/person&gt;"</span>;</span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="number">28</span>doc = new XmlDocument();</span><br><span class="line"><span class="number">29</span>doc.LoadXml(xml);</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">31</span>json = JsonConvert.SerializeXmlNode(doc);</span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">33</span>Console.WriteLine(json);</span><br><span class="line"><span class="number">34</span><span class="comment">// &#123;</span></span><br><span class="line"><span class="number">35</span><span class="comment">//   "person": &#123;</span></span><br><span class="line"><span class="number">36</span><span class="comment">//     "@id": "1",</span></span><br><span class="line"><span class="number">37</span><span class="comment">//     "name": "Alan",</span></span><br><span class="line"><span class="number">38</span><span class="comment">//     "url": "http://www.google.com",</span></span><br><span class="line"><span class="number">39</span><span class="comment">//     "role": [</span></span><br><span class="line"><span class="number">40</span><span class="comment">//       "Admin"</span></span><br><span class="line"><span class="number">41</span><span class="comment">//     ]</span></span><br><span class="line"><span class="number">42</span><span class="comment">//   &#125;</span></span><br><span class="line"><span class="number">43</span><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="类转换用法"><a href="#类转换用法" class="headerlink" title="类转换用法"></a>类转换用法</h2><p>​    1.忽略某些属性</p><p>​    2.默认值的处理</p><p>​    3.空值的处理</p><p>​    4.支持非公共成员</p><p>​    5.日期处理</p><p>​    6.自定义序列化的字段名称</p><p>　 7.动态决定属性是否序列化</p><p>​    8.枚举值的自定义格式化问题</p><p>　 9.自定义类型转换</p><p>  10.全局序列化设置</p><h3 id="一-忽略某些属性"><a href="#一-忽略某些属性" class="headerlink" title="一.忽略某些属性"></a>一.忽略某些属性</h3><p>　　类似本问开头介绍的接口优化，实体中有些属性不需要序列化返回，可以使用该特性。首先介绍Json.Net序列化的模式:OptOut 和 OptIn</p><table><thead><tr><th>options</th><th>说明</th></tr></thead><tbody><tr><td>OptIn</td><td>默认情况下,所有的成员不会被序列化,类中的成员只有标有特性JsonProperty的才会被序列化,当类的成员很多,但客户端仅仅需要一部分数据时,很有用</td></tr><tr><td>OptOut</td><td>默认值,类中所有公有成员会被序列化,如果不想被序列化,可以用特性JsonIgnore</td></tr></tbody></table><p>　仅需要姓名属性</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">JsonObject(MemberSerialization.OptIn)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">JsonProperty</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Sex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsMarry &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime Birthday &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images0.cnblogs.com/blog2015/336693/201506/281508379087828.png" alt="img"></p><p>  不需要是否结婚属性</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">JsonObject(MemberSerialization.OptOut)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Sex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">JsonIgnore</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsMarry &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime Birthday &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images0.cnblogs.com/blog2015/336693/201506/281510410171151.png" alt="img"></p><p>  通过上面的例子可以看到，要实现不返回某些属性的需求很简单。1.在实体类上加上[JsonObject(MemberSerialization.OptOut)] 2.在不需要返回的属性上加上 [JsonIgnore]说明。</p><h3 id="二-默认值处理"><a href="#二-默认值处理" class="headerlink" title="二.默认值处理"></a>二.默认值处理</h3><p>​    序列化时想忽略默认值属性可以通过JsonSerializerSettings.DefaultValueHandling来确定，该值为枚举值</p><table><thead><tr><th><code>DefaultValueHandling.Ignore</code></th><th>序列化和反序列化时,忽略默认值</th></tr></thead><tbody><tr><td><code>DefaultValueHandling.Include</code></td><td>序列化和反序列化时,包含默认值</td></tr></tbody></table><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DefaultValue(10)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person <span class="attr">p</span> = new Person &#123; <span class="attr">Age</span> = <span class="number">10</span>, <span class="attr">Name</span> = <span class="string">"张三丰"</span>, <span class="attr">Sex</span> = <span class="string">"男"</span>, <span class="attr">IsMarry</span> = <span class="literal">false</span>, <span class="attr">Birthday</span> = new DateTime(<span class="number">1991</span>, <span class="number">1</span>, <span class="number">2</span>) &#125;;</span><br><span class="line">JsonSerializerSettings <span class="attr">jsetting=new</span> JsonSerializerSettings();</span><br><span class="line">jsetting.<span class="attr">DefaultValueHandling=DefaultValueHandling.Ignore;</span></span><br><span class="line">Console.WriteLine(JsonConvert.SerializeObject(p, Formatting.Indented, jsetting));</span><br></pre></td></tr></table></figure><p>最终结果如下：</p><p><img src="https://images0.cnblogs.com/blog2015/336693/201506/290700436652801.png" alt="img"></p><h3 id="三-空值的处理"><a href="#三-空值的处理" class="headerlink" title="三.空值的处理"></a><strong>三.空值的处理</strong></h3><p>序列化时需要忽略值为NULL的属性，可以通过JsonSerializerSettings.NullValueHandling来确定，另外通过JsonSerializerSettings设置属性是对序列化过程中所有属性生效的，想单独对某一个属性生效可以使用JsonProperty，下面将分别展示两个方式</p><p>　　1.JsonSerializerSettings</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person <span class="attr">p</span> = new Person &#123; <span class="attr">room=null,Age</span> = <span class="number">10</span>, <span class="attr">Name</span> = <span class="string">"张三丰"</span>, <span class="attr">Sex</span> = <span class="string">"男"</span>, <span class="attr">IsMarry</span> = <span class="literal">false</span>, <span class="attr">Birthday</span> = new DateTime(<span class="number">1991</span>, <span class="number">1</span>, <span class="number">2</span>) &#125;;</span><br><span class="line">JsonSerializerSettings <span class="attr">jsetting=new</span> JsonSerializerSettings();</span><br><span class="line">jsetting.<span class="attr">NullValueHandling</span> = NullValueHandling.Ignore;</span><br><span class="line">Console.WriteLine(JsonConvert.SerializeObject(p, Formatting.Indented, jsetting));</span><br></pre></td></tr></table></figure><p>   <img src="https://images0.cnblogs.com/blog2015/336693/201506/290707560092150.png" alt="img"></p><p>   2.JsonProperty</p><p><img src="https://images0.cnblogs.com/blog2015/336693/201506/290710397909914.png" alt="img"></p><p>通过JsonProperty属性设置的方法，可以实现某一属性特别处理的需求，如默认值处理，空值处理，自定义属性名处理，格式化处理。上面空值处理实现</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">JsonProperty(NullValueHandling=NullValueHandling.Ignore)</span>]</span><br><span class="line"><span class="keyword">public</span> Room room &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="四-支持非公共成员"><a href="#四-支持非公共成员" class="headerlink" title="四.支持非公共成员"></a><strong>四.支持非公共成员</strong></h3><p>  序列化时默认都是处理公共成员，如果需要处理非公共成员，就要在该成员上加特性”JsonProperty”</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">JsonProperty</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> Height &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="五-日期处理"><a href="#五-日期处理" class="headerlink" title="五.日期处理"></a><strong>五.日期处理</strong></h3><p><strong>　</strong>　对于Dateime类型日期的格式化就比较麻烦了，系统自带的会格式化成iso日期标准<img src="https://images0.cnblogs.com/blog2015/336693/201506/290743047903040.png" alt="img">，但是实际使用过程中大多数使用的可能是yyyy-MM-dd 或者yyyy-MM-dd HH:mm:ss两种格式的日期，解决办法是可以将DateTime类型改成string类型自己格式化好，然后在序列化。如果不想修改代码，可以采用下面方案实现。</p><p>​      Json.Net提供了IsoDateTimeConverter日期转换这个类，可以通过JsnConverter实现相应的日期转换</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[JsonConverter(<span class="keyword">typeof</span>(IsoDateTimeConverter))]</span><br><span class="line"><span class="keyword">public</span> DateTime Birthday &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><p>　　但是IsoDateTimeConverter日期格式不是我们想要的，我们可以继承该类实现自己的日期</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChinaDateTimeConverter</span> : <span class="title">DateTimeConverterBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IsoDateTimeConverter dtConverter = <span class="keyword">new</span> IsoDateTimeConverter &#123; DateTimeFormat = <span class="string">"yyyy-MM-dd"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">object</span> <span class="title">ReadJson</span>(<span class="params">JsonReader reader, Type objectType, <span class="keyword">object</span> existingValue, JsonSerializer serializer</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dtConverter.ReadJson(reader, objectType, existingValue, serializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteJson</span>(<span class="params">JsonWriter writer, <span class="keyword">object</span> <span class="keyword">value</span>, JsonSerializer serializer</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dtConverter.WriteJson(writer, <span class="keyword">value</span>, serializer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    自己实现了一个yyyy-MM-dd格式化转换类，可以看到只是初始化IsoDateTimeConverter时给的日期格式为yyyy-MM-dd即可，下面看下效果</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[JsonConverter(<span class="keyword">typeof</span>(ChinaDateTimeConverter))]</span><br><span class="line"><span class="keyword">public</span> DateTime Birthday &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><p><img src="https://images0.cnblogs.com/blog2015/336693/201506/290750116036578.png" alt="img"></p><p>   可以根据自己需求实现不同的转换类</p><h3 id="六-自定义序列化的字段名称"><a href="#六-自定义序列化的字段名称" class="headerlink" title="六.自定义序列化的字段名称"></a><strong>六.自定义序列化的字段名称</strong></h3><p><strong>    </strong>实体中定义的属性名可能不是自己想要的名称，但是又不能更改实体定义，这个时候可以自定义序列化字段名称。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">JsonProperty(PropertyName = <span class="meta-string">"CName"</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="七-动态决定属性是否序列化"><a href="#七-动态决定属性是否序列化" class="headerlink" title="七.动态决定属性是否序列化"></a><strong>七.动态决定属性是否序列化</strong></h3><p><strong>　　</strong>这个是为了实现@米粒儿提的需求特别增加的，根据某些场景，可能A场景输出A，B，C三个属性，B场景输出E，F属性。虽然实际中不一定存在这种需求，但是json.net依然可以支持该特性。</p><p>　　继承默认的DefaultContractResolver类，传入需要输出的属性</p><p>​     重写修改了一下，大多数情况下应该是要排除的字段少于要保留的字段,  为了方便书写这里修改了构造函数加入retain表示props是需要保留的字段还是要排除的字段</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LimitPropsContractResolver</span> : <span class="title">DefaultContractResolver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span>[] props = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> retain;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="props"&gt;</span>传入的属性数组<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="retain"&gt;</span>true:表示props是需要保留的字段  false：表示props是要排除的字段<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LimitPropsContractResolver</span>(<span class="params"><span class="keyword">string</span>[] props, <span class="keyword">bool</span> retain=<span class="literal">true</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//指定要序列化属性的清单</span></span><br><span class="line">            <span class="keyword">this</span>.props = props;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.retain = retain;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IList&lt;JsonProperty&gt; <span class="title">CreateProperties</span>(<span class="params">Type type,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        MemberSerialization memberSerialization</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            IList&lt;JsonProperty&gt; list =</span><br><span class="line">            <span class="keyword">base</span>.CreateProperties(type, memberSerialization);</span><br><span class="line">            <span class="comment">//只保留清单有列出的属性</span></span><br><span class="line">            <span class="keyword">return</span> list.Where(p =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (retain)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> props.Contains(p.PropertyName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> !props.Contains(p.PropertyName);</span><br><span class="line">                &#125;      </span><br><span class="line">            &#125;).ToList();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">JsonIgnore</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">bool</span> IsMarry &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> Sex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JsonSerializerSettings jsetting=<span class="keyword">new</span> <span class="type">JsonSerializerSettings</span>();</span><br><span class="line">jsetting.ContractResolver = <span class="keyword">new</span> <span class="type">LimitPropsContractResolver</span>(<span class="keyword">new</span> <span class="type">string</span>[] &#123; <span class="string">"Age"</span>, <span class="string">"IsMarry"</span> &#125;);</span><br><span class="line">Console.WriteLine(JsonConvert.SerializeObject(p, Formatting.Indented, jsetting));</span><br></pre></td></tr></table></figure><p>  使用自定义的解析类，只输出”Age”, “IsMarry”两个属性，看下最终结果.只输出了Age属性，为什么IsMarry属性没有输出呢，因为标注了JsonIgnore</p><p> <img src="https://images0.cnblogs.com/blog2015/336693/201506/292128345097430.png" alt="img"></p><p> 看到上面的结果想要实现pc端序列化一部分，手机端序列化另一部分就很简单了吧，我们改下代码实现一下</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>[] propNames = null;</span><br><span class="line"><span class="built_in">if</span> (p.Age &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">　　propNames = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"Age"</span>, <span class="string">"IsMarry"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">else</span></span><br><span class="line">&#123;</span><br><span class="line">    propNames = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"Age"</span>, <span class="string">"Sex"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line">jsetting.ContractResolver = <span class="keyword">new</span> LimitPropsContractResolver(propNames);</span><br><span class="line"><span class="built_in">Console</span>.WriteLine(JsonConvert.SerializeObject(p, Formatting.Indented, jsetting));</span><br></pre></td></tr></table></figure><h3 id="八-枚举值的自定义格式化问题"><a href="#八-枚举值的自定义格式化问题" class="headerlink" title="八.枚举值的自定义格式化问题"></a><strong>八.枚举值的自定义格式化问题</strong></h3><p><strong> </strong> 默认情况下对于实体里面的枚举类型系统是格式化成改枚举对应的整型数值,那如果需要格式化成枚举对应的字符怎么处理呢？Newtonsoft.Json也帮我们想到了这点，下面看实例</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> NotifyType</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Emil发送</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    Mail=<span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 短信发送</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    SMS=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestEnmu</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 消息发送类型</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> NotifyType Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">JsonConvert.SerializeObject(<span class="keyword">new</span> TestEnmu());</span><br></pre></td></tr></table></figure><p>输出结果：<img src="https://images2015.cnblogs.com/blog/336693/201509/336693-20150910171743028-388882267.png" alt="img">  现在改造一下，输出”Type”:”Mail”</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestEnmu</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 消息发送类型</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">JsonConverter(typeof(StringEnumConverter))</span>]</span><br><span class="line">    <span class="keyword">public</span> NotifyType Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它的都不变，在Type属性上加上了JsonConverter(typeof(StringEnumConverter))表示将枚举值转换成对应的字符串,而StringEnumConverter是Newtonsoft.Json内置的转换类型,最终输出结果</p><p><img src="https://images2015.cnblogs.com/blog/336693/201509/336693-20150910172109044-1714459886.png" alt="img"></p><h3 id="九-自定义类型转换"><a href="#九-自定义类型转换" class="headerlink" title="九.自定义类型转换"></a><strong>九.自定义类型转换</strong></h3><p>默认情况下对于实体里面的Boolean系统是格式化成true或者false,对于true转成”是” false转成”否”这种需求改怎么实现了？我们可以自定义类型转换实现该需求，下面看实例</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BoolConvert</span> : <span class="title">JsonConverter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span>[] arrBString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BoolConvert</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            arrBString = <span class="string">"是,否"</span>.Split(<span class="string">','</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="BooleanString"&gt;</span>将bool值转换成的字符串值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BoolConvert</span>(<span class="params"><span class="keyword">string</span> BooleanString</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(BooleanString))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException();</span><br><span class="line">            &#125;</span><br><span class="line">            arrBString = BooleanString.Split(<span class="string">','</span>);</span><br><span class="line">            <span class="keyword">if</span> (arrBString.Length != <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">"BooleanString格式不符合规定"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">object</span> <span class="title">ReadJson</span>(<span class="params">JsonReader reader, Type objectType, <span class="keyword">object</span> existingValue, JsonSerializer serializer</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">bool</span> isNullable = IsNullableType(objectType);</span><br><span class="line">            Type t = isNullable ? Nullable.GetUnderlyingType(objectType) : objectType;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (reader.TokenType == JsonToken.Null)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!IsNullableType(objectType))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="keyword">string</span>.Format(<span class="string">"不能转换null value to &#123;0&#125;."</span>, objectType));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (reader.TokenType == JsonToken.String)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">string</span> boolText = reader.Value.ToString();</span><br><span class="line">                    <span class="keyword">if</span> (boolText.Equals(arrBString[<span class="number">0</span>], StringComparison.OrdinalIgnoreCase))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (boolText.Equals(arrBString[<span class="number">1</span>], StringComparison.OrdinalIgnoreCase))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (reader.TokenType == JsonToken.Integer)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//数值</span></span><br><span class="line">                    <span class="keyword">return</span> Convert.ToInt32(reader.Value) == <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="keyword">string</span>.Format(<span class="string">"Error converting value &#123;0&#125; to type '&#123;1&#125;'"</span>, reader.Value, objectType));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="keyword">string</span>.Format(<span class="string">"Unexpected token &#123;0&#125; when parsing enum"</span>, reader.TokenType));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 判断是否为Bool类型</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="objectType"&gt;</span>类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>为bool类型则可以进行转换<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">CanConvert</span>(<span class="params">Type objectType</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">IsNullableType</span>(<span class="params">Type t</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">"t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (t.BaseType.FullName==<span class="string">"System.ValueType"</span> &amp;&amp; t.GetGenericTypeDefinition() == <span class="keyword">typeof</span>(Nullable&lt;&gt;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">WriteJson</span>(<span class="params">JsonWriter writer, <span class="keyword">object</span> <span class="keyword">value</span>, JsonSerializer serializer</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteNull();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">bool</span> bValue = (<span class="keyword">bool</span>)<span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bValue)</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteValue(arrBString[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteValue(arrBString[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 自定义了BoolConvert类型，继承自JsonConverter。构造函数参数BooleanString可以让我们自定义将true false转换成相应字符串。下面看实体里面怎么使用这个自定义转换类型</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">JsonConverter(typeof(BoolConvert))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsMarry &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/336693/201512/336693-20151214101004068-161668511.png" alt="img">‘</p><p>相应的有什么个性化的转换需求，都可以使用自定义转换类型的方式实现。</p><h3 id="十-全局序列化设置"><a href="#十-全局序列化设置" class="headerlink" title="十.全局序列化设置"></a><strong>十.全局序列化设置</strong></h3><p>文章开头提出了Null值字段怎么不返回的问题，相应的在高级用法也给出了相应的解决方案使用jsetting.NullValueHandling = NullValueHandling.Ignore; 来设置不返回空值。这样有个麻烦的地方，每个不想返回空值的序列化都需设置一下。可以对序列化设置一些默认值方式么？下面将解答</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">　　Newtonsoft.Json.JsonSerializerSettings setting = <span class="keyword">new</span> <span class="type">Newtonsoft</span>.Json.JsonSerializerSettings();</span><br><span class="line">JsonConvert.DefaultSettings = <span class="keyword">new</span> <span class="type">Func</span>&lt;JsonSerializerSettings&gt;(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">　　　　<span class="comment">//日期类型默认格式化处理</span></span><br><span class="line">　　setting.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat;</span><br><span class="line">   setting.DateFormatString = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line"></span><br><span class="line">　　　 <span class="comment">//空值处理</span></span><br><span class="line">   setting.NullValueHandling = NullValueHandling.Ignore;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//高级用法九中的Bool类型转换 设置</span></span><br><span class="line">   setting.Converters.Add(<span class="keyword">new</span> <span class="type">BoolConvert</span>(<span class="string">"是,否"</span>));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> setting;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样设置以后，以后使用序列化的地方就不需要单独设置了，个人最喜欢设置的是空值处理这一块。</p><blockquote><p>本文来源<a href="https://www.cnblogs.com/yanweidie/p/4605212.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanweidie/p/4605212.html</a></p><p><a href="https://www.newtonsoft.com/json/help/html/Introduction.htm" target="_blank" rel="noopener">https://www.newtonsoft.com/json/help/html/Introduction.htm</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做开发的时候，很多数据交换都是以json格式传输的。而使用Json的时候，我们很多时候会涉及到几个序列化对象的使用：&lt;strong&gt;DataContractJsonSerializer,JavaScriptSerializer &lt;/strong&gt;
    
    </summary>
    
      <category term="DailyLearning" scheme="https://luox78.github.io/categories/DailyLearning/"/>
    
    
      <category term="Json" scheme="https://luox78.github.io/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>C#路径</title>
    <link href="https://luox78.github.io/2018/01/11/CS_path/"/>
    <id>https://luox78.github.io/2018/01/11/CS_path/</id>
    <published>2018-01-11T14:11:08.831Z</published>
    <updated>2018-01-11T15:04:34.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取当前文件的路径"><a href="#获取当前文件的路径" class="headerlink" title="获取当前文件的路径"></a>获取当前文件的路径</h2><p><code>string str1=Process.GetCurrentProcess().MainModule.FileName;</code>//可获得当前执行的exe的文件名。<br><code>string str2=Environment.CurrentDirectory;</code>//获取和设置当前目录（即该进程从中启动的目录）的完全限定路径。<a id="more"></a>(备注:按照定义，如果该进程在本地或网络驱动器的根目录中启动，则此属性的值为驱动器名称后跟一个尾部反斜杠（如“C:\”）。如果该进程<br>在子目录中启动，则此属性的值为不带尾部反斜杠的驱动器和子目录路径[如“C:\mySubDirectory”])。<br><code>string str3=Directory.GetCurrentDirectory();</code> //获取应用程序的当前工作目录。<br><code>string str4=AppDomain.CurrentDomain.BaseDirectory;</code>//获取基目录，它由程序集冲突解决程序用来探测程序集。<br><code>string str5=Application.StartupPath;</code>//获取启动了应用程序的可执行文件的路径，不包括可执行文件的名称。<br><code>string str6=Application.ExecutablePath;</code>//获取启动了应用程序的可执行文件的路径，包括可执行文件的名称。<br><code>string str7=AppDomain.CurrentDomain.SetupInformation.ApplicationBase;</code>//获取或设置包含该应用程序的目录的名称。</p><ol><li><code>System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName</code><br>获取模块的完整路径。</li><li><code>System.Environment.CurrentDirectory</code><pre><code>获取和设置当前目录(该进程从中启动的目录)的完全限定目录。</code></pre></li><li><code>System.IO.Directory.GetCurrentDirectory()</code><pre><code>获取应用程序的当前工作目录。这个不一定是程序从中启动的目录啊，有可能程序放在C:\www里,这个函数有可能返回C:\Documents and Settings\ZYB\,或者C:\Program Files\Adobe\,有时不一定返回什么东东，这是任何应用程序最后一次操作过的目录，比如你用Word打开了E:\doc\my.doc这个文件，此时执行这个方法就返回了E:\doc了。</code></pre></li><li><code>System.AppDomain.CurrentDomain.BaseDirectory</code><pre><code>获取程序的基目录。</code></pre></li><li><code>System.Windows.Forms.Application.StartupPath</code><pre><code>获取启动了应用程序的可执行文件的路径。效果和2、5一样。只是5返回的字符串后面多了一个&quot;\&quot;而已。</code></pre></li><li><code>System.Windows.Forms.Application.ExecutablePath</code><pre><code>获取启动了应用程序的可执行文件的路径及文件名，效果和1一样。</code></pre></li><li><code>System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase</code><pre><code>获取和设置包括该应用程序的目录的名称。</code></pre><h2 id="操作环境变量"><a href="#操作环境变量" class="headerlink" title="操作环境变量"></a>操作环境变量</h2></li></ol><p>利用<code>System.Environment.GetEnvironmentVariable()</code>方法可以很方便地取得系统环境变量，如：    <code>System.Environment.GetEnvironmentVariable(&quot;windir&quot;)</code>就可以取得windows系统目录的路径。<br>以下是一些常用的环境变量取值：<br>    System.Environment.GetEnvironmentVariable(“windir”);<br>    System.Environment.GetEnvironmentVariable(“INCLUDE”);<br>    System.Environment.GetEnvironmentVariable(“TMP”);<br>    System.Environment.GetEnvironmentVariable(“TEMP”);<br>    System.Environment.GetEnvironmentVariable(“Path”);</p><h2 id="获取上级目录"><a href="#获取上级目录" class="headerlink" title="获取上级目录"></a>获取上级目录</h2><p>本文实例讲述了C#的path.GetFullPath 获取上级目录实现方法，分享给大家供大家参考。具体实现方法如下：</p><pre><code>string path = new directoryinfo(&quot;../&quot;).fullname;//当前应用程序路径的上级目录</code></pre><p>获取当前目录可以使用</p><pre><code>appdomain.currentdomain.basedirectory</code></pre><p>获取当前目录的上级目录</p><pre><code>path.getfullpath(&quot;..&quot;)</code></pre><p>asp就比.net简单了，直接../就行了</p><pre><code>如果是asp.net直接用server.mappath(&quot;~/bg/&quot;)就可以了。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取当前文件的路径&quot;&gt;&lt;a href=&quot;#获取当前文件的路径&quot; class=&quot;headerlink&quot; title=&quot;获取当前文件的路径&quot;&gt;&lt;/a&gt;获取当前文件的路径&lt;/h2&gt;&lt;p&gt;&lt;code&gt;string str1=Process.GetCurrentProcess().MainModule.FileName;&lt;/code&gt;//可获得当前执行的exe的文件名。&lt;br&gt;&lt;code&gt;string str2=Environment.CurrentDirectory;&lt;/code&gt;//获取和设置当前目录（即该进程从中启动的目录）的完全限定路径。
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="path" scheme="https://luox78.github.io/tags/path/"/>
    
  </entry>
  
  <entry>
    <title>位操作</title>
    <link href="https://luox78.github.io/2018/01/09/Bitwise_operations/"/>
    <id>https://luox78.github.io/2018/01/09/Bitwise_operations/</id>
    <published>2018-01-09T14:30:38.481Z</published>
    <updated>2018-01-12T16:30:46.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a><a href="https://www.youtube.com/watch?v=7jkIUgLC29I" target="_blank" rel="noopener">位操作</a></h2><table><thead><tr><th>符号</th><th>名称</th><th>演示</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td>1 &amp; 1 = 1<br>1 &amp; 0 = 0<br>0 &amp; 0 = 0</td></tr><tr><td>｜</td><td>或</td><td>1｜1 = 1<br>1｜0 = 1<br>0｜0 = 0</td></tr><tr><td>^</td><td>异或</td><td>1 ^ 1 = 0<br>1 ^ 0 = 1<br>0 ^ 0 = 0</td></tr><tr><td>~</td><td>非</td><td>~1 = 0<br>~0 = 1</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>10101 &lt;&lt; 2 =10100(相当于乘2)</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>10101 &gt;&gt; 2 =00101(相当于除2)</td></tr></tbody></table><a id="more"></a><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><h3 id="set-bit"><a href="#set-bit" class="headerlink" title="set_bit"></a>set_bit</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给position位设置为1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> set_bit(<span class="keyword">int</span> i,<span class="keyword">int</span> <span class="built_in">position</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> i | <span class="number">1</span> &lt;&lt; <span class="built_in">position</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="clear-bit"><a href="#clear-bit" class="headerlink" title="clear_bit"></a>clear_bit</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给position位设置为0</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> clear_bit(<span class="keyword">int</span> i,<span class="keyword">int</span> <span class="built_in">position</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> i &amp; ~(<span class="number">1</span> &lt;&lt; <span class="built_in">position</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flip-bit"><a href="#flip-bit" class="headerlink" title="flip_bit"></a>flip_bit</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//翻转position位的值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> flip_bit(<span class="keyword">int</span> i,<span class="keyword">int</span> <span class="built_in">position</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> i ^ (<span class="number">1</span> &lt;&lt; <span class="built_in">position</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="is-bit-set"><a href="#is-bit-set" class="headerlink" title="is_bit_set"></a>is_bit_set</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断position位是否为bit（1）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> is_bit_set(<span class="keyword">int</span> i,<span class="keyword">int</span> <span class="built_in">position</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> i &gt;&gt; <span class="built_in">position</span> &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="modify-bit-见补码"><a href="#modify-bit-见补码" class="headerlink" title="modify_bit(见补码)"></a>modify_bit(见补码)</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">state</span> 为 <span class="number">1</span> 是set_bit ；<span class="keyword">state</span> 为 <span class="number">0</span> 时clear_bit</span><br><span class="line"> static int modify_bit(int i,int position,int <span class="keyword">state</span>)</span><br><span class="line">&#123;</span><br><span class="line">return (i &amp; ~(<span class="number">1</span> <span class="variable">&lt;&lt; position)) | (-state &amp; 1 &lt;&lt; position);</span></span><br><span class="line"><span class="variable">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="补码（二补数）"><a href="#补码（二补数）" class="headerlink" title="补码（二补数）"></a>补码（二补数）</h2><blockquote><p>补码用来表示负数的</p><p><a href="https://zh.wikipedia.org/wiki/二補數" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/二補數</a></p></blockquote><p><strong>表示</strong></p><p>补码使用有符号第一位表示正负，1为负 0为正，所以8有符号位数范围+-127，无符号位数255-0，无符号位数在C#中<code>UInt32</code>代表无符号32位</p><table><thead><tr><th>十进制值</th><th>二进制（二进制补码表示）</th><th>二补（2  - <em>n</em>）2</th></tr></thead><tbody><tr><td>0</td><td>0000 0000</td><td>0000 0000</td></tr><tr><td>1</td><td>0000 0001</td><td>1111 1111</td></tr><tr><td>2</td><td>0000 0010</td><td>1111 1110</td></tr><tr><td>126</td><td>0111 1110</td><td>1000 0010</td></tr><tr><td>127</td><td>0111 1111</td><td>1000 0001</td></tr><tr><td>-128</td><td>1000 0000</td><td>1000 0000</td></tr><tr><td>-127</td><td>1000 0001</td><td>0111 1111</td></tr><tr><td>-126</td><td>1000 0010</td><td>0111 1110</td></tr><tr><td>-2</td><td>1111 1110</td><td>0000 0010</td></tr><tr><td>-1</td><td>1111 1111</td><td>0000 0001</td></tr></tbody></table><p><strong>为什么使用补码</strong></p><blockquote><p>二补数系统的最大优点是可以在加法或减法处理中，不需因为数字的正负而使用不同的计算方式。只要一种加法电路就可以处理各种有号数加法，而且减法可以用一个数加上另一个数的二补数来表示，因此只要有加法电路及二补数电路即可完成各种有号数加法及减法，在电路设计上相当方便。</p></blockquote><p><strong>如何进行表示</strong></p><p>​          -1 原码：0000 0001</p><pre><code>反码：1111 1110</code></pre><p>补码=反码+1：1111 1111</p><p><strong>一种简易的方式，可以找出二进位数字的二补数</strong></p><p>先由最低位元开始找。</p><p>若该位元为0，将二补数对应位元填0，继续找下一位元（较高的位元）。</p><p>若找到第一个为1的位元，将二补数对应位元填1。</p><p>将其馀未转换的位元进行位元反相，将结果填入对应的二补数。</p><p>以0011 1100为例（图中的^表示目前转换的数字，-表示还不确定的位数）：</p><p>   原数字       补码</p><p> 0011 1100  —- —0（此位元为0） </p><p>​                ^</p><p> 0011 1100  —- –00（此位元为0） </p><p>​               ^</p><p> 0011 1100  —- -100（找到第1个为1的位元） </p><p>​             ^</p><p> 0011 1100  1100 0100（其馀位元直接反相） </p><p> ^</p><p>因此其结果为1100 0100</p><h2 id="一些位操作"><a href="#一些位操作" class="headerlink" title="一些位操作"></a>一些位操作</h2><p><strong>一些提示</strong></p><p>C#中不能直接将一串二进制数赋值给int32，可以用一下转换</p><p><code>Convert.ToInt32(&quot;1111&quot;,2)</code>1111的二进制，即15 int32类型</p><p><code>Convert.ToString(15,2)</code>15的二进制字符串，”1111“</p><h3 id="是否为偶数"><a href="#是否为偶数" class="headerlink" title="是否为偶数"></a>是否为偶数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">is_even</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (i &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回有多少位不同"><a href="#返回有多少位不同" class="headerlink" title="返回有多少位不同"></a>返回有多少位不同</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">diff_bit</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Convert.ToString(a ^ b, <span class="number">2</span>).Where(m =&gt; m == <span class="string">'1'</span>).Count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四舍五入2的幂数"><a href="#四舍五入2的幂数" class="headerlink" title="四舍五入2的幂数"></a>四舍五入2的幂数</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static int roundUpToNextPowerOfTwo(int <span class="keyword">x</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">x</span>--<span class="comment">;</span></span><br><span class="line"><span class="comment">x |= x &gt;&gt; 1;  // handle  2 bit </span></span><br><span class="line"><span class="comment">x |= x &gt;&gt; 2;  // handle  4 bit numbers</span></span><br><span class="line"><span class="comment">x |= x &gt;&gt; 4;  // handle  8 bit numbers</span></span><br><span class="line"><span class="comment">x |= x &gt;&gt; 8;  // handle 16 bit numbers</span></span><br><span class="line"><span class="comment">x |= x &gt;&gt; 16; // handle 32 bit numbers</span></span><br><span class="line"><span class="comment">x++;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">return x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="交换两个数-效率比附tmp值低"><a href="#交换两个数-效率比附tmp值低" class="headerlink" title="交换两个数,效率比附tmp值低"></a>交换两个数,效率比附tmp值低</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swapXor</span>(<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> a,<span class="keyword">ref</span> <span class="keyword">int</span> b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a ^= b;</span><br><span class="line">b ^= a;</span><br><span class="line">a ^= b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取绝对值"><a href="#取绝对值" class="headerlink" title="取绝对值"></a>取绝对值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">myabs</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> bit31 = a &gt;&gt; <span class="number">31</span>;</span><br><span class="line"><span class="keyword">return</span> (a ^ bit31) - bit31;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;位操作&quot;&gt;&lt;a href=&quot;#位操作&quot; class=&quot;headerlink&quot; title=&quot;位操作&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7jkIUgLC29I&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;位操作&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;演示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;与&lt;/td&gt;
&lt;td&gt;1 &amp;amp; 1 = 1&lt;br&gt;1 &amp;amp; 0 = 0&lt;br&gt;0 &amp;amp; 0 = 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;｜&lt;/td&gt;
&lt;td&gt;或&lt;/td&gt;
&lt;td&gt;1｜1 = 1&lt;br&gt;1｜0 = 1&lt;br&gt;0｜0 = 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;异或&lt;/td&gt;
&lt;td&gt;1 ^ 1 = 0&lt;br&gt;1 ^ 0 = 1&lt;br&gt;0 ^ 0 = 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;非&lt;/td&gt;
&lt;td&gt;~1 = 0&lt;br&gt;~0 = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;左移&lt;/td&gt;
&lt;td&gt;10101 &amp;lt;&amp;lt; 2 =10100(相当于乘2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;右移&lt;/td&gt;
&lt;td&gt;10101 &amp;gt;&amp;gt; 2 =00101(相当于除2)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="DailyLearning" scheme="https://luox78.github.io/categories/DailyLearning/"/>
    
    
      <category term="bitwiseOperations" scheme="https://luox78.github.io/tags/bitwiseOperations/"/>
    
  </entry>
  
  <entry>
    <title>初识JavaScript05</title>
    <link href="https://luox78.github.io/2018/01/06/JavaScript05/"/>
    <id>https://luox78.github.io/2018/01/06/JavaScript05/</id>
    <published>2018-01-06T15:22:04.269Z</published>
    <updated>2018-01-09T15:47:31.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>通过<code>document.getElementById(&quot;XXX&quot;).style.display</code>隐藏的是真正的使层消失</p><p>通过<code>document.getElementById(&quot;div1&quot;).style.visibility</code>实现的隐藏位置仍然占着，不过没有显示</p><p>以下演示了这一过程<br><a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"hide div via display"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"hide div via visibility"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">style</span>=<span class="string">"background-color: black;height: 200px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).style.display !== <span class="string">"none"</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).style.display = <span class="string">"none"</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).style.display = <span class="string">"block"</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).style.visibility !== <span class="string">"hidden"</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).style.visibility = <span class="string">"hidden"</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).style.visibility = <span class="string">"visible"</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>动态添加层</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;a id=<span class="string">"a1"</span> href=<span class="string">"javascript:void(0)"</span>&gt;luox78&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"> document.getElementById(<span class="string">"a1"</span>).onmouseover= <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> divObj = document.createElement(<span class="string">"div"</span>);</span><br><span class="line">        divObj.style.height = <span class="string">"200px"</span>;</span><br><span class="line">        divObj.style.backgroundColor = <span class="string">"blue"</span>;</span><br><span class="line">        divObj.style.positon = <span class="string">"absolute"</span>;</span><br><span class="line">        divObj.style.left = <span class="keyword">this</span>.offsetLeft + <span class="string">'px'</span>;</span><br><span class="line">        document.body.appendChild(divObj);</span><br><span class="line">        <span class="comment">//删除才创建的层</span></span><br><span class="line">        document.getElementById(<span class="string">"a1"</span>).onmouseleave = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            document.body.removeChild(divObj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>动态隐藏层</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">style</span>=<span class="string">"height: 1000px; border: black 3px solid"</span>&gt;</span></span><br><span class="line">？？？？？？？？？？？？、、、、、、、、、、、、、</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> height = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>).style.height;<span class="comment">//记录一开始的高度</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"><span class="actionscript">        div.style.overflow = <span class="string">"hidden"</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//点击时先判断是否隐藏</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (div.style.display === <span class="string">"none"</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            div.style.display = <span class="string">"block"</span>;</span></span><br><span class="line"><span class="undefined">            div.style.height = height;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> setId = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="built_in">parseInt</span>(div.style.height) &lt; <span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.clearInterval(setId);</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//document.body.removeChild(div);</span></span></span><br><span class="line"><span class="actionscript">                    div.style.display = <span class="string">"none"</span>;<span class="comment">//隐藏</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"div has been removed"</span>);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                div.style.height = (div.offsetHeight - <span class="number">100</span>) + <span class="string">"px"</span>;<span class="comment">//高度减100px</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            100);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>案例：图片跟着鼠标移动</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=<span class="string">"img"</span> src=<span class="string">"TIM截图20180108210345.png"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.onmousemove= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>);</span><br><span class="line">        img.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">        img.style.left = <span class="built_in">window</span>.event.clientX - img.width/<span class="number">2</span> + <span class="string">"px"</span>;</span><br><span class="line">        img.style.top = <span class="built_in">window</span>.event.clientY - img.height/<span class="number">2</span> + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><strong>给标签设置属性值</strong></p><p><code>label.setAttribute(&quot;属性名&quot;,&quot;属性值&quot;);</code>设置属性值</p><p><code>this.getAttribute(&quot;属性名&quot;)</code>获取属性值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> tds = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"td"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tds.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">        tds[i].setAttribute(<span class="string">"innerText"</span>, tds[i].innerText);</span></span><br><span class="line"><span class="actionscript">       tds[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="keyword">this</span>.getAttribute(<span class="string">"innerText"</span>));</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>显示浏览器型号</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">window</span>.navigator.userAgent);<span class="comment">//检测浏览器</span></span><br></pre></td></tr></table></figure><p><strong>文本显示</strong></p><p><code>word-break: break-all;</code>实现自动换行</p><p><code>overflow: hidden;</code>超出边框隐藏</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">"height: 100px; width: 100px; border: black 2px solid; word-break: break-all;overflow: hidden"</span>&gt;</span><br><span class="line">luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78luox78</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="JS中的正则表达式"><a href="#JS中的正则表达式" class="headerlink" title="JS中的正则表达式"></a>JS中的正则表达式</h2><ul><li><p><code>var reg = new RegExp(/Pattern/);</code>先创建正则对象</p><p><code>reg.test(&quot;string&quot;)</code>判断string是否满足pattern</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = new RegExp(/^[0-9]&#123;3&#125;$/);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>(<span class="string">"122"</span>));<span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>(<span class="string">"1221"</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li><p><code>var reg=/pattern/</code>(/pattern/<code>g</code>)全局模式</p><p><code>var result=reg.exec(&quot;string&quot;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg=<span class="string">"cmcc 10086;union 10010"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern=<span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">var</span> res=pattern.exec(msg))&#123;</span><br><span class="line">  alert(res);<span class="comment">//1008610010</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>match(regexp)</code>，非全局模式下相当于调用exec(),全局模式下相当于调用c#的<code>matches()</code>，返回数组中是所有的匹配结果（不包含提取组的信息）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"aaa@163.com"</span>;</span><br><span class="line"><span class="keyword">var</span> regex = /(.+)@(.+)/;</span><br><span class="line"><span class="keyword">var</span> match = s.<span class="built_in">match</span>(regex);</span><br><span class="line">alert(RegExp.<span class="variable">$1</span> + “，服务器：” + RegExp.<span class="variable">$2</span>);（<span class="variable">$1</span>…<span class="variable">$9</span>）</span><br></pre></td></tr></table></figure><p><code>字符串.replace(/pattern/g,”要替换的字符串$1”);</code></p></li></ul><p><strong>模拟Trim()方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'           aaaaaaaaaaa         '</span>;</span><br><span class="line">alert(<span class="string">'---'</span> + exTrim(str) + <span class="string">'-----'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exTrim</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.replace(<span class="regexp">/(^\s+)|(\s+$)/g</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>密码强度</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"tb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                弱</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                中</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                强</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取td</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tds = <span class="built_in">document</span>.getElementById(<span class="string">'tb'</span>).getElementsByTagName(<span class="string">'td'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tds.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                tds[i].style.backgroundColor = <span class="string">'#E6E6E6'</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取密码</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> pwd = <span class="keyword">this</span>.value;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (pwd.length &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//根据密码验证强度</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> result = getPassWord(pwd);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//强度设置颜色</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (result &lt;= <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//弱</span></span></span><br><span class="line"><span class="actionscript">                    tds[<span class="number">0</span>].style.backgroundColor = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//中</span></span></span><br><span class="line"><span class="actionscript">                    tds[<span class="number">0</span>].style.backgroundColor = <span class="string">'orange'</span>;</span></span><br><span class="line"><span class="actionscript">                    tds[<span class="number">1</span>].style.backgroundColor = <span class="string">'orange'</span>;</span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//强</span></span></span><br><span class="line"><span class="actionscript">                    tds[<span class="number">0</span>].style.backgroundColor = <span class="string">'green'</span>;</span></span><br><span class="line"><span class="actionscript">                    tds[<span class="number">1</span>].style.backgroundColor = <span class="string">'green'</span>;</span></span><br><span class="line"><span class="actionscript">                    tds[<span class="number">2</span>].style.backgroundColor = <span class="string">'green'</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getPassWord</span><span class="params">(pwdMsg)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> lvl = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//密码中有数字lvl+1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (pwdMsg.match(<span class="regexp">/\d/</span>)) &#123;</span></span><br><span class="line"><span class="actionscript">            lvl++; <span class="comment">//这么写简单</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//密码中有字母lvl+1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (pwdMsg.match(<span class="regexp">/[a-zA-Z]/</span>)) &#123;</span></span><br><span class="line"><span class="undefined">            lvl++;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//密码中有其他符号lvl+1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (pwdMsg.match(<span class="regexp">/[^0-9a-zA-Z]/</span>)) &#123;</span></span><br><span class="line"><span class="undefined">            lvl++;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//密码小于6位lvl-1</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (pwdMsg.length &lt;= <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="undefined">            lvl--;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> lvl;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;练习&quot;&gt;&lt;a href=&quot;#练习&quot; class=&quot;headerlink&quot; title=&quot;练习&quot;&gt;&lt;/a&gt;练习&lt;/h2&gt;&lt;p&gt;通过&lt;code&gt;document.getElementById(&amp;quot;XXX&amp;quot;).style.display&lt;/code&gt;隐藏的是真正的使层消失&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;document.getElementById(&amp;quot;div1&amp;quot;).style.visibility&lt;/code&gt;实现的隐藏位置仍然占着，不过没有显示&lt;/p&gt;
&lt;p&gt;以下演示了这一过程&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://luox78.github.io/categories/JavaScript/"/>
    
    
      <category term="jsfoundation" scheme="https://luox78.github.io/tags/jsfoundation/"/>
    
  </entry>
  
  <entry>
    <title>05JavaScript深入之作用域链</title>
    <link href="https://luox78.github.io/2018/01/04/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>https://luox78.github.io/2018/01/04/JavaScript深入之作用域链/</id>
    <published>2018-01-04T12:12:50.527Z</published>
    <updated>2018-01-04T12:47:19.899Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文来自<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a></p><p>JavaScript深入系列第五篇，讲述作用链的创建过程，最后结合着变量对象，执行上下文栈，让我们一起捋一捋函数创建和执行的过程中到底发生了什么？</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><p>在<a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">《JavaScript深入之执行上下文栈》</a>中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。</p><p>对于每个执行上下文，都有三个重要属性：</p><ul><li>变量对象(Variable object，VO)</li><li>作用域链(Scope chain)</li><li>this</li></ul><p>今天重点讲讲作用域链。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>在<a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">《JavaScript深入之变量对象》</a>中讲到，当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p><p>下面，让我们以一个函数的创建和激活两个时期来讲解作用域链是如何创建和变化的。</p><h2 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h2><p>在<a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">《JavaScript深入之词法作用域和动态作用域》</a>中讲到，函数的作用域在函数定义的时候就决定了。</p><p>这是因为函数有一个内部属性 [[scope]]，当函数创建的时候，就会保存所有父变量对象到其中，你可以理解 [[scope]] 就是所有父变量对象的层级链，但是注意：[[scope]] 并不代表完整的作用域链！</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数创建时，各自的[[scope]]为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">foo.[[scope]] = [</span><br><span class="line">  globalContext.VO</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">bar.[[scope]] = [</span><br><span class="line">    fooContext.AO,</span><br><span class="line">    globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="函数激活"><a href="#函数激活" class="headerlink" title="函数激活"></a>函数激活</h2><p>当函数激活时，进入函数上下文，创建 VO/AO 后，就会将活动对象添加到作用链的前端。</p><p>这时候执行上下文的作用域链，我们命名为 Scope：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Scope = [AO].concat([[Scope]]);</span><br></pre></td></tr></table></figure><p>至此，作用域链创建完毕。</p><h2 id="捋一捋"><a href="#捋一捋" class="headerlink" title="捋一捋"></a>捋一捋</h2><p>以下面的例子为例，结合着之前讲的变量对象和执行上下文栈，我们来总结一下函数执行上下文中作用域链和变量对象的创建过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope2 = <span class="string">'local scope'</span>;</span><br><span class="line">    <span class="keyword">return</span> scope2;</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure><p>执行过程如下：</p><p>1.checkscope 函数被创建，保存作用域链到 内部属性[[scope]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkscope.[[scope]] = [</span><br><span class="line">    globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>2.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    checkscopeContext,</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>3.checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    Scope: checkscope.[[scope]],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.第三步：将活动对象压入 checkscope 作用域链顶端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: <span class="string">'local scope'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="下一篇文章"><a href="#下一篇文章" class="headerlink" title="下一篇文章"></a>下一篇文章</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener">《JavaScript深入之从ECMAScript规范解读this》</a></p><h2 id="本文相关链接"><a href="#本文相关链接" class="headerlink" title="本文相关链接"></a>本文相关链接</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">《JavaScript深入之词法作用域和动态作用域》</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">《JavaScript深入之执行上下文栈》</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">《JavaScript深入之变量对象》</a></p><h2 id="深入系列"><a href="#深入系列" class="headerlink" title="深入系列"></a>深入系列</h2><p>JavaScript深入系列目录地址：<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a>。</p><p>JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p><p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文来自&lt;a href=&quot;https://github.com/mqyqingfeng/Blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mqyqingfeng/Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaScript深入系列第五篇，讲述作用链的创建过程，最后结合着变量对象，执行上下文栈，让我们一起捋一捋函数创建和执行的过程中到底发生了什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://luox78.github.io/categories/JavaScript/"/>
    
    
      <category term="深入理解JS" scheme="https://luox78.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/"/>
    
  </entry>
  
  <entry>
    <title>03JavaScript深入之执行上下文栈</title>
    <link href="https://luox78.github.io/2018/01/04/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/"/>
    <id>https://luox78.github.io/2018/01/04/JavaScript深入之执行上下文栈/</id>
    <published>2018-01-04T12:12:50.525Z</published>
    <updated>2018-01-04T12:47:14.515Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文来自<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a></p><p>JavaScript深入系列第三篇，讲解执行上下文栈的是如何执行的，也回答了第二篇中的略难的思考题。</p></blockquote><h2 id="顺序执行？"><a href="#顺序执行？" class="headerlink" title="顺序执行？"></a>顺序执行？</h2><a id="more"></a><p>如果要问到 JavaScript 代码执行顺序的话，想必写过 JavaScript 的开发者都会有个直观的印象，那就是顺序执行，毕竟：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo1'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();  <span class="comment">// foo1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo2'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// foo2</span></span><br></pre></td></tr></table></figure><p>然而去看这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo1'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();  <span class="comment">// foo2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo2'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// foo2</span></span><br></pre></td></tr></table></figure><p>打印的结果却是两个 <code>foo2</code>。</p><p>刷过面试题的都知道这是因为 JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”，比如第一个例子中的变量提升，和第二个例子中的函数提升。</p><p>但是本文真正想让大家思考的是：这个“一段一段”中的“段”究竟是怎么划分的呢？</p><p>到底JavaScript引擎遇到一段怎样的代码时才会做“准备工作”呢？</p><h2 id="可执行代码"><a href="#可执行代码" class="headerlink" title="可执行代码"></a>可执行代码</h2><p>这就要说到 JavaScript 的可执行代码(executable code)的类型有哪些了？</p><p>其实很简单，就三种，全局代码、函数代码、eval代码。</p><p>举个例子，当执行到一个函数的时候，就会进行准备工作，这里的“准备工作”，让我们用个更专业一点的说法，就叫做”执行上下文(execution context)”。</p><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>接下来问题来了，我们写的函数多了去了，如何管理创建的那么多执行上下文呢？</p><p>所以 JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文</p><p>为了模拟执行上下文栈的行为，让我们定义执行上下文栈是一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [];</span><br></pre></td></tr></table></figure><p>试想当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，我们用 globalContext 表示它，并且只有当整个应用程序结束的时候，ECStack 才会被清空，所以 ECStack 最底部永远有个 globalContext：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>现在 JavaScript 遇到下面的这段代码了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fun3'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fun3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fun2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1();</span><br></pre></td></tr></table></figure><p>当执行一个函数的时候，就会创建一个执行上下文，并且压入执行上下文栈，当函数执行完毕的时候，就会将函数的执行上下文从栈中弹出。知道了这样的工作原理，让我们来看看如何处理上面这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fun1()</span></span><br><span class="line">ECStack.push(<span class="xml"><span class="tag">&lt;<span class="name">fun1</span>&gt;</span> functionContext);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// fun1中竟然调用了fun2，还要创建fun2的执行上下文</span></span><br><span class="line">ECStack.push(&lt;fun2&gt; functionContext);</span><br><span class="line"></span><br><span class="line">// 擦，fun2还调用了fun3！</span><br><span class="line">ECStack.push(&lt;fun3&gt; functionContext);</span><br><span class="line"></span><br><span class="line">// fun3执行完毕</span><br><span class="line">ECStack.pop();</span><br><span class="line"></span><br><span class="line">// fun2执行完毕</span><br><span class="line">ECStack.pop();</span><br><span class="line"></span><br><span class="line">// fun1执行完毕</span><br><span class="line">ECStack.pop();</span><br><span class="line"></span><br><span class="line">// javascript接着执行下面的代码，但是ECStack底层永远有个globalContext</span><br></pre></td></tr></table></figure><h2 id="解答思考题"><a href="#解答思考题" class="headerlink" title="解答思考题"></a>解答思考题</h2><p>好啦，现在我们已经了解了执行上下文栈是如何处理执行上下文的，所以让我们看看上篇文章<a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">《JavaScript深入之词法作用域和动态作用域》</a>最后的问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">checkscope()();</span><br></pre></td></tr></table></figure><p>两段代码执行的结果一样，但是两段代码究竟有哪些不同呢？</p><p>答案就是执行上下文栈的变化不一样。</p><p>让我们模拟第一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ECStack.push(<span class="xml"><span class="tag">&lt;<span class="name">checkscope</span>&gt;</span> functionContext);</span></span><br><span class="line">ECStack.push(&lt;f&gt; functionContext);</span><br><span class="line">ECStack.pop();</span><br><span class="line">ECStack.pop();</span><br></pre></td></tr></table></figure><p>让我们模拟第二段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ECStack.push(<span class="xml"><span class="tag">&lt;<span class="name">checkscope</span>&gt;</span> functionContext);</span></span><br><span class="line"><span class="xml">ECStack.pop();</span></span><br><span class="line">ECStack.push(&lt;f&gt; functionContext);</span><br><span class="line">ECStack.pop();</span><br></pre></td></tr></table></figure><p>是不是有些不同呢？</p><p>当然了，这样概括的回答执行上下文栈的变化不同，是不是依然有一种意犹未尽的感觉呢，为了更详细讲解两个函数执行上的区别，我们需要探究一下执行上下文到底包含了哪些内容，所以欢迎阅读下一篇《JavaScript深入之变量对象》。</p><h2 id="下一篇文章"><a href="#下一篇文章" class="headerlink" title="下一篇文章"></a>下一篇文章</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">《JavaScript深入之变量对象》</a></p><h2 id="深入系列"><a href="#深入系列" class="headerlink" title="深入系列"></a>深入系列</h2><p>JavaScript深入系列目录地址：<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a>。</p><p>JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p><p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文来自&lt;a href=&quot;https://github.com/mqyqingfeng/Blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mqyqingfeng/Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaScript深入系列第三篇，讲解执行上下文栈的是如何执行的，也回答了第二篇中的略难的思考题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;顺序执行？&quot;&gt;&lt;a href=&quot;#顺序执行？&quot; class=&quot;headerlink&quot; title=&quot;顺序执行？&quot;&gt;&lt;/a&gt;顺序执行？&lt;/h2&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://luox78.github.io/categories/JavaScript/"/>
    
    
      <category term="深入理解JS" scheme="https://luox78.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/"/>
    
  </entry>
  
  <entry>
    <title>07JavaScript深入之执行上下文</title>
    <link href="https://luox78.github.io/2018/01/04/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://luox78.github.io/2018/01/04/JavaScript深入之执行上下文/</id>
    <published>2018-01-04T12:12:50.523Z</published>
    <updated>2018-01-04T12:47:09.114Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文来自<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a></p><p>JavaScript深入系列第七篇，结合之前所讲的四篇文章，以权威指南的demo为例，具体讲解当函数执行的时候，执行上下文栈、变量对象、作用域链是如何变化的。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><a id="more"></a><p>在<a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">《JavaScript深入之执行上下文栈》</a>中讲到，当 JavaScript 代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution contexts)。</p><p>对于每个执行上下文，都有三个重要属性：</p><ul><li>变量对象(Variable object，VO)</li><li>作用域链(Scope chain)</li><li>this</li></ul><p>然后分别在<a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">《JavaScript深入之变量对象》</a>、<a href="https://github.com/mqyqingfeng/Blog/issues/6" target="_blank" rel="noopener">《JavaScript深入之作用域链》</a>、<a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener">《JavaScript深入之从ECMAScript规范解读this》</a>中讲解了这三个属性。</p><p>阅读本文前，如果对以上的概念不是很清楚，希望先阅读这些文章。</p><p>因为，这一篇，我们会结合着所有内容，讲讲执行上下文的具体处理过程。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>在<a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">《JavaScript深入之词法作用域和动态作用域》</a>中，提出这样一道思考题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">checkscope()();</span><br></pre></td></tr></table></figure><p>两段代码都会打印’local scope’。虽然两段代码执行的结果一样，但是两段代码究竟有哪些不同呢？</p><p>紧接着就在下一篇<a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">《JavaScript深入之执行上下文栈》</a>中，讲到了两者的区别在于执行上下文栈的变化不一样，然而，如果是这样笼统的回答，依然显得不够详细，本篇就会详细的解析执行上下文栈和执行上下文的具体变化过程。</p><h2 id="具体执行分析"><a href="#具体执行分析" class="headerlink" title="具体执行分析"></a>具体执行分析</h2><p>我们分析第一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure><p>执行过程如下：</p><p>1.执行全局代码，创建全局执行上下文，全局上下文被压入执行上下文栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>2.全局上下文初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">globalContext = &#123;</span><br><span class="line">    VO: [global, scope, checkscope],</span><br><span class="line">    Scope: [globalContext.VO],</span><br><span class="line">    <span class="keyword">this</span>: globalContext.VO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.初始化的同时，checkscope 函数被创建，保存作用域链到函数的内部属性[[scope]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkscope.[[scope]] = [</span><br><span class="line">  globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>3.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    checkscopeContext,</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>4.checkscope 函数执行上下文初始化：</p><ol><li>复制函数 [[scope]] 属性创建作用域链，</li><li>用 arguments 创建活动对象，</li><li>初始化活动对象，即加入形参、函数声明、变量声明，</li><li>将活动对象压入 checkscope 作用域链顶端。</li></ol><p>同时 f 函数被创建，保存作用域链到 f 函数的内部属性[[scope]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        scope: <span class="literal">undefined</span>,</span><br><span class="line">        f: reference to <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, globalContext.VO],</span><br><span class="line">    <span class="keyword">this</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.执行 f 函数，创建 f 函数执行上下文，f 函数执行上下文被压入执行上下文栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    fContext,</span><br><span class="line">    checkscopeContext,</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>6.f 函数执行上下文初始化, 以下跟第 4 步相同：</p><ol><li>复制函数 [[scope]] 属性创建作用域链</li><li>用 arguments 创建活动对象</li><li>初始化活动对象，即加入形参、函数声明、变量声明</li><li>将活动对象压入 f 作用域链顶端</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    Scope: [AO, checkscopeContext.AO, globalContext.VO],</span><br><span class="line">    <span class="keyword">this</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.f 函数执行，沿着作用域链查找 scope 值，返回 scope 值</p><p>8.f 函数执行完毕，f 函数上下文从执行上下文栈中弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    checkscopeContext,</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>9.checkscope 函数执行完毕，checkscope 执行上下文从执行上下文栈中弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [</span><br><span class="line">    globalContext</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>第二段代码就留给大家去尝试模拟它的执行过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">checkscope()();</span><br></pre></td></tr></table></figure><p>不过，在下一篇《JavaScript深入之闭包》中也会提及这段代码的执行过程。</p><h2 id="下一篇文章"><a href="#下一篇文章" class="headerlink" title="下一篇文章"></a>下一篇文章</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/9" target="_blank" rel="noopener">《JavaScript深入之闭包》</a></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">《JavaScript深入之词法作用域和动态作用域》</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">《JavaScript深入之执行上下文栈》</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">《JavaScript深入之变量对象》</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/6" target="_blank" rel="noopener">《JavaScript深入之作用域链》</a></p><p><a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener">《JavaScript深入之从ECMAScript规范解读this》</a></p><h2 id="重要参考"><a href="#重要参考" class="headerlink" title="重要参考"></a>重要参考</h2><p><a href="https://github.com/kuitos/kuitos.github.io/issues/18" target="_blank" rel="noopener">《一道js面试题引发的思考》</a></p><p>本文写的太好，给了我很多启发。感激不尽！</p><h2 id="深入系列"><a href="#深入系列" class="headerlink" title="深入系列"></a>深入系列</h2><p>JavaScript深入系列目录地址：<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a>。</p><p>JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p><p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文来自&lt;a href=&quot;https://github.com/mqyqingfeng/Blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mqyqingfeng/Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaScript深入系列第七篇，结合之前所讲的四篇文章，以权威指南的demo为例，具体讲解当函数执行的时候，执行上下文栈、变量对象、作用域链是如何变化的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://luox78.github.io/categories/JavaScript/"/>
    
    
      <category term="深入理解JS" scheme="https://luox78.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/"/>
    
  </entry>
  
  <entry>
    <title>06JavaScript深入之从ECMAScript规范解读this</title>
    <link href="https://luox78.github.io/2018/01/04/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BB%8EECMAScript%E8%A7%84%E8%8C%83%E8%A7%A3%E8%AF%BBthis/"/>
    <id>https://luox78.github.io/2018/01/04/JavaScript深入之从ECMAScript规范解读this/</id>
    <published>2018-01-04T12:12:50.507Z</published>
    <updated>2018-01-04T12:46:47.643Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文来自<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a></p><p>JavaScript深入系列第六篇，本篇我们追根溯源，从ECMAScript5规范解读this在函数调用时到底是如何确定的。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">《JavaScript深入之执行上下文栈》</a>中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。<br><a id="more"></a><br>对于每个执行上下文，都有三个重要属性</p><ul><li>变量对象(Variable object，VO)</li><li>作用域链(Scope chain)</li><li>this</li></ul><p>今天重点讲讲 this，然而不好讲。</p><p>……</p><p>因为我们要从 ECMASciript5 规范开始讲起。</p><p>先奉上 ECMAScript 5.1 规范地址：</p><p>英文版：<a href="http://es5.github.io/#x15.1" target="_blank" rel="noopener">http://es5.github.io/#x15.1</a></p><p>中文版：<a href="http://yanhaijing.com/es5/#115" target="_blank" rel="noopener">http://yanhaijing.com/es5/#115</a></p><p>让我们开始了解规范吧！</p><h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p>首先是第 8 章 Types：</p><blockquote><p>Types are further subclassified into ECMAScript language types and specification types.</p><p>An ECMAScript language type corresponds to values that are directly manipulated by an ECMAScript programmer using the ECMAScript language. The ECMAScript language types are Undefined, Null, Boolean, String, Number, and Object.</p><p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types are Reference, List, Completion, Property Descriptor, Property Identifier, Lexical Environment, and Environment Record.</p></blockquote><p>我们简单的翻译一下：</p><p>ECMAScript 的类型分为语言类型和规范类型。</p><p>ECMAScript 语言类型是开发者直接使用 ECMAScript 可以操作的。其实就是我们常说的Undefined, Null, Boolean, String, Number, 和 Object。</p><p>而规范类型相当于 meta-values，是用来用算法描述 ECMAScript 语言结构和 ECMAScript 语言类型的。规范类型包括：Reference, List, Completion, Property Descriptor, Property Identifier, Lexical Environment, 和 Environment Record。</p><p>没懂？没关系，我们只要知道在 ECMAScript 规范中还有一种只存在于规范中的类型，它们的作用是用来描述语言底层行为逻辑。</p><p>今天我们要讲的重点是便是其中的 Reference 类型。它与 this 的指向有着密切的关联。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>那什么又是 Reference ？</p><p>让我们看 8.7 章 The Reference Specification Type：</p><blockquote><p>The Reference type is used to explain the behaviour of such operators as delete, typeof, and the assignment operators. </p></blockquote><p>所以 Reference 类型就是用来解释诸如 delete、typeof 以及赋值等操作行为的。</p><p>抄袭尤雨溪大大的话，就是：</p><blockquote><p>这里的 Reference 是一个 Specification Type，也就是 “只存在于规范里的抽象类型”。它们是为了更好地描述语言的底层行为逻辑才存在的，但并不存在于实际的 js 代码中。</p></blockquote><p>再看接下来的这段具体介绍 Reference 的内容：</p><blockquote><p>A Reference is a resolved name binding. </p><p>A Reference consists of three components, the base value, the referenced name and the Boolean valued strict reference flag. </p><p>The base value is either undefined, an Object, a Boolean, a String, a Number, or an environment record (10.2.1). </p><p>A base value of undefined indicates that the reference could not be resolved to a binding. The referenced name is a String.</p></blockquote><p>这段讲述了 Reference 的构成，由三个组成部分，分别是：</p><ul><li>base value</li><li>referenced name</li><li>strict reference</li></ul><p>可是这些到底是什么呢？</p><p>我们简单的理解的话：</p><p>base value 就是属性所在的对象或者就是 EnvironmentRecord，它的值只可能是 undefined, an Object, a Boolean, a String, a Number, or an environment record 其中的一种。</p><p>referenced name 就是属性的名称。</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的Reference是：</span></span><br><span class="line"><span class="keyword">var</span> fooReference = &#123;</span><br><span class="line">    base: EnvironmentRecord,</span><br><span class="line">    name: <span class="string">'foo'</span>,</span><br><span class="line">    strict: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">foo.bar(); <span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bar对应的Reference是：</span></span><br><span class="line"><span class="keyword">var</span> BarReference = &#123;</span><br><span class="line">    base: foo,</span><br><span class="line">    propertyName: <span class="string">'bar'</span>,</span><br><span class="line">    strict: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而且规范中还提供了获取 Reference 组成部分的方法，比如 GetBase 和 IsPropertyReference。</p><p>这两个方法很简单，简单看一看：</p><p>1.GetBase</p><blockquote><p>GetBase(V). Returns the base value component of the reference V.</p></blockquote><p>返回 reference 的 base value。</p><p>2.IsPropertyReference</p><blockquote><p>IsPropertyReference(V). Returns true if either the base value is an object or HasPrimitiveBase(V) is true; otherwise returns false.</p></blockquote><p>简单的理解：如果 base value 是一个对象，就返回true。</p><h2 id="GetValue"><a href="#GetValue" class="headerlink" title="GetValue"></a>GetValue</h2><p>除此之外，紧接着在 8.7.1 章规范中就讲了一个用于从 Reference 类型获取对应值的方法： GetValue。</p><p>简单模拟 GetValue 的使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fooReference = &#123;</span><br><span class="line">    base: EnvironmentRecord,</span><br><span class="line">    name: <span class="string">'foo'</span>,</span><br><span class="line">    strict: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">GetValue(fooReference) <span class="comment">// 1;</span></span><br></pre></td></tr></table></figure><p>GetValue 返回对象属性真正的值，但是要注意：</p><p><strong>调用 GetValue，返回的将是具体的值，而不再是一个 Reference</strong></p><p>这个很重要，这个很重要，这个很重要。</p><h2 id="如何确定this的值"><a href="#如何确定this的值" class="headerlink" title="如何确定this的值"></a>如何确定this的值</h2><p>关于 Reference 讲了那么多，为什么要讲 Reference 呢？到底 Reference 跟本文的主题 this 有哪些关联呢？如果你能耐心看完之前的内容，以下开始进入高能阶段：</p><p>看规范 11.2.3 Function Calls：</p><p>这里讲了当函数调用的时候，如何确定 this 的取值。</p><p>只看第一步、第六步、第七步：</p><blockquote><p>1.Let <em>ref</em> be the result of evaluating MemberExpression.</p><p>6.If Type(<em>ref</em>) is Reference, then</p><pre><code>a.If IsPropertyReference(ref) is true, then    i.Let thisValue be GetBase(ref).b.Else, the base of ref is an Environment Record    i.Let thisValue be the result of calling the ImplicitThisValue concrete method of GetBase(ref).</code></pre><p>7.Else, Type(<em>ref</em>) is not Reference.</p><pre><code>a. Let thisValue be undefined.</code></pre></blockquote><p>让我们描述一下：</p><p>1.计算 MemberExpression 的结果赋值给 ref</p><p>2.判断 ref 是不是一个 Reference 类型</p><pre><code>2.1 如果 ref 是 Reference，并且 IsPropertyReference(ref) 是 true, 那么 this 的值为 GetBase(ref)2.2 如果 ref 是 Reference，并且 base value 值是 Environment Record, 那么this的值为 ImplicitThisValue(ref)2.3 如果 ref 不是 Reference，那么 this 的值为 undefined</code></pre><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>让我们一步一步看：</p><ol><li>计算 MemberExpression 的结果赋值给 ref</li></ol><p>什么是 MemberExpression？看规范 11.2 Left-Hand-Side Expressions：</p><p>MemberExpression :</p><ul><li>PrimaryExpression // 原始表达式 可以参见《JavaScript权威指南第四章》</li><li>FunctionExpression    // 函数定义表达式</li><li>MemberExpression [ Expression ] // 属性访问表达式</li><li>MemberExpression . IdentifierName // 属性访问表达式</li><li>new MemberExpression Arguments    // 对象创建表达式</li></ul><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// MemberExpression 是 foo</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo()(); <span class="comment">// MemberExpression 是 foo()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.bar(); <span class="comment">// MemberExpression 是 foo.bar</span></span><br></pre></td></tr></table></figure><p>所以简单理解 MemberExpression 其实就是()左边的部分。</p><p>2.判断 ref 是不是一个 Reference 类型。</p><p>关键就在于看规范是如何处理各种 MemberExpression，返回的结果是不是一个Reference类型。</p><p>举最后一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">2</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar());</span><br><span class="line"><span class="comment">//示例2</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar)());</span><br><span class="line"><span class="comment">//示例3</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar = foo.bar)());</span><br><span class="line"><span class="comment">//示例4</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="literal">false</span> || foo.bar)());</span><br><span class="line"><span class="comment">//示例5</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar, foo.bar)());</span><br></pre></td></tr></table></figure><h3 id="foo-bar"><a href="#foo-bar" class="headerlink" title="foo.bar()"></a>foo.bar()</h3><p>在示例 1 中，MemberExpression 计算的结果是 foo.bar，那么 foo.bar 是不是一个 Reference 呢？</p><p>查看规范 11.2.1 Property Accessors，这里展示了一个计算的过程，什么都不管了，就看最后一步：</p><blockquote><p>Return a value of type Reference whose base value is baseValue and whose referenced name is propertyNameString, and whose strict mode flag is strict.</p></blockquote><p>我们得知该表达式返回了一个 Reference 类型！</p><p>根据之前的内容，我们知道该值为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Reference = &#123;</span><br><span class="line">  base: foo,</span><br><span class="line">  name: <span class="string">'bar'</span>,</span><br><span class="line">  strict: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来按照 2.1 的判断流程走：</p><blockquote><p>2.1 如果 ref 是 Reference，并且 IsPropertyReference(ref) 是 true, 那么 this 的值为 GetBase(ref)</p></blockquote><p>该值是 Reference 类型，那么 IsPropertyReference(ref) 的结果是多少呢？</p><p>前面我们已经铺垫了 IsPropertyReference 方法，如果 base value 是一个对象，结果返回 true。</p><p>base value 为 foo，是一个对象，所以 IsPropertyReference(ref) 结果为 true。</p><p>这个时候我们就可以确定 this 的值了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> = GetBase(ref)，</span><br></pre></td></tr></table></figure><p>GetBase 也已经铺垫了，获得 base value 值，这个例子中就是foo，所以 this 的值就是 foo ，示例1的结果就是 2！</p><p>唉呀妈呀，为了证明 this 指向foo，真是累死我了！但是知道了原理，剩下的就更快了。</p><h3 id="foo-bar-1"><a href="#foo-bar-1" class="headerlink" title="(foo.bar)()"></a>(foo.bar)()</h3><p>看示例2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((foo.bar)());</span><br></pre></td></tr></table></figure><p>foo.bar 被 () 包住，查看规范 11.1.6 The Grouping Operator </p><p>直接看结果部分：</p><blockquote><p>Return the result of evaluating Expression. This may be of type Reference.</p><p>NOTE This algorithm does not apply GetValue to the result of evaluating Expression. </p></blockquote><p>实际上 () 并没有对 MemberExpression 进行计算，所以其实跟示例 1 的结果是一样的。</p><h3 id="foo-bar-foo-bar"><a href="#foo-bar-foo-bar" class="headerlink" title="(foo.bar = foo.bar)()"></a>(foo.bar = foo.bar)()</h3><p>看示例3，有赋值操作符，查看规范 11.13.1 Simple Assignment ( = ): </p><p>计算的第三步：</p><blockquote><p>3.Let rval be GetValue(rref).</p></blockquote><p>因为使用了 GetValue，所以返回的值不是 Reference 类型，</p><p>按照之前讲的判断逻辑：</p><blockquote><p>2.3 如果 ref 不是Reference，那么 this 的值为 undefined</p></blockquote><p>this 为 undefined，非严格模式下，this 的值为 undefined 的时候，其值会被隐式转换为全局对象。</p><h3 id="false-foo-bar"><a href="#false-foo-bar" class="headerlink" title="(false || foo.bar)()"></a>(false || foo.bar)()</h3><p>看示例4，逻辑与算法，查看规范 11.11 Binary Logical Operators：</p><p>计算第二步：</p><blockquote><p>2.Let lval be GetValue(lref).</p></blockquote><p>因为使用了 GetValue，所以返回的不是 Reference 类型，this 为 undefined</p><h3 id="foo-bar-foo-bar-1"><a href="#foo-bar-foo-bar-1" class="headerlink" title="(foo.bar, foo.bar)()"></a>(foo.bar, foo.bar)()</h3><p>看示例5，逗号操作符，查看规范11.14 Comma Operator ( , )</p><p>计算第二步：</p><blockquote><p>2.Call GetValue(lref).</p></blockquote><p>因为使用了 GetValue，所以返回的不是 Reference 类型，this 为 undefined</p><h3 id="揭晓结果"><a href="#揭晓结果" class="headerlink" title="揭晓结果"></a>揭晓结果</h3><p>所以最后一个例子的结果是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">2</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例1</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar()); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//示例2</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar)()); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//示例3</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar = foo.bar)()); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">//示例4</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="literal">false</span> || foo.bar)()); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">//示例5</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar, foo.bar)()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>注意：以上是在非严格模式下的结果，严格模式下因为 this 返回 undefined，所以示例 3 会报错。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>最最后，忘记了一个最最普通的情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>MemberExpression 是 foo，解析标识符，查看规范 10.3.1 Identifier Resolution，会返回一个 Reference 类型的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fooReference = &#123;</span><br><span class="line">    base: EnvironmentRecord,</span><br><span class="line">    name: <span class="string">'foo'</span>,</span><br><span class="line">    strict: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来进行判断：</p><blockquote><p>2.1 如果 ref 是 Reference，并且 IsPropertyReference(ref) 是 true, 那么 this 的值为 GetBase(ref)</p></blockquote><p>因为 base value 是 EnvironmentRecord，并不是一个 Object 类型，还记得前面讲过的 base value 的取值可能吗？ 只可能是 undefined, an Object, a Boolean, a String, a Number, 和 an environment record 中的一种。</p><p>IsPropertyReference(ref) 的结果为 false，进入下个判断：</p><blockquote><p>2.2 如果 ref 是 Reference，并且 base value 值是 Environment Record, 那么this的值为 ImplicitThisValue(ref)</p></blockquote><p>base value 正是 Environment Record，所以会调用 ImplicitThisValue(ref)</p><p>查看规范 10.2.1.1.6，ImplicitThisValue 方法的介绍：该函数始终返回 undefined。</p><p>所以最后 this 的值就是 undefined。</p><h2 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"></a>多说一句</h2><p>尽管我们可以简单的理解 this 为调用函数的对象，如果是这样的话，如何解释下面这个例子呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">2</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log((<span class="literal">false</span> || foo.bar)()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>此外，又如何确定调用函数的对象是谁呢？在写文章之初，我就面临着这些问题，最后还是放弃从多个情形下给大家讲解 this 指向的思路，而是追根溯源的从 ECMASciript 规范讲解 this 的指向，尽管从这个角度写起来和读起来都比较吃力，但是一旦多读几遍，明白原理，绝对会给你一个全新的视角看待 this 。而你也就能明白，尽管 foo() 和 (foo.bar = foo.bar)() 最后结果都指向了 undefined，但是两者从规范的角度上却有着本质的区别。</p><p>此篇讲解执行上下文的 this，即便不是很理解此篇的内容，依然不影响大家了解执行上下文这个主题下其他的内容。所以，依然可以安心的看下一篇文章。</p><h2 id="下一篇文章"><a href="#下一篇文章" class="headerlink" title="下一篇文章"></a>下一篇文章</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/8" target="_blank" rel="noopener">《JavaScript深入之执行上下文》</a></p><h2 id="深入系列"><a href="#深入系列" class="headerlink" title="深入系列"></a>深入系列</h2><p>JavaScript深入系列目录地址：<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a>。</p><p>JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p><p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文来自&lt;a href=&quot;https://github.com/mqyqingfeng/Blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/mqyqingfeng/Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaScript深入系列第六篇，本篇我们追根溯源，从ECMAScript5规范解读this在函数调用时到底是如何确定的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://github.com/mqyqingfeng/Blog/issues/4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《JavaScript深入之执行上下文栈》&lt;/a&gt;中讲到，当JavaScript代码执行一段可执行代码(executable code)时，会创建对应的执行上下文(execution context)。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://luox78.github.io/categories/JavaScript/"/>
    
    
      <category term="深入理解JS" scheme="https://luox78.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS/"/>
    
  </entry>
  
</feed>
