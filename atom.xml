<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luox78</title>
  
  <subtitle>Daily Learning</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luox78.github.io/"/>
  <updated>2018-03-11T14:13:31.474Z</updated>
  <id>https://luox78.github.io/</id>
  
  <author>
    <name>luox78</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模型绑定架构</title>
    <link href="https://luox78.github.io/2018/03/11/%E6%A8%A1%E5%9E%8B%E7%BB%91%E5%AE%9A%E6%9E%B6%E6%9E%84/"/>
    <id>https://luox78.github.io/2018/03/11/模型绑定架构/</id>
    <published>2018-03-11T08:39:44.792Z</published>
    <updated>2018-03-11T14:13:31.474Z</updated>
    
    <content type="html"><![CDATA[<p> <em>不怕慢，就怕听—–孔子</em></p><h2 id="模型绑定"><a href="#模型绑定" class="headerlink" title="模型绑定"></a>模型绑定</h2><p>模型绑定是指将通过HTTP请求说提交的值绑定到控制器所用的参数的过程。</p><h3 id="模型绑定的基础结构"><a href="#模型绑定的基础结构" class="headerlink" title="模型绑定的基础结构"></a>模型绑定的基础结构</h3><p>模型绑定逻辑是封装在一个特殊的模型绑定器类中的。</p><p>1 分析方法的签名</p><p>调用程序会将控制器名称拓展成一个类名称，并将操作名称解析成控制器上的方法名称，然后，调用程序会收集进行方法调用所需的所有值，与此同时会查看方法的签名，试图找出签名中每个参数所需的输入值。</p><p>2 为类型获取绑定器<a id="more"></a></p><p>操作调用程序知道每个参数的名称及其类型之后，根据每一个参数，调用程序都会获得一个模型绑定器对象，将请求上下文中的值绑定到对应的参数上去。</p><p>ASP.NET MVC使用DefaultModelBinder类的默认模型绑定类，它实现IModelBinder接口</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IModelBinder</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>使用指定的控制器上下文和绑定上下文将模型绑定到一个值。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>绑定值。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="controllerContext"&gt;</span>控制器上下文。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="bindingContext"&gt;</span>绑定上下文。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">object</span> <span class="title">BindModel</span>(<span class="params">ControllerContext controllerContext, ModelBindingContext bindingContext</span>)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="默认模型绑定器"><a href="#默认模型绑定器" class="headerlink" title="默认模型绑定器"></a>默认模型绑定器</h3><p>默认模型绑定器使用基于规则的逻辑，将提交的值得名称与控制器中方法的参数名称相匹配。DefaultModelBinder类知道如何处理简单和复杂的类型，因此，默认模型绑定器在大部分时间都能正常运行。</p><h4 id="绑定简单类型"><a href="#绑定简单类型" class="headerlink" title="绑定简单类型"></a>绑定简单类型</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> :</span> Controller</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Test</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>通过<code>http://localhost:14303/Home/test?num=1</code>就可以将1传入到参数num上</p><h4 id="处理可选值"><a href="#处理可选值" class="headerlink" title="处理可选值"></a>处理可选值</h4><p>由于传递无效值而抛出的异常不会在控制器级别被检测出来，这意味着你不可能使用trycatch捕获他。</p><p>如果默认模型绑定器不能找到与参数相匹配的值，那么将null放入参数字典。</p><p>一般会与值类型一般通过使用可空类型或者赋默认值的方法避免抛出异常</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> :</span> Controller</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Test</span><span class="params">(<span class="keyword">int</span>? num)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> :</span> Controller</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Test</span><span class="params">(<span class="keyword">int</span> num=<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>默认模型绑定器可以映射所有的简单类型，如string，int，double，decimal，boolean，datetime，集合。在url中便是boolean需要借助true false字符串。</p><h4 id="值提供程序和优先级"><a href="#值提供程序和优先级" class="headerlink" title="值提供程序和优先级"></a>值提供程序和优先级</h4><p>默认模型绑定器会使用所有已注册的值所提供程序将提交值于方法参数进行匹配。</p><p>下表既列出了获取值得途径同时也是获取值得优先级</p><table><thead><tr><th>优先级</th><th>集合</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>Form</td><td>表单即报文头提交的值</td></tr><tr><td>2</td><td>RouteData</td><td>Url路由中的值</td></tr><tr><td>3</td><td>QueryString</td><td>Url中提交的值</td></tr><tr><td>4</td><td>Files</td><td>如果有的话，为上传文件的值</td></tr></tbody></table><p>例子：假设你的路由是下面这个</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">routes.MapRoute(</span><br><span class="line"><span class="symbol">                name:</span> <span class="string">"Default"</span>,</span><br><span class="line"><span class="symbol">                url:</span> <span class="string">"&#123;controller&#125;/&#123;action&#125;/test/&#123;number&#125;"</span>,</span><br><span class="line"><span class="symbol">                defaults:</span> <span class="class">new </span>&#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, number = <span class="number">5</span> &#125;</span><br><span class="line">            );</span><br></pre></td></tr></table></figure><p>提交的url：/Home/Index/test/10?number=1</p><p>实际获得number值是10，因为routedata的优先级比querystring的高</p><h4 id="绑定复杂类型"><a href="#绑定复杂类型" class="headerlink" title="绑定复杂类型"></a>绑定复杂类型</h4><p>可以在方法签名上列出的参数没有数目的上限。但是，一个容器类往往比一个各种参数的长列表好。</p><p>可以通过强类型页面的html帮助器，也可以直接通过name提交的数据都会被绑定到容器类属性中</p><p>，不区分大小写</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> Name&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>url:Home/Index?name=luox78 ，照样绑定到 <code>public ActionResult Index(Test t)</code>上</p><h4 id="绑定集合"><a href="#绑定集合" class="headerlink" title="绑定集合"></a>绑定集合</h4><p>controller</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public ActionResult Test(IList&lt;string&gt; email)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> View(new List&lt;string&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"1111@qq.com"</span>,</span><br><span class="line">                <span class="string">"1111@qq.com"</span>,</span><br><span class="line">                <span class="string">"1111@qq.com"</span>,</span><br><span class="line">                <span class="string">"1111@qq.com"</span>,</span><br><span class="line">                <span class="string">"1111@qq.com"</span>,</span><br><span class="line">                <span class="string">"1111@qq.com"</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>cshtml</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@using (Html.BeginForm())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Model)</span><br><span class="line">    &#123;</span><br><span class="line">        &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"email"</span> value=<span class="string">"@item"</span>/&gt;</span><br><span class="line">        &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"submit"</span>/&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绑定带复杂类型的集合"><a href="#绑定带复杂类型的集合" class="headerlink" title="绑定带复杂类型的集合"></a>绑定带复杂类型的集合</h4><p>复杂类型</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="keyword">public</span> Test Test &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>controller</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionResult Test2(IList&lt;Person&gt; persons)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> View(<span class="keyword">new</span> <span class="type">List</span>&lt;Person&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Person</span>() &#123;Name = <span class="string">"luox78"</span>,Test = <span class="keyword">new</span> <span class="type">Test</span>() &#123;Message = <span class="string">"hello"</span>&#125;&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Person</span>() &#123;Name = <span class="string">"luox78"</span>,Test = <span class="keyword">new</span> <span class="type">Test</span>() &#123;Message = <span class="string">"hello"</span>&#125;&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Person</span>() &#123;Name = <span class="string">"luox78"</span>,Test = <span class="keyword">new</span> <span class="type">Test</span>() &#123;Message = <span class="string">"hello"</span>&#125;&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Person</span>() &#123;Name = <span class="string">"luox78"</span>,Test = <span class="keyword">new</span> <span class="type">Test</span>() &#123;Message = <span class="string">"hello"</span>&#125;&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Person</span>() &#123;Name = <span class="string">"luox78"</span>,Test = <span class="keyword">new</span> <span class="type">Test</span>() &#123;Message = <span class="string">"hello"</span>&#125;&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>要想模型绑定成功，需要使用的是Prefix[index]给name，prefix是控制器方法签名形参名称</p><p>cshtml</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@model IList&lt;_02.Controllers.Person&gt;</span><br><span class="line"></span><br><span class="line">@using (Html.BeginForm())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> Model)</span><br><span class="line">    &#123;</span><br><span class="line">        &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"persons[@index].Name"</span> value=<span class="string">"@item.Name"</span> /&gt;</span><br><span class="line">        &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"persons[@index].Test.Message"</span> value=<span class="string">"@item.Test.Message"</span> /&gt;</span><br><span class="line">        index++;</span><br><span class="line">        &lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用自定义模型绑定器来实现复杂类型的绑定</p><h4 id="绑定上传的文件内容"><a href="#绑定上传的文件内容" class="headerlink" title="绑定上传的文件内容"></a>绑定上传的文件内容</h4><p>上传文件参数类型为HttpPostedFileBase</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public ActionResult Add(AddViewModel model)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(model.<span class="keyword">file</span> != null)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">var</span> <span class="keyword">file</span> = model.<span class="keyword">file</span>;</span><br><span class="line">               <span class="keyword">var</span> fileName = Path.Combine(Server.MapPath(<span class="string">"/"</span>), Path.GetFileName(<span class="keyword">file</span>.FileName));</span><br><span class="line">               <span class="keyword">file</span>.SaveAs(fileName);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">View</span>(); </span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>默认情况下，Asp.net请求不超过4M，包含所有的上传，报头，正文，在web.config里面可以添加httpRuntime的maxRequestLength配置上限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.web</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">httpRuntime</span> <span class="attr">targetFramework</span>=<span class="string">"4.5.2"</span> <span class="attr">maxRequestLength</span>=<span class="string">"6000"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">system.web</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上传多个文件 属性<code>IList&lt;HttpPostedFileBase&gt; Picts{get;set;}</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"file"</span> <span class="attribute">id</span>=<span class="string">"picts[0]"</span> <span class="attribute">name</span>=<span class="string">"picts[0]"</span> /&gt;</span><br><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"file"</span> <span class="attribute">id</span>=<span class="string">"picts[1]"</span> <span class="attribute">name</span>=<span class="string">"picts[1]"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="默认绑定器可以自定义的部分"><a href="#默认绑定器可以自定义的部分" class="headerlink" title="默认绑定器可以自定义的部分"></a>默认绑定器可以自定义的部分</h3><p>Bind特性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>Prefix</td><td>字符串属性，它表示用户绑定器解析的必须在提交值名称中发现的前缀。默认值为空字符串</td></tr><tr><td>Exclude</td><td>获取或设置不允许绑定的属性名称列表，用逗号隔开</td></tr><tr><td>Include</td><td>获取或设置允许绑定的属性名称列表，用逗号隔开</td></tr></tbody></table><h4 id="创建属性白名单"><a href="#创建属性白名单" class="headerlink" title="创建属性白名单"></a>创建属性白名单</h4><p>使用模型绑定器会存在潜在风险，就是默认模型绑定器会将所有的公共属性都填入复杂类型中去。</p><p>Person class</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ForTest &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只接受ForTest提交值</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionResult Test3([Bind(Include = <span class="string">"ForTest"</span>)]Person person)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="function"><span class="keyword">return</span> <span class="title">View</span><span class="params">()</span></span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="创建属性黑名单"><a href="#创建属性黑名单" class="headerlink" title="创建属性黑名单"></a>创建属性黑名单</h4><p>只排出ForTest</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionResult Test3([Bind(Exclude = <span class="string">"ForTest"</span>)]Person person)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="function"><span class="keyword">return</span> <span class="title">View</span><span class="params">()</span></span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="加前缀的参数别名"><a href="#加前缀的参数别名" class="headerlink" title="加前缀的参数别名"></a>加前缀的参数别名</h4><p>模型绑定器会强制让方法参数名与提交的参数一直，Prefix可以改变这一点</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Test</span>(<span class="params">[Bind(Prefix=<span class="string">"email"</span></span>)]IList&lt;<span class="keyword">string</span>&gt; emails)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="高级模型绑定"><a href="#高级模型绑定" class="headerlink" title="高级模型绑定"></a>高级模型绑定</h2><p>创建自己的模型绑定器可以直接实现IModelBinder接口或者继承自DefaultModelBinder</p><p>如果继承自DefaultModelBinder，一般只要重写CreateModel实现自己的模型创建</p><p>注册自定义绑定器</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Application_Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  ModelBinders.Binders[<span class="keyword">typeof</span>(MyBinder)]=<span class="keyword">new</span> MyBinder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params">[ModelBinder(<span class="keyword">typeof</span>(MyBinder</span>))] Model model)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>ModelBinder.Binders.DefaultBinder = new MyModelBinder();</code>重写默认绑定器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;em&gt;不怕慢，就怕听—–孔子&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;模型绑定&quot;&gt;&lt;a href=&quot;#模型绑定&quot; class=&quot;headerlink&quot; title=&quot;模型绑定&quot;&gt;&lt;/a&gt;模型绑定&lt;/h2&gt;&lt;p&gt;模型绑定是指将通过HTTP请求说提交的值绑定到控制器所用的参数的过程。&lt;/p&gt;
&lt;h3 id=&quot;模型绑定的基础结构&quot;&gt;&lt;a href=&quot;#模型绑定的基础结构&quot; class=&quot;headerlink&quot; title=&quot;模型绑定的基础结构&quot;&gt;&lt;/a&gt;模型绑定的基础结构&lt;/h3&gt;&lt;p&gt;模型绑定逻辑是封装在一个特殊的模型绑定器类中的。&lt;/p&gt;
&lt;p&gt;1 分析方法的签名&lt;/p&gt;
&lt;p&gt;调用程序会将控制器名称拓展成一个类名称，并将操作名称解析成控制器上的方法名称，然后，调用程序会收集进行方法调用所需的所有值，与此同时会查看方法的签名，试图找出签名中每个参数所需的输入值。&lt;/p&gt;
&lt;p&gt;2 为类型获取绑定器
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="ASP.NET MVC5 编程实战" scheme="https://luox78.github.io/tags/ASP-NET-MVC5-%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>知识点02</title>
    <link href="https://luox78.github.io/2018/03/10/%E7%9F%A5%E8%AF%86%E7%82%B902/"/>
    <id>https://luox78.github.io/2018/03/10/知识点02/</id>
    <published>2018-03-10T13:14:30.015Z</published>
    <updated>2018-03-11T08:15:49.215Z</updated>
    
    <content type="html"><![CDATA[<p>属性的本质是字段+方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> System;</span><br><span class="line">    <span class="keyword">using</span> System.Diagnostics;</span><br><span class="line">    <span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">CompilerGenerated, DebuggerBrowsable(DebuggerBrowsableState.Never)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> &lt;Name&gt;k__BackingField;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>索引器的本质是名为Item的属性，并且索引器可以重载，不能再写一个名为item的属性<a id="more"></a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> <span class="keyword">this</span>[<span class="keyword">int</span> index]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> Names[index]; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; Names[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> Item[<span class="keyword">int</span> index]&#123;</span><br><span class="line">  set_Item(<span class="keyword">int</span>,<span class="keyword">string</span>):<span class="keyword">void</span></span><br><span class="line">  get_Item(<span class="keyword">int</span>):<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>面向对象的三大特性：封装，继承，多态</p><p>类：类是现实物体的抽象，是一种数据类型，由用户定义，由构造函数，字段，属性，事件，方法组成</p><p>对象：对象是具体的，包含数据的，类的具体实例。</p><p>全局（静态）变量，编译器会赋默认值，字段必须使用前赋值，局部变量优先被使用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">//全局变量可以不初始化直接使用，引用类型默认值是null，值类型是0</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> str;</span><br><span class="line">       <span class="comment">//字段使用前必须初始化</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">string</span> str3;</span><br><span class="line"> </span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">string</span> str2 = <span class="literal">null</span>;</span><br><span class="line">           Console.WriteLine(str2);</span><br><span class="line"> </span><br><span class="line">           <span class="comment">//string str = "luox78";局部变量会被优先使用</span></span><br><span class="line">           Console.WriteLine(str);</span><br><span class="line"> </span><br><span class="line">           <span class="comment">//Console.WriteLine(str3);报错</span></span><br><span class="line">           Console.ReadKey();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><p>LSP里氏替换原则:父类可以指向子类创建的对象</p><p><strong>方法签名一般指方法名和参数，不包含返回值</strong></p><hr><p>访问修饰符</p><p>public                    无限制</p><p>protected               子类可以访问 </p><p>private                   本类才能访问</p><p>internal                  当前程序集内部，跨项目引用就不可以了</p><p>protected internal    同时具备两者性质，或的关系</p><p>类里面不写访问修饰符默认是private</p><p>类本身不写访问修饰符默认是internal</p><p>直接在命名空间下的类只能定义成public和internal</p><hr><p>构造函数：</p><p>构造函数不能被继承</p><p>通过this调用自身构造函数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Student(<span class="keyword">int</span> <span class="built_in">height</span>):<span class="keyword">this</span>()<span class="comment">//this用来调用自己类里面的构造函数</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.Height = <span class="built_in">height</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>通过base调用父类构造函数</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="keyword">int</span> sid ,<span class="keyword">string</span> name,<span class="keyword">int</span> age</span>):<span class="title">base</span>(<span class="params">name,age</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.SID = SID;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><hr><p>多态</p><ul><li><p>通过virtual关键词实现重载，子类通过override重写方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           Console.WriteLine(<span class="string">"Person做的"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">DoSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="comment">//base.DoSomething();</span></span><br><span class="line">           Console.WriteLine(<span class="string">"Student做的"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>base.DoSomething();会将父类方法也调用</p></li><li><p>abstract，子类重写父类中的方法。</p><p>抽象类特点：</p><ol><li>抽象类不能实例化 用于继承</li><li>抽象成员不能有任何实现</li><li>抽象成员必须包含在抽象类中</li><li>抽象类可以有实例成员，也可以有抽象成员</li><li>子类必须重写抽象方法</li></ol></li><li><p>接口，实现接口的类，将接口中的方法实现</p></li></ul><hr><p>静态构造函数</p><p>类中的静态变量初始化默认使用的静态构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class1</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> name = <span class="string">"luox78"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.cctor</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">Class1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    name = <span class="string">"luox78"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态构造函数特点：</p><ol><li>类中的静态成员在第一次使用类的时候进行初始化</li><li>静态构造函数只执行一次无论是对象初始化还是直接给静态变量赋值，静态构造函数都只执行一次</li><li>静态构造函数也不能传参数</li><li>静态构造函数不需要访问修饰符，因为是编译器调用，默认为private</li></ol><hr><p>值类型与引用类型</p><p>值类型：</p><p>存储时大小固定，存在栈（连续的空间，因为大小固定所以可以算出连续空间）上</p><p>int、char、double、float、long、short、byte、bool、enum、struct、decimal</p><p>值类型都是派生自ValueType</p><p>值类型不能继承，只能实现接口.</p><p>引用类型：</p><p>string、数组、类（子定义数据类型）、接口、委托、</p><p>int[]n={1,2,3};//引用类型。</p><p>引用类型都派生自：Object</p><p>引用类型可以继承（类之间可以继承）</p><p>枚举</p><p>一组和数值有关的常量</p><p>enum Gender { Male,Female}</p><p>enum Weeks { 星期日=0,星期一,}</p><p>把字符串转换成枚举Gender g = (Gender)Enum.Parse(typeof(Gender),”Male”);</p><p>结构</p><p>就是小类，值类型</p><p>不能继承类</p><p>可以实现接口</p><p>不能有显示无参构造函数(隐式)</p><p>结构中不能给字段赋初始值</p><p>引用类型定义的都是引用，传递时都是栈上面的地址</p><p>按引用传递是传递的栈的地址            </p><p>按值传递传递的是栈中内容的拷贝</p><p>ref关键字可以让值类型也按引用传递</p><hr><p>接口</p><p>什么是接口？</p><ul><li>接口就是一种规范,协议(*)，约定好遵守某种规范就可以写通用的代码。</li><li>定义了一组具有各种功能的方法。（只是一种能力，没有具体实现）</li></ul><p>接口的意义：</p><ul><li>接口可以多继承</li><li>继承于接口可以表现为一种能力或行为，并不一定需要存在必定的父子联系</li></ul><ul><li>值类型可以实现接口，但不能继承类</li></ul><p>显示实现接口</p><p>显示实现接口后，只能通过接口来调用。</p><p>为什么要显示实现接口？</p><ul><li>方法重名后的解决办法。</li></ul><p>什么是“显示实现接口”？</p><ul><li>实现接口中的方法时用：接口名.方法名(),并且没有访问修饰符,默认private</li></ul><p>“显示实现接口”后怎么调用？</p><ul><li>只能通过接口变量来调用，因为显示实现接口默认为private。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IFlyable</span><br><span class="line">    &#123;</span><br><span class="line">        void Fly();</span><br><span class="line">    &#125;</span><br><span class="line">    public<span class="built_in"> interface </span>IFlyable2</span><br><span class="line">    &#123;</span><br><span class="line">        void Fly();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public class Student : IFlyable, IFlyable2</span><br><span class="line">    &#123;</span><br><span class="line">        public void Fly()</span><br><span class="line">        &#123;</span><br><span class="line">            throw new NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        void IFlyable2.Fly()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接口的特点</p><ol><li>接口是一种规范。为了多态。</li><li>接口不能被实例化。</li><li>接口中的成员不能加“访问修饰符”。（默认为public）</li><li>接口中的成员不能有任何实现。</li><li>接口中只能有方法、属性、索引器、事件，不能有“字段”。</li><li>接口与接口之间可以继承，并且可以多继承。</li><li>实现接口的子类必须实现该接口的全部成员。</li><li>一个类可以同时继承一个类并实现多个接口，如果一个子类同时继承了父类A，并实现了接口IA,那么语法上A必须写在IA的前面。class     MyClass:A,IA{}，因为类是单继承的。</li><li>当一个抽象类实现接口的时候，如果不想把接口中的成员实现，可以把该成员实现为abstract。(抽象类也能实现接口，用abstract标记)</li><li>“显示实现接口”，只能通过接口变量来调用（因为显示实现接口后成员为private）。</li></ol><hr><p>异常处理</p><p>异常处理的一般代码模式：</p><p>try{ …可能发生异常的代码… }catch{ …对异常的处理… }finally{…无论是否发生异常、是否捕获异常都会执行的代码… }</p><p>try块：可能出问题的代码。当遇到异常时，后续代码不执行。</p><p>catch块：对异常的处理。记录日志(log4net)，继续向上抛出等操作。(只有发生了异常，才会执行。)</p><p>finally块：代码清理、资源释放等。无论是否发生异常都会执行。</p><p>异常处理代码的其他几种形式：</p><ol><li>try   →  多个catch       →   一个finally</li><li>try→（1个或多个catch），多个catch的顺序问题。可以没有finally。</li><li>try→finally（只能有一个），没有catch也可以。</li></ol><p>注意点：</p><ul><li>发生异常后，try块中，异常代码后的代码不会执行。</li><li>finally块中的代码，无论是否发生异常都会执行。</li><li>finally中不能写return语句。</li><li>try中有return语句，finally也会执行</li><li>即便没有catch(或者没有找到合适的catch块)，finally中的代码也会执行，但finally之后的代码则不会。（见备注1.）</li></ul><hr><p>函数参数前的修饰符</p><p>ref 跟out不可用于函数重载</p><p>params 可变参数  无论有几个参数，必须出现在参数列表的最后。可以为可变参数直接传递一个对应类型的数组。</p><p>ref 是一个栈地址，引用传递，可以把值传递强制改为引用传递</p><p>out 让函数可以输出多个值</p><ul><li>在方法中必须为out参数赋值</li></ul><ul><li>out参数的变量在传递之前不需要赋值，即使赋值了也不能在方法中使用。（赋值没意义）</li></ul><p>ref</p><ul><li>参数在传递之前必须赋值</li></ul><ul><li>在方法中可以不为ref参数赋值，可以直接使用。</li></ul><p>ref应用场景内部对外部的值进行改变，out则是内部为外部变量赋值，out一般用在函数有多个返回值的场所。</p><hr><p>Equals、==、ReferenceEquals</p><p>Equals、==可以被子类重写</p><p>object.ReferenceEquals唯一可以判断两个对象是否为同一个</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> str = <span class="string">"luox78"</span>;</span><br><span class="line">            <span class="keyword">string</span> str1 = <span class="string">"luox78"</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">Console</span>.WriteLine(str.Equals(str1));<span class="comment">//true</span></span><br><span class="line">            <span class="built_in">Console</span>.WriteLine(str == str1);<span class="comment">//true</span></span><br><span class="line">            <span class="built_in">Console</span>.WriteLine(object.ReferenceEquals(str, str1));<span class="comment">//true暂存池的原因</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">string</span> str = <span class="keyword">new</span> <span class="keyword">string</span>(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123;<span class="string">'l'</span>,<span class="string">'u'</span>,<span class="string">'o'</span>&#125;);</span><br><span class="line">            <span class="keyword">string</span> str1 = <span class="keyword">new</span> <span class="keyword">string</span>(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">'l'</span>, <span class="string">'u'</span>, <span class="string">'o'</span> &#125;);</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">Console</span>.WriteLine(str.Equals(str1));<span class="comment">//true</span></span><br><span class="line">            <span class="built_in">Console</span>.WriteLine(str == str1);<span class="comment">//true</span></span><br><span class="line">            <span class="built_in">Console</span>.WriteLine(object.ReferenceEquals(str, str1));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><hr><p>String</p><p>为什么字符串类不可继承？</p><p>子类如果继承字符串类以后可能会对字符串类进行修改，导致改变字符串的特性。其中最重要的特性就是不可变性，string由于被很多类所使用，为了线程安全，所以设计成不可变。</p><ul><li><p>字符串暂存池（拘留池）（针对字符串常量），依赖于字符串的“不可变性”，如果没有不可变性就不可能有“池”</p><ul><li>只有声明的时候直接赋值的string才会被放入暂存池</li></ul></li><li><ul><li>内部维护一个哈希表key为字符串，value是地址。每次为一个新变量赋值都会找key中是否有，如果有则直接把value中的地址赋值给新变量</li></ul></li><li><p>（*）(暂存、拘留、驻留)字符串留用（Intern,针对变量常量，见备注1）。</p></li><li><ul><li><p>对于动态字符串本身在哈希表中没有，通过这种Intern可以添加到该哈希表中，目的为了提高性能。</p></li><li><ul><li>String.Intern(xx), Intern       方法使用暂存池来搜索与 str 值相等的字符串。如果存在这样的字符串，则返回暂存池中它的引用。如果不存在，则向暂存池添加对 str       的引用，然后返回该引用。 </li><li>String.IsInterned(xx),此方法在暂存池中查找       str。如果已经将 str 放入暂存池中，则返回对此实例的引用；否则返回 nullNothingnullptrnull 引用</li></ul></li></ul></li></ul><p>StringBuilder</p><ul><li><p>StringBuilder高效的字符串操作</p></li><li><ul><li>当大量进行字符串操作的时候，比如，很多次的字符串的拼接操作。</li><li>String 对象是不可变的。      每次使用 System. String 类中的一个方法时，都要在内存中创建一个新的字符串对象，这就需要为该新对象分配新的空间。      在需要对字符串执行重复修改的情况下，与创建新的 String 对象相关的系统开销可能会非常大。 如果要修改字符串而不创建新的对象，则可以使用      System.Text. StringBuilder 类。 例如，当在一个循环中将许多字符串连接在一起时，使用 StringBuilder      类可以提升性能。 </li></ul></li><li><p>StringBuilder  !=     String//将StringBuilder转换为String.用ToString();</p></li><li><p>StringBuilder仅仅是拼接字符串的工具，大多数情况下还需要把StringBuilder转换为String.</p></li><li><ul><li>StringBuilder sb =      new StringBuilder();</li><li>sb.Append();//追加字符串</li><li>sb.ToString();//把StringBuilder转换为字符串。</li><li>sb.Insert();</li><li>sb.Replace();</li></ul></li></ul><hr><p>垃圾回收</p><ul><li>CLR的一个核心功能—垃圾回收。</li></ul><ul><li>垃圾回收的目的：提高内存利用率。</li></ul><ul><li><p>垃圾回收器，只回收托管堆中的内存资源，不回收其他资源（数据库连接、文件句柄、网络端口等）。</p></li><li><p>什么样的对象才会被回收？</p></li><li><ul><li>没有变量引用的对象。没有变量引用的对象，表示可以被回收了（null）,断了线的风筝，再也回不来了。</li></ul></li><li><p>什么时间回收？</p></li><li><ul><li>不确定，当程序需要新内存的时候开始执行回收。</li><li>GC.Collect();//手动调用垃圾回收器。不建议使用，垃圾回收时会暂停一下（非常短暂）让程序自动去GC。</li></ul></li><li><p>垃圾回收器中“代”的概念：</p></li><li><ul><li>共3代：第0代、第1代、第2代。</li><li>各代的回收频率：第0代最高，其次第1代，再次第2代。也就是说越老的对象生存几率越大。</li></ul></li></ul><ul><li>.net中垃圾回收机制：mark-and-compact(标记和压缩)，一开始假设所有对象都是垃圾，遍历这些对象，有引用的将标记位标记位有引用，压缩后转到下一代。</li></ul><ul><li><p>除了内存资源外的其他资源怎么办？~或者Dispose()，实现IDisposable接口</p></li><li><ul><li>finalize C#中的叫法</li><li>用于非托管资源的资源释放</li><li>在GC回收之前会调用它，然后再回收</li></ul></li></ul><hr><p>弱引用</p><p>弱引用可以被垃圾回收，只提供没被回收前想要的地址</p><p>当创建对象非常耗时时，用弱引用可以节省时间</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> <span class="type">Person</span>()</span><br><span class="line">           &#123;</span><br><span class="line">               Name = <span class="string">"luox78"</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="keyword">var</span> wr=<span class="keyword">new</span> <span class="type">WeakReference</span>(p);</span><br><span class="line">           p = <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">if</span> (wr.IsAlive)</span><br><span class="line">           &#123;</span><br><span class="line">               Console.WriteLine((wr.Target as Person).Name);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;属性的本质是字段+方法&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassLibrary1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Name &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClassLibrary1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Diagnostics;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Runtime.CompilerServices;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;CompilerGenerated, DebuggerBrowsable(DebuggerBrowsableState.Never)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; &amp;lt;Name&amp;gt;k__BackingField;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Name &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;索引器的本质是名为Item的属性，并且索引器可以重载，不能再写一个名为item的属性
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>redis nosql介绍</title>
    <link href="https://luox78.github.io/2018/03/09/redis-nosql%E4%BB%8B%E7%BB%8D/"/>
    <id>https://luox78.github.io/2018/03/09/redis-nosql介绍/</id>
    <published>2018-03-09T11:15:44.288Z</published>
    <updated>2018-03-09T11:15:44.431Z</updated>
    
    <content type="html"><![CDATA[<p><strong>NoSQL简介</strong></p><p>​      介绍redis前，我想还是先认识下NoSQL,即not only sql, 是一种非关系型的数据存储，key/value键值对存储。现有Nosql DB 产品： Redis/MongoDB/Memcached/Hbase/Cassandra/ Tokyo Cabinet/Voldemort/Dynomite/Riak/ CouchDB/Hypertable/Flare/Tin/Lightcloud/ KiokuDB/Scalaris/Kai/ThruDB, 等等~~~<a id="more"></a></p><p><strong>为什么需要NoSQL非关系型数据库？</strong></p><ul><li>High performance - 对数据库高并发读写的需求</li><li>Huge Storage - 对海量数据的高效率存储和访问的需求</li><li>High Scalability &amp;&amp; High Availability- 对数据库的高可扩展性和高可用性的需求</li></ul><p>​                                         <strong>Redis简介</strong></p><p>　　已经有了Membercache和各种数据库，Redis为什么会产生？Redis纯粹为应用而产生，它是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类keyvalue存储的不足，解决了断电后数据完全丢失的情况；在部分场合可以对关系数据库起到很好的补充作用。性能测试结果表示SET操作每秒钟可达110000次，GET操作每秒81000次（当然不同的服务器配置性能不同）。</p><p>　　Redis是一种面向“键/值”对类型数据的分布式NoSQL数据库系统，特点是高性能，持久存储，适应高并发的应用场景。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)和zset(有序集合)。 这些数据类型支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的，支持各种不同方式的排序。redis 与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改 操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><p>redis目前提供四种数据类型：string,list,set及zset(sorted set)。</p><p>Redis的存储分为内存存储、磁盘存储和log文件三部分，配置文件中有三个参数对其进行配置。</p><ol><li>save seconds updates :指出在多长时间内，有多少次更新操作，就将数据同步到数据文件。</li><li>appendonly yes/no :是否在每次更新操作后进行日志记录。如果不开启，可能会在断电时导致一段时间内的数据丢失。因为redis本身同步数据 文件是按上面的save条件来同步的，所以有的数据会在一段时间内只存在于内存中。</li><li>appendfsync no/always/everysec ：数据缓存同步至磁盘的方式。no表示等操作系统进行数据缓存同步到磁盘，always表示每次更新操作后手动调用fsync()将数据写到磁盘，everysec表示每秒同步一次。</li></ol><p>一：快速搭建</p><p>​    好了，我们知道redis比较适合做的事情了，现在我们可以进行快速搭建。</p><p>第一步：下载<a href="http://servicestack.googlecode.com/files/redis-2.0.2.zip" target="_blank" rel="noopener">redis-2.0.2.zip (32 bit)</a>。然后改名为redis放在D盘中。</p><p><img src="./那点所谓的分布式——redis - 一线码农 - 博客园_files/10224355-47f0d96a58084a81b23be44a19ada222.jpg" alt="img"></p><p>最重要的也就是下面两个：</p><p>redis-server.exe：        这个就是redis的服务端程序。</p><p>redis-cli.exe：             服务端开启后，我们的客户端就可以输入各种命令测试了。</p><p><img src="./那点所谓的分布式——redis - 一线码农 - 博客园_files/10225203-55da4b7f1f0e47ef87fff126a5581efa.jpg" alt="img"></p><p>从图中我们可以看到两点：</p><p>①：没有指定config file。</p><p>​     原来redis建议我们做一个配置文件，那我就搞段配置。</p><p><img src="./那点所谓的分布式——redis - 一线码农 - 博客园_files/10230036-2ad3da19c61b4b26a1628c05a691ea5d.jpg" alt="img"></p><p>daemonize:  是否以“守护进程”的方式开启，当是守护进程的时候就不受控制台的影响了。</p><p>logfile:         log文件位置。</p><p>database:    开启数据库的个数。</p><p>dbfilename:  数据快照文件名。</p><p>save <em> </em>:     保存快照的频率，第一个为时间，第二个为写操作。</p><p>将这些配置好后，我们再看看：</p><p><img src="./那点所谓的分布式——redis - 一线码农 - 博客园_files/10230720-ba98f3d305604969ae6269655e15eaff.jpg" alt="img"></p><p>②：我们看到redis默认的开放端口为6379。</p><p>二：安装驱动</p><p>好了，redis已经搭建完毕了，现在我们就要用C#去操作redis，这也是我最渴望的功能，优先队列~，先下载<a href="http://servicestack.googlecode.com/files/ServiceStack.zip" target="_blank" rel="noopener">C#驱动</a>，</p><p>就可以看到如下3个dll。</p><p><img src="./那点所谓的分布式——redis - 一线码农 - 博客园_files/10231210-93d8da2b10384a23948bd7e630c4a1f2.jpg" alt="img"></p><p>最后我们做下小测试：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="./那点所谓的分布式——redis - 一线码农 - 博客园_files/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span>     class Program</span><br><span class="line"> <span class="number">2</span>     &#123;</span><br><span class="line"> <span class="number">3</span>         static void Main(<span class="type">string</span>[] args)</span><br><span class="line"> <span class="number">4</span>         &#123;</span><br><span class="line"> <span class="number">5</span>             var client = new RedisClient(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line"> <span class="number">6</span> </span><br><span class="line"> <span class="number">7</span>             <span class="comment">//最后一个参数为我们排序的依据</span></span><br><span class="line"> <span class="number">8</span>             var s = client.AddItemToSortedSet(<span class="string">"12"</span>, <span class="string">"百度"</span>, <span class="number">400</span>);</span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span>             client.AddItemToSortedSet(<span class="string">"12"</span>, <span class="string">"谷歌"</span>, <span class="number">300</span>);</span><br><span class="line"><span class="number">11</span>             client.AddItemToSortedSet(<span class="string">"12"</span>, <span class="string">"阿里"</span>, <span class="number">200</span>);</span><br><span class="line"><span class="number">12</span>             client.AddItemToSortedSet(<span class="string">"12"</span>, <span class="string">"新浪"</span>, <span class="number">100</span>);</span><br><span class="line"><span class="number">13</span>             client.AddItemToSortedSet(<span class="string">"12"</span>, <span class="string">"人人"</span>, <span class="number">500</span>);</span><br><span class="line"><span class="number">14</span> </span><br><span class="line"><span class="number">15</span>             <span class="comment">//升序获取最一个值:"新浪"</span></span><br><span class="line"><span class="number">16</span>             var <span class="type">list</span> = client.GetRangeFromSortedSet(<span class="string">"12"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>             foreach (var item in <span class="type">list</span>)</span><br><span class="line"><span class="number">19</span>             &#123;</span><br><span class="line"><span class="number">20</span>                 Console.WriteLine(item);</span><br><span class="line"><span class="number">21</span>             &#125;</span><br><span class="line"><span class="number">22</span> </span><br><span class="line"><span class="number">23</span>             <span class="comment">//降序获取最一个值:"人人"</span></span><br><span class="line"><span class="number">24</span>             <span class="type">list</span> = client.GetRangeFromSortedSetDesc(<span class="string">"12"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="number">25</span> </span><br><span class="line"><span class="number">26</span>             foreach (var item in <span class="type">list</span>)</span><br><span class="line"><span class="number">27</span>             &#123;</span><br><span class="line"><span class="number">28</span>                 Console.WriteLine(item);</span><br><span class="line"><span class="number">29</span>             &#125;</span><br><span class="line"><span class="number">30</span> </span><br><span class="line"><span class="number">31</span>             Console.Read();</span><br><span class="line"><span class="number">32</span>         &#125;</span><br><span class="line"><span class="number">33</span>     &#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="./那点所谓的分布式——redis - 一线码农 - 博客园_files/copycode.gif" alt="复制代码"></a>;)</p><p>AddItemToSortedSet： 第三个参数也就是我们要排序的依据，这也非常适合我们做topK的问题，非常爽~</p><p><img src="./那点所谓的分布式——redis - 一线码农 - 博客园_files/10231833-91a17df43917437d962b146cfa6e7b51.jpg" alt="img"></p><p><strong>Redis和Memcached比较</strong></p><p>（1） 如果存储的数据不是很大的情况下，两者几乎没太大区别。性能都非常高。如果存储的数据非常大情况下，那么memcached性能高点，因为mm是多线程的。redis是单线程。</p><p>（2）断电Redis可以通过日志恢复数据，或者是通过本身自带的数据文件恢复数据。</p><p>（3)memcached是通过客户端驱动实现了集群的配置的。而Redis是通过服务器端配置实现集群的。而且Redis有主从的复制功能（同步数据。）</p><p>（4）mm数据没有类型。redis：包括string(字符串)、list(链表)、set(集合)和zset(有序集合)。高级的数据结构。可以把集合做成队列，栈等高级数据结构。</p><p>（5）redis 与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改 操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;NoSQL简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​      介绍redis前，我想还是先认识下NoSQL,即not only sql, 是一种非关系型的数据存储，key/value键值对存储。现有Nosql DB 产品： Redis/MongoDB/Memcached/Hbase/Cassandra/ Tokyo Cabinet/Voldemort/Dynomite/Riak/ CouchDB/Hypertable/Flare/Tin/Lightcloud/ KiokuDB/Scalaris/Kai/ThruDB, 等等~~~
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="redis" scheme="https://luox78.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC 异常记录</title>
    <link href="https://luox78.github.io/2018/03/08/ASP.NET-MVC-%E5%BC%82%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    <id>https://luox78.github.io/2018/03/08/ASP.NET-MVC-异常记录/</id>
    <published>2018-03-08T07:21:53.423Z</published>
    <updated>2018-03-09T11:15:47.834Z</updated>
    
    <content type="html"><![CDATA[<p>新建一个类继承自 HandleErrorAttribute,然后重写OnException这个方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogHandleErrorAttribute</span>: <span class="title">HandleErrorAttribute</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILoggerService _log;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LogHandleErrorAttribute</span>(<span class="params">ILoggerService log</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>._log = log;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">ExceptionContext filterContext</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">base</span>.OnException(filterContext);</span><br><span class="line">            _log.Error(<span class="string">"被系统过滤捕获的异常"</span> + filterContext.Exception.ToString());</span><br><span class="line">            filterContext.HttpContext.Response.Redirect(<span class="string">"/"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只要程序出错就会执行这个方法。<a id="more"></a></p><p>注册定义好的异常过虑器<br>打开App_Start文件夹中FilterConfig.cs修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterGlobalFilters</span><span class="params">(GlobalFilterCollection filters)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="comment">//filters.Add(new HandleErrorAttribute());</span></span><br><span class="line">           filters.Add(<span class="keyword">new</span> LogHandleErrorAttribute());</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>先写好ILogService接口</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILoggerService</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="keyword">string</span> message</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="keyword">string</span> message</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="keyword">string</span> message</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Error</span>(<span class="params"><span class="keyword">string</span> message</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Error</span>(<span class="params">Exception ex</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params"><span class="keyword">string</span> message</span>)</span>;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params">Exception ex</span>)</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="自定义记录日志"><a href="#自定义记录日志" class="headerlink" title="自定义记录日志"></a>自定义记录日志</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyLogHelper</span>:<span class="title">ILoggerService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Queue&lt;<span class="keyword">string</span>&gt; _execptionQueue;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">MyLogHelper</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            _execptionQueue = <span class="keyword">new</span> Queue&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line"> </span><br><span class="line">            ThreadPool.QueueUserWorkItem(m =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_execptionQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> ex = _execptionQueue.Dequeue();</span><br><span class="line">                        <span class="keyword">if</span> (ex != <span class="literal">null</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            WriteLog(ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            _execptionQueue.Enqueue(message);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params">Exception ex</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params">Exception ex</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteLog</span>(<span class="params"><span class="keyword">string</span> exception</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">lock</span> (_execptionQueue)</span><br><span class="line">            &#123;</span><br><span class="line">                File.AppendAllText(<span class="string">$@"C:\log_<span class="subst">&#123;DateTime.Now.ToString(<span class="string">"yy-MM-dd"</span>)&#125;</span>"</span>, exception);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主要先使用队列将异常信息记录在内存中，通过静态构造函数在里面开启新线程每两秒往文件中记录异常信息</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterGlobalFilters</span><span class="params">(GlobalFilterCollection filters)</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           filters.Add(<span class="keyword">new</span> LogHandleErrorAttribute(<span class="keyword">new</span> MyLogHelper()));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="通过log4net记录日志"><a href="#通过log4net记录日志" class="headerlink" title="通过log4net记录日志"></a>通过log4net记录日志</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogHelper</span>:<span class="title">ILoggerService</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">readonly</span> ILog _logger;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> Queue&lt;<span class="keyword">string</span>&gt; _execptionQueue;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">LogHelper</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           _logger = LogManager.GetLogger(</span><br><span class="line">               System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);</span><br><span class="line"></span><br><span class="line">           _execptionQueue = <span class="keyword">new</span> Queue&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">           ThreadPool.QueueUserWorkItem(m =&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">if</span> (_execptionQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="keyword">var</span> ex = _execptionQueue.Dequeue();</span><br><span class="line">                       <span class="keyword">if</span> (ex != <span class="literal">null</span>)</span><br><span class="line">                       &#123;</span><br><span class="line">                           _logger.Error(ex);</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span></span><br><span class="line">                       &#123;</span><br><span class="line">                           Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">else</span></span><br><span class="line">                   &#123;</span><br><span class="line">                       Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           _logger.Info(message);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           _logger.Warn(message);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           _logger.Debug(message);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           _execptionQueue.Enqueue(message);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params">Exception ex</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           _logger.Error(ex.Message, ex);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           _logger.Fatal(message);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params">Exception ex</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           _logger.Fatal(ex.Message, ex);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilterConfig</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterGlobalFilters</span>(<span class="params">GlobalFilterCollection filters</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//添加对于异常的日志记录</span></span><br><span class="line">            filters.Add(<span class="keyword">new</span> LogHandleErrorAttribute(<span class="keyword">new</span> LogHelper()));</span><br><span class="line">            <span class="comment">//filters.Add(new LogHandleErrorAttribute(new MyLogHelper()));</span></span><br><span class="line">            InitLogHandleError();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 初始化log4net</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitLogHandleError</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            log4net.Config.XmlConfigurator.Configure();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>web.config</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ......</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--日志的配置--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"log4net"</span> <span class="attr">type</span>=<span class="string">"log4net.Config.Log4NetConfigurationSectionHandler,log4Net"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span></span><br><span class="line"><span class="xml">   ......</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--日志的配置开始--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">log4net</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"ALL"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"SysAppender"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"WebLogger"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--配置日志的级别，低于此级别的就不写到日志里面去--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"DEBUG"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--系统日志的格式--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"SysAppender"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.RollingFileAppender,log4net"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"File"</span> <span class="attr">value</span>=<span class="string">"App_Data/"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"AppendToFile"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"RollingStyle"</span> <span class="attr">value</span>=<span class="string">"Date"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"DatePattern"</span> <span class="attr">value</span>=<span class="string">"&amp;quot;Logs_&amp;quot;yyyyMMdd&amp;quot;.txt&amp;quot;"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"StaticLogFileName"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout,log4net"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--&lt;param name="ConversionPattern" value="%d [%t] %-5p %c - %m%n" /&gt;--&gt;</span>      </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">conversionPattern</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;%level&#125;</span><span class="xml"><span class="tag"><span class="string">%date</span></span></span><span class="template-variable">&#123;MM/dd HH:mm:ss&#125;</span><span class="xml"><span class="tag"><span class="string"> - %message%newline%newline"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--控制台日志的格式--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleApp"</span> <span class="attr">type</span>=<span class="string">"log4net.Appender.ConsoleAppender,log4net"</span>&gt;</span>     </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">layout</span> <span class="attr">type</span>=<span class="string">"log4net.Layout.PatternLayout,log4net"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"ConversionPattern"</span> <span class="attr">value</span>=<span class="string">"%d [%t] %-5p %c - %m%n"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">log4net</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--日志的配置结束--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新建一个类继承自 HandleErrorAttribute,然后重写OnException这个方法&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LogHandleErrorAttribute&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;HandleErrorAttribute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt; ILoggerService _log;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LogHandleErrorAttribute&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ILoggerService log&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._log = log;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;OnException&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ExceptionContext filterContext&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;base&lt;/span&gt;.OnException(filterContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _log.Error(&lt;span class=&quot;string&quot;&gt;&quot;被系统过滤捕获的异常&quot;&lt;/span&gt; + filterContext.Exception.ToString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filterContext.HttpContext.Response.Redirect(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只要程序出错就会执行这个方法。
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="log4net" scheme="https://luox78.github.io/tags/log4net/"/>
    
      <category term="log" scheme="https://luox78.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>知识点01</title>
    <link href="https://luox78.github.io/2018/03/05/%E7%9F%A5%E8%AF%86%E7%82%B901/"/>
    <id>https://luox78.github.io/2018/03/05/知识点01/</id>
    <published>2018-03-05T11:59:03.694Z</published>
    <updated>2018-03-05T15:47:00.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件event"><a href="#事件event" class="headerlink" title="事件event"></a>事件event</h2><p>C# 中的委托是什么？事件是不是一种委托？事件和委托的关系。<br>委托可以把一个方法作为参数代入另一个方法。<br>委托可以理解为指向一个函数的指针。<br>委托和事件没有可比性，因为<strong>委托是类型，事件是对象</strong>，下面说的是委托的对象（用委托方式实现的事件）和（标准的 event 方式实现）事件的区别。事件的内部是用委托实现的。因为对于事件来讲，<strong>外部只能“注册自己+=、注销自己-=”，外界不可以注销其他的注册者</strong>，<strong>外界不可以主动调用事件</strong>，因此如果用 Delegate 就没法进行上面的控制，因此诞生了事件这种语法。事件是用来阉割委托实例的，类比用一个自定义类阉割 List。事件只能 add、remove自己，不能赋值。事件只能+=、-=，不能= 。事件内部就是一个 private的委托和 add、remove 两个方法<a id="more"></a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> music = <span class="keyword">new</span> Music();</span><br><span class="line">           music.OnPlayMusic += Music_OnPlayMusic;<span class="comment">//event只能添加和减去自己的方法，且类外不能调用</span></span><br><span class="line">           music.OnPlayMusicDelegate += Music_OnPlayMusic;</span><br><span class="line"></span><br><span class="line">           music.OnPlayMusicDelegate();</span><br><span class="line">           <span class="comment">//music.OnPlayMusic();</span></span><br><span class="line"></span><br><span class="line">           music.PlayMusic(<span class="string">"nihao"</span>);</span><br><span class="line">           Console.ReadKey();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Music_OnPlayMusic</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           Console.WriteLine(<span class="string">"播放前调用"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">Music</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">event</span> Action OnPlayMusic;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> Action OnPlayMusicDelegate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayMusic</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           OnPlayMusic();</span><br><span class="line">           Console.WriteLine(<span class="string">$"正在播放--<span class="subst">&#123;name&#125;</span>"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="TryCatch编译"><a href="#TryCatch编译" class="headerlink" title="TryCatch编译"></a>TryCatch编译</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> GetIt()</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">int</span> i = <span class="number">8</span>;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               i++;</span><br><span class="line">               Console.<span class="keyword">WriteLine</span>(<span class="string">"a"</span>); <span class="keyword">return</span> i;<span class="comment">//把返回值设定为i，然后“尽快”返回（没啥事就回去吧）</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">finally</span></span><br><span class="line">           &#123;</span><br><span class="line">               Console.<span class="keyword">WriteLine</span>(<span class="string">"b"</span>);</span><br><span class="line">               i++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//等同于</span></span><br><span class="line">           <span class="keyword">int</span> res;</span><br><span class="line">           <span class="keyword">int</span> i = <span class="number">8</span>;</span><br><span class="line">           <span class="keyword">try</span></span><br><span class="line">           &#123;</span><br><span class="line">               i++;</span><br><span class="line">               Console.<span class="keyword">WriteLine</span>(<span class="string">"a"</span>);</span><br><span class="line">               res = i;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">finally</span></span><br><span class="line">           &#123;</span><br><span class="line">               Console.<span class="keyword">WriteLine</span>(<span class="string">"b"</span>);</span><br><span class="line">               i++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> res;</span><br><span class="line">       &#125;</span><br><span class="line">           Console.<span class="keyword">WriteLine</span>(GetIt());<span class="comment">//ab9</span></span><br></pre></td></tr></table></figure><h2 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h2><p><strong>一范式**</strong>就是属性不可分割**。属性是什么？就是表中的字段。<br>不可分割的意思就按字面理解就是最小单位，不能再分成更小单位了。<br>这个字段只能是一个值，不能被拆分成多个字段，否则的话，它就是可分割的，就不符合一范式。<br>不过能不能分割并没有绝对的答案，看需求，也就是看你的设计目标而定。<br>举例：<br>学生信息组成学生信息表，有姓名、年龄、性别、学号等信息组成。<br>姓名不可拆分吧？所以可以作为该表的一个字段。<br>但我要说这个表要在国外使用呢？人家姓和名要分开，都有特别的意义，所以姓名字段是可拆分的，分为姓字段和名字段。<br>简单来说，一范式是关系数据库的基础，但字段是否真的不可拆分，根据你的设计目标而定。</p><p><strong>二范式就是要有主键，要求其他字段都依赖于主键</strong>。<br>为什么要有主键？没有主键就没有唯一性，没有唯一性在集合中就定位不到这行记录，所以要主键。<br>其他字段为什么要依赖于主键？因为不依赖于主键，就找不到他们。更重要的是，其他字段组成的这行记录和主键表示的是同一个东西，而主键是唯一的，它们只需要依赖于主键，也就成了唯一的。<br>如果有同学不理解依赖这个词，可以勉强用“相关”这个词代替，也就是说其他字段必须和它们的主键相关。因为不相关的东西不应该放在一行记录里。<br>举例：<br>学生信息组成学生表，姓名可以做主键么？<br>不能！因为同名的话，就不唯一了，所以需要学号这样的唯一编码才行。<br>那么其他字段依赖于主键是什么意思？<br>就是“张三”同学的年龄和性别等字段，不能存储别人的年龄性别，必须是他自己的，因为张三的学号信息就决定了，这行记录归张三所有，不能给无关人员使用。</p><p><strong>三范式就是要消除传递依赖，方便理解，可以看做是“消除冗余”</strong>。<br>消除冗余应该比较好理解一些，就是各种信息只在一个地方存储，不出现在多张表中。<br>比如说大学分了很多系（中文系、英语系、计算机系……），这个系别管理表信息有以下字段组成：<br>系编号，系主任，系简介，系架构。<br>那么再回到学生信息表，张三同学的年龄、性别、学号都有了，我能不能把他的系编号，系主任、系简介也一起存着？<br>如果你问三范式，当然不行，因为三范式不同意。<br>因为系编号，系主任、系简介已经存在系别管理表中，你再存入学生信息表，就是冗余了。<br>三范式中说的传递依赖，就出现了。<br>这个时候学生信息表中，系主任信息是不是依赖于系编号了？而这个表的主键可是学号啊！<br>所以按照三范式，<strong>处理这个问题的时候，学生表就只能增加一个系编号字段</strong>。<br>这样既能根据系编号找到系别信息，又避免了冗余存储的问题。</p><p>所谓的范式，是用来学习参考的，设计的时候根据情况，未必一定要遵守，切记。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事件event&quot;&gt;&lt;a href=&quot;#事件event&quot; class=&quot;headerlink&quot; title=&quot;事件event&quot;&gt;&lt;/a&gt;事件event&lt;/h2&gt;&lt;p&gt;C# 中的委托是什么？事件是不是一种委托？事件和委托的关系。&lt;br&gt;委托可以把一个方法作为参数代入另一个方法。&lt;br&gt;委托可以理解为指向一个函数的指针。&lt;br&gt;委托和事件没有可比性，因为&lt;strong&gt;委托是类型，事件是对象&lt;/strong&gt;，下面说的是委托的对象（用委托方式实现的事件）和（标准的 event 方式实现）事件的区别。事件的内部是用委托实现的。因为对于事件来讲，&lt;strong&gt;外部只能“注册自己+=、注销自己-=”，外界不可以注销其他的注册者&lt;/strong&gt;，&lt;strong&gt;外界不可以主动调用事件&lt;/strong&gt;，因此如果用 Delegate 就没法进行上面的控制，因此诞生了事件这种语法。事件是用来阉割委托实例的，类比用一个自定义类阉割 List。事件只能 add、remove自己，不能赋值。事件只能+=、-=，不能= 。事件内部就是一个 private的委托和 add、remove 两个方法
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="event" scheme="https://luox78.github.io/tags/event/"/>
    
      <category term="TryCatch" scheme="https://luox78.github.io/tags/TryCatch/"/>
    
      <category term="数据库三范式" scheme="https://luox78.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E8%8C%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC03</title>
    <link href="https://luox78.github.io/2018/03/04/ASP.NET-MVC03/"/>
    <id>https://luox78.github.io/2018/03/04/ASP.NET-MVC03/</id>
    <published>2018-03-04T04:17:37.088Z</published>
    <updated>2018-03-05T14:36:25.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery-Validate"><a href="#jQuery-Validate" class="headerlink" title="jQuery Validate"></a>jQuery Validate</h2><p><a href="http://www.runoob.com/jquery/jquery-plugin-validate.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-plugin-validate.html</a></p><h2 id="Mvc校验及数据批注解耦方法"><a href="#Mvc校验及数据批注解耦方法" class="headerlink" title="Mvc校验及数据批注解耦方法"></a>Mvc校验及数据批注解耦方法</h2><p>创建模型类</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">StringLength(10,ErrorMessage = <span class="meta-string">"*10个字符以内"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        [<span class="meta">Range(0,130,ErrorMessage = <span class="meta-string">"*0到130岁之间"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过模型类的数据批注，mvc中html帮助器方法会创建带校验的html属性<a id="more"></a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">           @Html.LabelFor(model =&gt; model.Name, htmlAttributes: <span class="keyword">new</span> &#123; @<span class="keyword">class</span> = <span class="string">"control-label col-md-2"</span> &#125;)</span><br><span class="line">           &lt;div <span class="keyword">class</span>=<span class="string">"col-md-10"</span>&gt;</span><br><span class="line">               @Html.EditorFor(model =&gt; model.Name, <span class="keyword">new</span> &#123; htmlAttributes = <span class="keyword">new</span> &#123; @<span class="keyword">class</span> = <span class="string">"form-control"</span> &#125; &#125;)</span><br><span class="line">               @Html.ValidationMessageFor(model =&gt; model.Name, <span class="string">""</span>, <span class="keyword">new</span> &#123; @<span class="keyword">class</span> = <span class="string">"text-danger"</span> &#125;)</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><code>Html.ValidationMessageFor</code>中显示<code>errormessage</code>，生成对应的html标签：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">class</span>=<span class="string">"form-control text-box single-line"</span> <span class="attribute">data-val</span>=<span class="string">"true"</span> <span class="attribute">data-val-number</span>=<span class="string">"字段 Age 必须是一个数字。"</span> <span class="attribute">data-val-range</span>=<span class="string">"*0到130岁之间"</span> <span class="attribute">data-val-range-max</span>=<span class="string">"130"</span> <span class="attribute">data-val-range-min</span>=<span class="string">"0"</span> <span class="attribute">data-val-required</span>=<span class="string">"Age 字段是必需的。"</span> <span class="attribute">id</span>=<span class="string">"Age"</span> <span class="attribute">name</span>=<span class="string">"Age"</span> <span class="attribute">type</span>=<span class="string">"number"</span> <span class="attribute">value</span>=<span class="string">""</span> /&gt;</span><br></pre></td></tr></table></figure><p>是通过反射元数据实现对特性的校验，js中使用的jquery validate实现的校验，服务器端校验可以通过<code>ModelState.IsValid</code>进行校验</p><p>有关从数据库中取出的数据，进行的数据批注会在每次模型改变时模板类的重新生成时消失，可以通过往同一名字的类中添加元数据进行解耦，最后结果是一样的</p><p>模型改为<code>parital</code></p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">namespace</span> <span class="title">_61</span>.<span class="title">Models</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过MetadataType特性共享UserInfoValidate的元数据</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">namespace</span> <span class="title">_61</span>.<span class="title">Models</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    [MetadataType(typeof(UserInfoValidate))]</span><br><span class="line">    <span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoValidate</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        [StringLength(<span class="number">10</span>, ErrorMessage = <span class="string">"*10个字符以内"</span>)]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        [Range(<span class="number">0</span>, <span class="number">130</span>, ErrorMessage = <span class="string">"*0到130岁之间"</span>)]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：程序集包含：IL，元数据，Resource，程序集清单</p><p>元数据：  元数据以非特定语言的方式描述在代码中定义的每一类型和成员。元数据存储以下信息：   </p><pre><code>程序集的说明。   标识（名称、版本、区域性、公钥）。   导出的类型。   该程序集所依赖的其他程序集。   运行所需的安全权限。   类型的说明。   名称、可见性、基类和实现的接口。   成员（方法、字段、属性、事件、嵌套的类型）。   属性。   </code></pre><h2 id="Mvc-Ajax"><a href="#Mvc-Ajax" class="headerlink" title="Mvc Ajax"></a>Mvc Ajax</h2><p>控制器</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetTime</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$"<span class="subst">&#123;DateTime.Now.ToString()&#125;</span>--<span class="subst">&#123;message&#125;</span>"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>view</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@section scripts</span><br><span class="line">&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"~/Scripts/jquery.unobtrusive-ajax.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#loading"</span>).css(<span class="string">"display"</span>, <span class="string">"none"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">SuccessGetTime</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"success"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@using (Ajax.BeginForm("GetTime",new AjaxOptions()</span><br><span class="line">&#123;</span><br><span class="line">    Confirm = "确认提交？",</span><br><span class="line">    HttpMethod = "Post",</span><br><span class="line">    LoadingElementId = "loading",</span><br><span class="line">    OnSuccess = "SuccessGetTime",</span><br><span class="line">    UpdateTargetId = "result"</span><br><span class="line">&#125;))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"message"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loading"</span>&gt;</span>正在加载<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加引用包<code>&lt;script src=&quot;~/Scripts/jquery.unobtrusive-ajax.min.js&quot;&gt;&lt;/script&gt;</code></p><p>new AjaxOptions()对象</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p><a href="https://luox78.github.io/2018/02/28/filters/">https://luox78.github.io/2018/02/28/filters/</a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyActionFilterAttribute</span> : <span class="title">ActionFilterAttribute</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">base</span>.OnActionExecuting(filterContext);</span><br><span class="line">           filterContext.HttpContext.Response.Write(Name + <span class="string">"   &lt;h1&gt;before action&lt;/h1&gt;"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuted</span>(<span class="params">ActionExecutedContext filterContext</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">base</span>.OnActionExecuted(filterContext);</span><br><span class="line">           filterContext.HttpContext.Response.Write(Name + <span class="string">"    &lt;h1&gt;after action&lt;/h1&gt;"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResultExecuting</span>(<span class="params">ResultExecutingContext filterContext</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">base</span>.OnResultExecuting(filterContext);</span><br><span class="line">           filterContext.HttpContext.Response.Write(Name + <span class="string">"    &lt;h1&gt;before Result&lt;/h1&gt;"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnResultExecuted</span>(<span class="params">ResultExecutedContext filterContext</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">base</span>.OnResultExecuted(filterContext);</span><br><span class="line">           filterContext.HttpContext.Response.Write(Name + <span class="string">"   &lt;h1&gt;after Result&lt;/h1&gt;"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Name用于区分是谁的过滤器</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[MyActionFilter(Name = <span class="string">"Action"</span>)]</span><br><span class="line">       <span class="keyword">public</span> ActionResult Index()</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="function"><span class="keyword">return</span> <span class="title">View</span><span class="params">()</span></span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>页面顺序：Action：before action → after action → before Result  → after Result</p><p>添加全局的过滤器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfig</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterGlobalFilters</span><span class="params">(GlobalFilterCollection filters)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            filters.Add(<span class="keyword">new</span> HandleErrorAttribute());</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//添加的全局过滤器</span></span><br><span class="line">            filters.Add(<span class="keyword">new</span> MyActionFilterAttribute());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>添加整个控制器过滤器</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">MyActionFilter(Name = <span class="meta-string">"Controller"</span>)</span>]</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AjaxController</span> : <span class="title">Controller</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// GET: Ajax</span></span><br><span class="line">       [<span class="meta">MyActionFilter(Name = <span class="meta-string">"Action"</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> View();</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetTime</span>(<span class="params"><span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">$"<span class="subst">&#123;DateTime.Now.ToString(CultureInfo.InvariantCulture)&#125;</span>--<span class="subst">&#123;message&#125;</span>"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时生成仍然是action的过滤器，因为过滤器会默认最近原则，可以使用AttributeUsage特性改变特性属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[AttributeUsage(AttributeTargets.All, AllowMultiple = <span class="literal">true</span>)]<span class="comment">//target 选择所有，允许多个特性共同作用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActionFilterAttribute</span> : <span class="type">ActionFilterAttribute&#123;。。。&#125;</span></span></span><br></pre></td></tr></table></figure><p>此时html</p><p>全局 before action→ Controller before action→ Action before action → Action after action→ Controller after action→ 全局 after action→ 全局 before Result→ Controller before Result→ Action before Result→ Action after Result→ Controller after Result→ 全局 after Result</p><h2 id="Areas"><a href="#Areas" class="headerlink" title="Areas"></a>Areas</h2><p>在大型的ASP.NET <a href="http://www.lanhusoft.com/Article/169.html" target="_blank" rel="noopener">mvc</a>5项目中一般都有许多个功能模块，这些功能模块可以用Area（中文翻译为区域）把它们分离开来，比如：Admin，Customer，Bill。ASP.NET MVC项目中把各个功能分为不同Area的之后每一个Area都有独立的Controller，View文件结构。这样可以把这些功能分给不同的开发者同时开发而彼此之间不会冲突，这样的文件结构各司其职，直观明了，易于维护和管理。下面我们看看怎么在ASP.NET MVC5中创建一个Area和Area直接之间链接的处理。</p><p>生成的AreaRegistration中写了自己的路由规则</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">namespace</span> <span class="title">_61</span>.<span class="title">Areas</span>.<span class="title">luox78</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">luox78AreaRegistration</span> : <span class="title">AreaRegistration</span> </span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> AreaName </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"luox78"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> RegisterArea(AreaRegistrationContext context) </span><br><span class="line">        &#123;</span><br><span class="line">            context.MapRoute(</span><br><span class="line">                <span class="string">"luox78_default"</span>,</span><br><span class="line">                <span class="string">"luox78/&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,</span><br><span class="line">                <span class="keyword">new</span> &#123; action = <span class="string">"Index"</span>, id = UrlParameter.Optional &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Global.asax.cs中注册了区域路由</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcApplication</span> :</span> System.Web.HttpApplication</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            AreaRegistration.RegisterAllAreas();</span><br></pre></td></tr></table></figure><h3 id="在Area区域的视图之间Action的链接跳转的处理"><a href="#在Area区域的视图之间Action的链接跳转的处理" class="headerlink" title="在Area区域的视图之间Action的链接跳转的处理"></a>在Area区域的视图之间Action的链接跳转的处理</h3><p>1、同一个Area之间跳转</p><p>在Area区域的视图中生成指向同一个Area的Action链接时，你不需要做任何处理，当你调用Html.ActionLink时MVC框架自动去找当前Area的相应路由来生成Action的链接。如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">ActionLink</span>("<span class="keyword">Click</span> me<span class="string">", "</span>About<span class="string">")</span></span><br></pre></td></tr></table></figure><p>2、不同Area之间跳转</p><h3 id="2、不同Area之间跳转"><a href="#2、不同Area之间跳转" class="headerlink" title="2、不同Area之间跳转"></a>2、不同Area之间跳转</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Html</span>.ActionLink(<span class="string">"Click me to go to another area"</span>, <span class="string">"Index"</span>, <span class="keyword">new</span> &#123; area = <span class="string">"Support"</span> &#125;)</span><br></pre></td></tr></table></figure><p>3、跳转到Area外部，使用RouteLink即可</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.RouteLink(<span class="string">"click to ajax index"</span>, <span class="string">"default"</span>, new &#123; <span class="attr">area</span> = <span class="string">""</span>, <span class="attr">controller</span> = <span class="string">"Home"</span>, <span class="attr">action</span> = <span class="string">"About"</span> &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery-Validate&quot;&gt;&lt;a href=&quot;#jQuery-Validate&quot; class=&quot;headerlink&quot; title=&quot;jQuery Validate&quot;&gt;&lt;/a&gt;jQuery Validate&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.runoob.com/jquery/jquery-plugin-validate.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.runoob.com/jquery/jquery-plugin-validate.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Mvc校验及数据批注解耦方法&quot;&gt;&lt;a href=&quot;#Mvc校验及数据批注解耦方法&quot; class=&quot;headerlink&quot; title=&quot;Mvc校验及数据批注解耦方法&quot;&gt;&lt;/a&gt;Mvc校验及数据批注解耦方法&lt;/h2&gt;&lt;p&gt;创建模型类&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserInfo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;StringLength(10,ErrorMessage = &lt;span class=&quot;meta-string&quot;&gt;&quot;*10个字符以内&quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt; Name &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;meta&quot;&gt;Range(0,130,ErrorMessage = &lt;span class=&quot;meta-string&quot;&gt;&quot;*0到130岁之间&quot;&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Age &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过模型类的数据批注，mvc中html帮助器方法会创建带校验的html属性
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="jQuery Validate" scheme="https://luox78.github.io/tags/jQuery-Validate/"/>
    
      <category term="Mvc校验" scheme="https://luox78.github.io/tags/Mvc%E6%A0%A1%E9%AA%8C/"/>
    
      <category term="AjaxHelper" scheme="https://luox78.github.io/tags/AjaxHelper/"/>
    
      <category term="filters" scheme="https://luox78.github.io/tags/filters/"/>
    
      <category term="areas" scheme="https://luox78.github.io/tags/areas/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC02</title>
    <link href="https://luox78.github.io/2018/03/03/ASP.NET-MVC02/"/>
    <id>https://luox78.github.io/2018/03/03/ASP.NET-MVC02/</id>
    <published>2018-03-03T04:27:51.340Z</published>
    <updated>2018-03-03T15:34:37.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接上篇"><a href="#接上篇" class="headerlink" title="接上篇"></a>接上篇</h2><p>更新，删除可以先找出实体，然后直接更改属性保存即可，删除直接调用<code>remove</code></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">db</span> = new luox78_成绩管理系统Entities();</span><br><span class="line"><span class="keyword">var</span> college = <span class="keyword">db</span>.College.FirstOrDefault(<span class="keyword">m</span> =&gt; <span class="keyword">m</span>.Autoid == 1);</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line">college.CollegeName = <span class="string">"changed"</span>;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">db</span>.College.Remove(college);</span><br><span class="line"><span class="keyword">db</span>.SaveChanges();</span><br></pre></td></tr></table></figure><p>根据主键查询可以使用<code>Find</code>方法<a id="more"></a></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var college1 = db.College.Find(<span class="number">1</span>, <span class="number">0</span>);<span class="comment">//这里College表中有两个主键</span></span><br></pre></td></tr></table></figure><h2 id="code-first"><a href="#code-first" class="headerlink" title="code first"></a>code first</h2><p><a href="https://www.cnblogs.com/lsxqw2004/archive/2015/08/07/4701979.html" target="_blank" rel="noopener">https://www.cnblogs.com/lsxqw2004/archive/2015/08/07/4701979.html</a></p><h2 id="上下文管理：实例管理"><a href="#上下文管理：实例管理" class="headerlink" title="上下文管理：实例管理"></a>上下文管理：实例管理</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DbContext <span class="title">GetCurrentDbContext</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//第一次：</span></span><br><span class="line">            DbContext dbContext = HttpContext.Current.Items[<span class="string">"DbContext"</span>] <span class="keyword">as</span> DbContext;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (dbContext == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dbContext =<span class="keyword">new</span> DbContext(<span class="string">""</span>);</span><br><span class="line">                HttpContext.Current.Items[<span class="string">"DbContext"</span>] = dbContext;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dbContext;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>利用<code>HttpContext.Current.Items</code>存入<code>DbContext</code></p><h2 id="为什么用EF而不用原生的Ado-Net"><a href="#为什么用EF而不用原生的Ado-Net" class="headerlink" title="为什么用EF而不用原生的Ado.Net"></a>为什么用EF而不用原生的Ado.Net</h2><p>1、极大的提高开发效率：EF是微软自己的产品，跟VS开发工具集成度比较好，开发中代码都是强类型的，写代码效率非常高，自动化程度非常高，命令式的编程。</p><p>2、EF提供的模型设计器非常强大，不仅仅带来了设计数据库的革命，也附带来的自动化生成模型代码的功能也极大的提高开发和架构设计的效率</p><p>3、EF跨数据支持是ORM框架主要功能点之一，带来的是可以通过仅仅改变配置就可以做到跨数据库的能力。</p><p>4、使开发人员远离sql脚本    </p><p>5、缺陷：性能差（生成sql脚本阶段），在复杂查询的时候生成的sql脚本效率不是很高。</p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>控制器： <a href="https://luox78.github.io/2018/02/07/ASP.NET%20MVC%20%E6%8E%A7%E5%88%B6%E5%99%A8/">https://luox78.github.io/2018/02/07/ASP.NET%20MVC%20%E6%8E%A7%E5%88%B6%E5%99%A8/</a></p><p>视图： <a href="https://luox78.github.io/2018/02/13/ASP.NET-MVC-%E8%A7%86%E5%9B%BE/">https://luox78.github.io/2018/02/13/ASP.NET-MVC-%E8%A7%86%E5%9B%BE/</a></p><p><strong>管道流程：</strong></p><p><code>ISAPIRuntime.ProcessRequest()</code>创建<code>HttpWorkerRequest</code>对象</p><p>→<code>HttpRuntime.ProcessRequest()</code>创建<code>HttpContext</code>，包含<code>HttpRequest</code>，<code>HttpResponse</code>等</p><p>→<code>HttpAppicationFactory</code>获取<code>HttpApplication</code>（根据Gloable文件）→ASP.NET管道流程</p><p>有关Application_Start()：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcApplication</span> :</span> System.Web.HttpApplication</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; get; <span class="built_in">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Name = <span class="string">"luox78"</span>;</span><br><span class="line">            。。。。</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于Name有可能拿的到有可能拿不到，原因：MvcApplication创建在IIS应用程序池，有缓存的时候会返回池里面第一个，没有则创建新的</p><p><strong><code>HttpAppicationFactory</code>获取<code>HttpApplication</code>（根据Global文件）：</strong></p><ul><li>初始化工厂：根据Global编译到<code>ApplicationType</code></li><li>确保<code>Application_Start</code>被调用</li><li>创建<code>HttpApplication</code>，先去缓存栈中取没有new</li></ul><p><strong>拓展方法使用一个技巧：</strong></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过更改命名空间实现所有的view均可以使用自己定义的htmlhelper</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">System.Web.Mvc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyHelperExt</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MvcHtmlString <span class="title">MyLabel</span>(<span class="params"><span class="keyword">this</span> HtmlHelper helper, <span class="keyword">string</span> text</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> MvcHtmlString.Create(<span class="string">$"&lt;span&gt;MyLabel:<span class="subst">&#123;text&#125;</span>&lt;/span&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;接上篇&quot;&gt;&lt;a href=&quot;#接上篇&quot; class=&quot;headerlink&quot; title=&quot;接上篇&quot;&gt;&lt;/a&gt;接上篇&lt;/h2&gt;&lt;p&gt;更新，删除可以先找出实体，然后直接更改属性保存即可，删除直接调用&lt;code&gt;remove&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;db&lt;/span&gt; = new luox78_成绩管理系统Entities();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; college = &lt;span class=&quot;keyword&quot;&gt;db&lt;/span&gt;.College.FirstOrDefault(&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;.Autoid == 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;college.CollegeName = &lt;span class=&quot;string&quot;&gt;&quot;changed&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;db&lt;/span&gt;.College.Remove(college);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;db&lt;/span&gt;.SaveChanges();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据主键查询可以使用&lt;code&gt;Find&lt;/code&gt;方法
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="entity framework" scheme="https://luox78.github.io/tags/entity-framework/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC01</title>
    <link href="https://luox78.github.io/2018/03/02/ASP.NET-MVC01/"/>
    <id>https://luox78.github.io/2018/03/02/ASP.NET-MVC01/</id>
    <published>2018-03-02T13:05:54.325Z</published>
    <updated>2018-03-02T16:03:40.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Entity-Framework"><a href="#Entity-Framework" class="headerlink" title="Entity Framework"></a>Entity Framework</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>自动属性</li><li>var</li><li>对象、集合初始化器</li><li>匿名类</li><li>拓展方法</li><li>lambda表达式</li></ul><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>托管于非托管代码</strong></p><p>C，c++编译 –》dll动态链接库 –》 二进制机器码，直接交给操作系统运行</p><p>C# 编译dll（程序集） –》 IL –》CLR 即时编译JIT –》 二进制机器码<a id="more"></a></p><p><strong>介绍EF</strong></p><p>ADO NET Entity Framework是以ADO NET为基础所发展出来的对象关系对应O/R Mapping（ORM）解决方案</p><p><strong>什么是0 / R Mapping</strong></p><p> 广义上，ORM指的是面向对象的对象模型和关系型数据库的数据结构之间的相互转换。</p><p>狭义上，ORM可以被认为是，基于关系型数据厍的数据存储，实现一个虚拟的面向对象的数据访问接口。理想情况下，基于这样一个面向对象的接口，持久化一个00对象应该不需要要了解任何关系型数据库存储数据的实现细节。</p><p>O（object 面向对象的对象模型）M（mapping xml文件）R（related 关系表）</p><h2 id="database-first"><a href="#database-first" class="headerlink" title="database first"></a>database first</h2><p>添加新项–》数据–》ADO.NET实体数据模型–》生成操作数据库上下文对象，model.cs，designer设计器</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">GraduationProjectEntities</span> : <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">GraduationProjectEntities</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params"><span class="string">"name=GraduationProjectEntities"</span></span>)<span class="comment">//base app.config里面的连接字符串</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//创建模型时的配置，这里database first不管    </span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnintentionalCodeFirstException();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表对应的DbSet</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">virtual</span> DbSet&lt;C__MigrationHistory&gt; C__MigrationHistory &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">virtual</span> DbSet&lt;ImageIndexes&gt; ImageIndexes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">virtual</span> DbSet&lt;TreeIndexes&gt; TreeIndexes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">virtual</span> DbSet&lt;TreeDetail&gt; TreeDetail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Context：上下文，entity framework所有有关数据库的操作都封装在此类中</p><p>访问表两种方式<code>dbContext.TreeDetail</code>或者<code>dbContext.Set&lt;TreeDetail&gt;()</code></p><p>创建好的edmx文件以xml形式打开</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SSDL content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">edmx:StorageModels</span>&gt;</span>。。<span class="tag">&lt;/<span class="name">edmx:StorageModels</span>&gt;</span>//存储模型</span><br><span class="line"><span class="comment">&lt;!-- CSDL content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">edmx:ConceptualModels</span>&gt;</span>。。<span class="tag">&lt;/<span class="name">edmx:ConceptualModels</span>&gt;</span>//抽象概念模型对应着实体也就是模型类</span><br><span class="line"><span class="comment">&lt;!-- C-S mapping content --&gt;</span>//mapping信息</span><br></pre></td></tr></table></figure><h2 id="EF增删改"><a href="#EF增删改" class="headerlink" title="EF增删改"></a>EF增删改</h2><p><strong>插入</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建访问数据库统一入口</span></span><br><span class="line"><span class="keyword">var</span> dbContext = <span class="keyword">new</span> <span class="type">Entities</span>();</span><br><span class="line"><span class="comment">//直接add添加记录</span></span><br><span class="line">dbContext.Set&lt;Person&gt;().Add(<span class="keyword">new</span> <span class="type">Person</span></span><br><span class="line"><span class="type"></span>&#123;</span><br><span class="line">    Id = <span class="number">10</span>,</span><br><span class="line">    Name = <span class="string">"luox"</span>,</span><br><span class="line">    Age = <span class="number">11</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">dbContext.Entry(<span class="keyword">new</span> <span class="type">Person</span></span><br><span class="line"><span class="type"></span>&#123;</span><br><span class="line">    Id = <span class="number">10</span>,</span><br><span class="line">    Name = <span class="string">"luox"</span>,</span><br><span class="line">    Age = <span class="number">11</span></span><br><span class="line">&#125;).State = System.Data.Entity.EntityState.Added;</span><br><span class="line"><span class="comment">//保存所有有标记的实体到数据库</span></span><br><span class="line">dbContext.SaveChanges();</span><br></pre></td></tr></table></figure><p><strong>更新</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dbContext = <span class="keyword">new</span> <span class="type">Entities</span>();</span><br><span class="line"><span class="comment">//先获取再更新</span></span><br><span class="line"><span class="comment">//修改必须要有主键，否则会报错</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="type">Person</span></span><br><span class="line"><span class="type"></span>&#123;</span><br><span class="line">    Id = <span class="number">2</span>,</span><br><span class="line">    Name = <span class="string">"luox78"</span>,</span><br><span class="line">    Age = <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//entity framework会根据状态生成对应的sql</span></span><br><span class="line">dbContext.Entry(person).State = System.Data.Entity.EntityState.Modified;</span><br><span class="line">dbContext.SaveChanges();</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dbContext = <span class="keyword">new</span> <span class="type">Entities</span>();</span><br><span class="line">          <span class="comment">//删除只要有主键就行了</span></span><br><span class="line">          <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="type">Person</span></span><br><span class="line"><span class="type"></span>          &#123;</span><br><span class="line">              Id = <span class="number">2</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="comment">//entity framework会根据状态生成对应的sql</span></span><br><span class="line">          dbContext.Entry(person).State = System.Data.Entity.EntityState.Deleted;</span><br><span class="line">          dbContext.SaveChanges();</span><br></pre></td></tr></table></figure><p>dbContext.Entry(person).State = System.Data.Entity.EntityState.Deleted；<strong>标记原理</strong>：</p><p>在ef保存改变里面的最后几步里面会遍历所有标记为删除，插入，更新的实体，将他们都执行相应的sql</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>接受在对象上下文中对对象所做的所有更改。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">AcceptAllChanges</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.ObjectStateManager.SomeEntryWithConceptualNullExists())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(Strings.ObjectContext_CommitWithConceptualNull);</span><br><span class="line">      <span class="keyword">foreach</span> (ObjectStateEntry objectStateEntry <span class="keyword">in</span> <span class="keyword">this</span>.ObjectStateManager.GetObjectStateEntries(EntityState.Deleted))</span><br><span class="line">        objectStateEntry.AcceptChanges();</span><br><span class="line">      <span class="keyword">foreach</span> (ObjectStateEntry objectStateEntry <span class="keyword">in</span> <span class="keyword">this</span>.ObjectStateManager.GetObjectStateEntries(EntityState.Added | EntityState.Modified))</span><br><span class="line">        objectStateEntry.AcceptChanges();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>报错：</strong></p><p>对一个或多个实体的校验失败：一般是插入的数据格式与期望格式不匹配</p><h2 id="EF生成流程"><a href="#EF生成流程" class="headerlink" title="EF生成流程"></a>EF生成流程</h2><p>ef封装操作 –》 ADO.NET操作–》sql–》执行</p><p>查询 linq –》 生成expression–》执行ADO.NET操作–》sql–》执行</p><p>与ADO.NET性能差距主要在封装，但相对于非常快的代码执行，ef性能差距主要表现在expression生成的sql代码有时候会有很大性能问题</p><h2 id="model-first"><a href="#model-first" class="headerlink" title="model first"></a>model first</h2><p>添加新项–》数据–》空ef设计器模型–》编辑设计器</p><p>另一个用于数据库设计的工具powerdesign</p><p>创建实体Person，PersonInfo，College，Subject</p><p>明确表之间对应关系：一对一，一对多，多对多</p><p>设计器里面添加三条关系，将Person与其他表联系起来：一个人一个信息，多个学院对应多个人，多个学科对应多个人</p><p><img src="https://luox78.github.io/images/ef1.png" alt=""></p><p>针对一对一，一对多关系很简单就是在表里面增加一条外键即可，但是多对多如何实现：</p><p>虽然设计器里面只是简单的用<em>—-</em>线连接了起来但是，生成的数据库中会增加一个两张表主键的对应关系的表，使用根据模型生成数据库，执行生成的sql（注意保存数据，表会被drop掉），可以看到存有两张表主键的对应关系的表</p><p>数据库变化了，可以在设计器中右键从数据库更新模型</p><h2 id="包含外键的数据插入"><a href="#包含外键的数据插入" class="headerlink" title="包含外键的数据插入"></a>包含外键的数据插入</h2><p>通过设置一个人对应多个学科可以看到Person.cs里面多了</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> ICollection&lt;Subject&gt; Subject &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure><p>Subject集合</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var dbEntities = new luox78_成绩管理系统Entities()<span class="comment">;</span></span><br><span class="line">            <span class="keyword">Subject </span><span class="keyword">subject1=new </span><span class="keyword">Subject()</span></span><br><span class="line"><span class="keyword"> </span>           &#123;</span><br><span class="line">                <span class="keyword">SubjectName </span>= <span class="string">"math"</span></span><br><span class="line">            &#125;<span class="comment">;</span></span><br><span class="line">            <span class="keyword">Subject </span><span class="keyword">subject2 </span>= new <span class="keyword">Subject()</span></span><br><span class="line"><span class="keyword"> </span>           &#123;</span><br><span class="line">                <span class="keyword">SubjectName </span>= <span class="string">"english"</span></span><br><span class="line">            &#125;<span class="comment">;</span></span><br><span class="line">            Person person=new Person()</span><br><span class="line">            &#123;</span><br><span class="line">                Name = <span class="string">"luox78"</span></span><br><span class="line">            &#125;<span class="comment">;</span></span><br><span class="line">            person.<span class="keyword">Subject.Add(subject1);</span></span><br><span class="line"><span class="keyword"> </span>           person.<span class="keyword">Subject.Add(subject2);</span></span><br><span class="line"><span class="keyword"> </span>           dbEntities.PersonSet.<span class="keyword">Add(person);</span></span><br><span class="line"><span class="keyword"> </span>           dbEntities.SaveChanges()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>插入有外键的数据共有2种方法：</p><p>通过entity里面的集合添加</p><p>将关联实体里面的外键属性set成对应的主键</p><h2 id="Linq查询"><a href="#Linq查询" class="headerlink" title="Linq查询"></a>Linq查询</h2><p>sql：select * （1）from Person（2） where name=“luox78”（3）</p><p>真正的执行顺序应该是231，linq里面一方面为了更符合操作，一方面为了能点出属性，先写from最后select</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> details = <span class="keyword">from</span> d <span class="keyword">in</span> dbContext.TreeDetail</span><br><span class="line">                         <span class="keyword">where</span> d.pingtaiziyuanhao == <span class="string">"11111111111"</span></span><br><span class="line">                         <span class="keyword">select</span> d;</span><br></pre></td></tr></table></figure><p>基本上所有的类sql语句都可以转换成拓展方法的形式，等同于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> details = dbContext.TreeDetail.Where(<span class="function"><span class="params">d</span> =&gt;</span> d.pingtaiziyuanhao == <span class="string">"11111111111"</span>);</span><br></pre></td></tr></table></figure><h2 id="IQueryable接口即linq实现机制"><a href="#IQueryable接口即linq实现机制" class="headerlink" title="IQueryable接口即linq实现机制"></a>IQueryable接口即linq实现机制</h2><p>上文说道linq查询，返回值类型，我用的var，实际上是IQueryable<t>，转到定义</t></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">__DynamicallyInvokable</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IQueryable</span> : <span class="title">IEnumerable</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>获取与 <span class="doctag">&lt;see cref="T:System.Linq.IQueryable" /&gt;</span> 的实例关联的表达式目录树。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>与 <span class="doctag">&lt;see cref="T:System.Linq.IQueryable" /&gt;</span> 的此实例关联的 <span class="doctag">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</span>。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">__DynamicallyInvokable</span>]</span><br><span class="line">    Expression Expression &#123; [__DynamicallyInvokable] <span class="keyword">get</span>; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>获取在执行与 <span class="doctag">&lt;see cref="T:System.Linq.IQueryable" /&gt;</span> 的此实例关联的表达式目录树时返回的元素的类型。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>一个 <span class="doctag">&lt;see cref="T:System.Type" /&gt;</span>，表示在执行与之关联的表达式目录树时返回的元素的类型。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">__DynamicallyInvokable</span>]</span><br><span class="line">    Type ElementType &#123; [__DynamicallyInvokable] <span class="keyword">get</span>; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>获取与此数据源关联的查询提供程序。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>与此数据源关联的 <span class="doctag">&lt;see cref="T:System.Linq.IQueryProvider" /&gt;</span>。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">__DynamicallyInvokable</span>]</span><br><span class="line">    IQueryProvider Provider &#123; [__DynamicallyInvokable] <span class="keyword">get</span>; &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Expression：为linq编译时生成的表达式</p><p>ElementType：Expression返回类型</p><p>Provider：获取与此数据源关联的查询提供程序（对应数据源的驱动方法），linq可以提供对不同的集合类型查询，就是Provider实现的</p><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><p>对于像</p><pre><code>var details = from d in dbContext.TreeDetail                     where d.pingtaiziyuanhao == &quot;11111111111&quot;                     select d;</code></pre><p>的linq语句，只是在编译时将detail中的属性填充满，真正存在数据库中的数据此时并没有取出</p><p>只有在使用到details时，才会执行sql查询</p><p>情况一：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dbContext = <span class="keyword">new</span> GraduationProjectEntities();</span><br><span class="line">            <span class="keyword">var</span> detail = dbContext.TreeDetail.Take(<span class="number">100</span>).OrderBy(t =&gt; t.pingtaiziyuanhao);</span><br><span class="line">            <span class="comment">//List&lt;TreeDetail&gt; list = detail.ToList();</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> treeDetail <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$"<span class="subst">&#123;treeDetail.ziyuanbianhao&#125;</span>--<span class="subst">&#123;treeDetail.zhongzhimingcheng&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            dbContext.SaveChanges();</span><br></pre></td></tr></table></figure><p>只有在foreach时才会查询</p><p>问题</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> treeDetail <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$"<span class="subst">&#123;treeDetail.ziyuanbianhao&#125;</span>--<span class="subst">&#123;treeDetail.zhongzhimingcheng&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> treeDetail <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$"<span class="subst">&#123;treeDetail.ziyuanbianhao&#125;</span>--<span class="subst">&#123;treeDetail.zhongzhimingcheng&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>两次foreach会执行两遍查询：将IQueryable集合转换成List集合<code>List&lt;TreeDetail&gt; list = detail.ToList();</code></p><p>集合类型：本地型集合（数据存储在内存中），离线型集合（IQueryable，数据并没有分配至内存）</p><p>所以讲IQueryable转换成list实际就已经取出数据至内存中了</p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var detail = dbContext.TreeDetail.Take(<span class="number">100</span>).OrderBy(t =&gt; t.pingtaiziyuanhao).Skip(<span class="number">100</span>*(<span class="number">2</span><span class="number">-1</span>));</span><br></pre></td></tr></table></figure><p>ef帮我们实现了相应的sql编写，查看sql语句可以看到就是通过row_number()实现的分页sql</p><p>方法链的where，select顺序没有限制，因为最后会编译成相应表达式</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Entity-Framework&quot;&gt;&lt;a href=&quot;#Entity-Framework&quot; class=&quot;headerlink&quot; title=&quot;Entity Framework&quot;&gt;&lt;/a&gt;Entity Framework&lt;/h2&gt;&lt;h3 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自动属性&lt;/li&gt;
&lt;li&gt;var&lt;/li&gt;
&lt;li&gt;对象、集合初始化器&lt;/li&gt;
&lt;li&gt;匿名类&lt;/li&gt;
&lt;li&gt;拓展方法&lt;/li&gt;
&lt;li&gt;lambda表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;托管于非托管代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C，c++编译 –》dll动态链接库 –》 二进制机器码，直接交给操作系统运行&lt;/p&gt;
&lt;p&gt;C# 编译dll（程序集） –》 IL –》CLR 即时编译JIT –》 二进制机器码
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="entity framework" scheme="https://luox78.github.io/tags/entity-framework/"/>
    
      <category term="entity framework designer" scheme="https://luox78.github.io/tags/entity-framework-designer/"/>
    
      <category term="database first" scheme="https://luox78.github.io/tags/database-first/"/>
    
      <category term="model first" scheme="https://luox78.github.io/tags/model-first/"/>
    
      <category term="linq to ef" scheme="https://luox78.github.io/tags/linq-to-ef/"/>
    
  </entry>
  
  <entry>
    <title>Asp.Net MVC学习总结之过滤器详解</title>
    <link href="https://luox78.github.io/2018/02/28/filters/"/>
    <id>https://luox78.github.io/2018/02/28/filters/</id>
    <published>2018-02-28T13:39:16.001Z</published>
    <updated>2018-02-28T13:41:54.509Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、过滤器简介</strong></p><p><strong>1.1、理解什么是过滤器</strong></p><p>1、过滤器（Filters）就是向请求处理管道中注入额外的逻辑。提供了一个简单而优雅的方式来实现横切关注点。</p><p>2、所谓的过滤器（Filters），MVC框架里面的过滤器完全不同于ASP.NET平台里面的Request.Filters和Response.Filter对象，它们主要是实现请求和响应流的传输。通常我们所说的过滤器是指MVC框架里面的过滤器。</p><p>3、过滤器可以注入一些代码逻辑到请求处理管道中，是基于C#的Attribute的实现。当负责调用Action的类ControllerActionInvoker在调用执行Action的时候会检查Action上面的Attribute并查看这些Attribute是否实现了指定的接口，以便进行额外的代码注入处理<a id="more"></a></p><p><strong> 1.2、理解为什么要使用过滤器</strong></p><p>假设你做了一个小项目，其中某个功能是操作管理用户信息模块，有这样一个需求，对用户信息管理必须是已通过认证的用户才能操作，我们可以在每一个Action方法里面检查认证请求，如下所示：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MvcFilterDmo.Core;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> System.Web.Security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MvcFilterDmo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!Request.IsAuthenticated)</span><br><span class="line">      &#123;</span><br><span class="line">        FormsAuthentication.RedirectToLoginPage();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//操作部分...</span></span><br><span class="line">      <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Insert</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!Request.IsAuthenticated)</span><br><span class="line">      &#123;</span><br><span class="line">        FormsAuthentication.RedirectToLoginPage();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//操作部分...</span></span><br><span class="line">      <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!Request.IsAuthenticated)</span><br><span class="line">      &#123;</span><br><span class="line">        FormsAuthentication.RedirectToLoginPage();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//操作部分...</span></span><br><span class="line">      <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Delete</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!Request.IsAuthenticated)</span><br><span class="line">      &#123;</span><br><span class="line">        FormsAuthentication.RedirectToLoginPage();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//操作部分...</span></span><br><span class="line">      <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他Action操作方法</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码，可以发现使用这种方式检查请求认证有许多重复的地方，这也就是为什么要使用过滤器的原因，使用过滤器可以实现相同的效果。如下所示：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MvcFilterDmo.Core;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> System.Web.Security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MvcFilterDmo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="meta">Authorize</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//操作部分...</span></span><br><span class="line">      <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Insert</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//操作部分...</span></span><br><span class="line">      <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Edit</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">      <span class="comment">//操作部分...</span></span><br><span class="line">      <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Delete</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//操作部分...</span></span><br><span class="line">      <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他Action操作方法</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器是.NET里面的特性（Attributes），它提供了添加到请求处理管道的额外方法。这里使用Authorize过滤器可以实现同样的效果，不过代码就显然比之前更加简洁优雅。</p><p> <strong>二、过滤器的使用</strong></p><p><strong>2.1、基本类型的过滤器</strong></p><p>过滤器实现的机制：在MVC框架调用一个Action之前，它会检查方法的定义中是否实现了特性（Attributes），如果实现的话，那么在请求处理管道适当的位置，该特性定义的方法会被调用。</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001555.png" alt="img"></p><p>ActionFilterAttribute类既实现了IactionFilter接口，也实现IResultFilter接口。这是一个抽象类，它要求你必须提供一个实现。AuthorizeAttribute和HandleErrorAttribute类，则包含了一些有用的特性，并且可以不必创建派生类进行使用。</p><p><strong>2.2、过滤器的应用、应用方式以及执行顺序</strong></p><p>应用： 过滤器可以被应用到控制器上也可以用到Action方法上，应用到控制上时，表示所有的Action方法都有了这个过滤器，并且可以混合使用，或多次使用，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[A] <span class="comment">//表示所有的Action方法都会应用A过滤器</span></span><br><span class="line"><span class="keyword">Public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span>：<span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  [B]<span class="comment">//B,C过滤器只作用于此Action方法，但它也会有A过滤器的应用效果</span></span><br><span class="line">  [C]</span><br><span class="line">  <span class="keyword">Public</span> ActionResult Index()</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="comment">//操作部分...</span></span><br><span class="line">     <span class="keyword">return</span> View();</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用方式：</strong>特性的方式，如上面代码所示。</p><p><strong>执行顺序：</strong>相同类型过滤器，执行顺序靠近方法的先执行，不同类型的过滤器一般执行顺序为【authorize—&gt;action—&gt;actionResult】至于异常过滤器不分先后，只要抛出异常时就会执行异常过滤器。如果要调整执行顺序，可以通过调整Order方法值大小来控制执行顺序，值越小，越先执行。下图是Action/Result过滤器应用的执行顺序图</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001556.png" alt="img"></p><p>(1)、相同类型过滤器应用示例：两个自定义Action过滤器MyFirstFilter，MyThreeFilter应用到同一个Action方法Index上。</p><p>Three控制器代码如下：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001557.png" alt="img"></p><p>MyFirstFilter 代码如下：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001558.png" alt="img"></p><p>MyThreeFilter代码如下：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001559.png" alt="img"></p><p>运行结果如下：</p><p> <img src="http://files.jb51.net/file_images/article/201703/2017030616001560.png" alt="img"></p><p>(2)、不同类型过滤器应用示例：有一个自定义Action过滤器MyFirstFilter，有一个自定义Result过滤器MySecondFilter，应用到同一个Action方法Index上。</p><p>Three控制器代码如下：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001561.png" alt="img"></p><p>MyFirstFilter 代码如下：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001558.png" alt="img"></p><p>MySecondFilter代码如下：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001562.png" alt="img"></p><p>运行结果如下：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001563.png" alt="img"></p><p>看完上面的解释，可能你现在对这些过滤器的执行顺序，以及如何自定义过滤器还不明白，不要紧，下面我们会逐一介绍这几个基本的过滤器的使用，以及如何自定义过滤器。</p><p><strong> 2.3、使用授权过滤器</strong></p><p>所有实现了IAuthorizationFilter接口的都可以称之为授权过滤器:其定义如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IAuthorizationFilter</span><br><span class="line">   &#123;</span><br><span class="line">      void OnAuthorization(AuthorizationContext filterContext);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>由于MVC框架系统自带的AuthorizeAttribute实现有一些突出的功能，而这种牵涉到安全的代码一定要谨慎的编写，所以一般我们不会直接实现这个接口，而是去继承AuthorizeAttribute这个类，并重写其AuthorizeCore方法，签名为： bool AuthorizeCore(HttpContextBase httpContext) 而处理授权失败的时候，可以重写其HandleUnauthorizedRequest方法，其签名为： void HandleUnauthorizedRequest(AuthorizationContext context) 。注意：验证与授权是两回事，验证发生在授权之前。</p><p>默认的授权过滤器已经有了验证的功能，其验证的机理是利用Asp.net平台自带的验证机制，如表单验证和Windows验证。除了验证功能，它本身还有授权的功能。授权过滤器是所有过滤器中最早运行的。</p><p>经过Route到达了控制器的时候，在调用Action之前，MVC框架会检测在相关的Action上是否有授权过滤器，如果有会调用OnAuthorization方法，如果此方法批准了请求，才会调用相应的Action。</p><p>使用授权过滤器几种情况如下：</p><p>1.直接在Action上或者控制器上加Authorize，表示启用了验证，但不牵涉到授权。</p><p>2.添加Authorize(Users=“a,b”)]，表示启用了验证，并且也启用了授权，只有a或者b用户能访问此控制器。</p><p>3.当添加Authorize（Roles=“admin,Member”)]时的步骤如下：</p><p>—利用asp.net自带的角色提供者，或者实现自己的角色提供者，实现自己的角色提供者时，只需要集成RoleProvider类型，并实现其中的所有方法或部分方法，最好实现所有方法。</p><p>—在Web程序的根目录的Web.config文件中配置角色管理者。</p><p>—在适当的Action中利用Roles类型来访问自己创建的RoleProvider中的相关方法。</p><p><strong>使用内置的授权过滤器</strong></p><p>MVC框架内置的授权过滤器AuthorizeAttribute，它允许我们使用这个类的两个公共属性来指定授权策略，如下所示：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001564.png" alt="img"></p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001565.png" alt="img"></p><p> Users和Roles两者是并且的关系，例如Users=“a,b,c”,Roles=“admin”,表示用户是a，b,c 其中一个并且是Admin角色才能访问。</p><p><strong>创建自定义的授权过滤器</strong></p><p>方式一：直接实现IAuthorizationFilter接口，但不推荐这样做，因为牵涉到安全方面的代码。</p><p>方式二：继承AuthorizeAttribute这个类，并重写其AuthorizeCore方法，签名为： bool AuthorizeCore(HttpContextBase httpContext)，代码如下所示：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyAuthorizeAttribute</span> : <span class="title">AuthorizeAttribute</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span>[] allowedUsers;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAuthorizeAttribute</span>(<span class="params"><span class="keyword">params</span> <span class="keyword">string</span>[] users</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      allowedUsers = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"admin"</span>, <span class="string">"user1"</span>, <span class="string">"xf"</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">bool</span> <span class="title">AuthorizeCore</span>(<span class="params">HttpContextBase httpContext</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> httpContext.Request.IsAuthenticated &amp;&amp;allowedUsers.Contains(httpContext.User.Identity.Name, </span><br><span class="line">        StringComparer.InvariantCultureIgnoreCase);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>2.4、使用动作过滤器</strong></p><p> 动作过滤器是可以以用于任何目的的多用途过滤器，创建自定义动作过滤器需要实现IActionFilter接口，该接口代码如下所示：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001566.png" alt="img"></p><p>该接口定义了两个方法，MVC框架在调用动作方法之前，会调用OnActionExecting方法。在调用动作方法之后，则会调用OnActionExecuted方法。</p><p><strong>实现OnActionExecting方法</strong></p><p>参数ActionExecutingContext对象继承于ControllerContext，其中的2个属性：</p><p>ActionDescriptor：提供了关于Action方法的相关信息</p><p>Result：类型为ActionResult，通过给这个属性设置一个非null的值就可以取消这个请求。</p><p>我们可以用过滤器来取消一个请求，通过设置Result属性即可。代码如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActionFilterAttribute</span> :</span> FilterAttribute, IActionFilter</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span><span class="params">(ActionExecutingContext filterContext)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(filterContext.HttpContext.Request.IsLocal)</span><br><span class="line">      &#123;</span><br><span class="line">        filterContext.Result = <span class="keyword">new</span> HttpNotFoundResult();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnActionExecuted</span><span class="params">(ActionExecutedContext filterContext)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">//未做实现</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个例子通过用OnActionExecuting方法检查请求是否来自本地机器，如果是，编队用户返回一个“404”未找到的响应。运行结果如下图：</p><p> <img src="http://files.jb51.net/file_images/article/201703/2017030616001567.png" alt="img"></p><p><strong>实现OnActionExecuted方法</strong></p><p>我们也可以通过OnActionExecuted方法来执行一些跨越动作方法的任务，下面这个例子是计算动作方法运行的时间，代码如下：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyActionFilterAttribute : FilterAttribute, IActionFilter</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">private</span> Stopwatch <span class="built_in">timer</span>;</span><br><span class="line">    <span class="keyword">public</span> void OnActionExecuting(ActionExecutingContext filterContext)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">timer</span> = Stopwatch.StartNew();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> void OnActionExecuted(ActionExecutedContext filterContext)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">timer</span>.<span class="keyword">Stop</span>();</span><br><span class="line">      <span class="keyword">if</span> (filterContext.Exception == <span class="literal">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        filterContext.HttpContext.<span class="built_in">Response</span>.Write(</span><br><span class="line">          <span class="built_in">string</span>.Format(<span class="string">"动作方法延迟的时间: &#123;0&#125;"</span>,</span><br><span class="line">            <span class="built_in">timer</span>.Elapsed.TotalSeconds));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将自定义的动作过滤器MyActionFilter应用到HomeController的Index方法上，运行结果如下：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001568.png" alt="img"></p><p><strong>2.5、使用结果过滤器</strong></p><p>结果过滤器是多用途的过滤器，他会对动作方法所产生结果进行操作，结果过滤器实现IResultFilter接口，创建自定义结果过滤器需要现IResultFilter接口，该接口代码如下所示：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001569.png" alt="img"></p><p>当结果过滤器运用于一个动作方法时，会在动作方法返回动作结果之前，调用OnResultExecuting方法，在返回动作结果之后，会调用OnResultExecuted方法。下面这个例子是计算动作方法返回结果运行的时间，代码如下：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyResultFilterAttribute : FilterAttribute, IResultFilter</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">private</span> Stopwatch <span class="built_in">timer</span>;</span><br><span class="line">    <span class="keyword">public</span> void OnResultExecuting(ResultExecutingContext filterContext)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">timer</span> = Stopwatch.StartNew();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> void OnResultExecuted(ResultExecutedContext filterContext)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">timer</span>.<span class="keyword">Stop</span>();</span><br><span class="line">      filterContext.HttpContext.<span class="built_in">Response</span>.Write(<span class="built_in">string</span>.Format(<span class="string">"结果执行延迟时间: &#123;0&#125;"</span>, <span class="built_in">timer</span>.Elapsed.TotalSeconds));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将自定义的结果过滤器MyResultFilter应用到HomeController的Index方法上，运行结果如下：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001570.png" alt="img"> </p><p>需要注意的是：动作过滤器是运行在页面输出之前，结果过滤器是运行在页面输出之后。</p><p><strong>2.6、使用异常过滤器</strong></p><p>异常过滤器只有在调用一个动作方法而抛出未处理的异常才会运行，这种异常来自以下位置：</p><p>A、另一种过滤器（授权、动作、或结果过滤器）。</p><p>B、动作方法本身。</p><p>C、当动作结果被执行时。</p><p><strong>使用内置的异常过滤器</strong></p><p>HandleErrorAttribute(处理程序错误特性)，它是MVC内嵌的异常过滤器，有以下3个重要的属性：</p><p>1.ExceptionType：类型为Type，表示希望被此过滤器处理的异常类型，包括其子类型，默认值为System.Exception</p><p>2.View:类型为string，表示此过滤器呈递的视图页面，默认值为Error</p><p>3.Master：呈递的视图页的母板页，如果不指定，视图会用其默认的母版页</p><p>内嵌的HandleErrorException只有在配置文件Web.config中配置的CustomError 的mode设置为on的时候才生效（其默认模式为RemoteOnly）,如下图所示：</p><p> <img src="http://files.jb51.net/file_images/article/201703/2017030616001571.png" alt="img"></p><p>此过滤器还会给视图传递一个HandleErrorInfo类型的对象给视图，以便视图可以显示一些额外的关于错误的信息。下面是使用异常过滤器的示例。</p><p>应用到Index动作方法上：</p><p> <img src="http://files.jb51.net/file_images/article/201703/2017030616001572.png" alt="img"></p><p>在Views/Shared文件夹下添加一个显示异常信息的视图页SpecialError.cshtml,页面代码如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@model</span> HandleErrorInfo</span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width"</span> /&gt;</span><br><span class="line">    &lt;title&gt;SpecialError&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        There was a&lt;b&gt;<span class="variable">@Model</span>.Exception.GetType().Name&lt;/b&gt;</span><br><span class="line">        while rendering&lt;b&gt;<span class="variable">@Model</span>.ControllerName&lt;/b&gt;'s</span><br><span class="line">        &lt;b&gt;<span class="variable">@Model</span>.ActionName&lt;/b&gt; action</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p> <img src="http://files.jb51.net/file_images/article/201703/2017030616001673.png" alt="img"></p><p><strong>创建自定义的异常过滤器</strong></p><p>如果我们对异常过滤器有特殊的需求，可以通过自定义的异常过滤器来完成，创建自定义异常过滤器必须实现IExceptionFilter接口，该接口代码如下：</p><p> <img src="http://files.jb51.net/file_images/article/201703/2017030616001674.png" alt="img"></p><p>当一个未知处理异常发生时，OnException方法会被调用。该方法的传递一个ExceptionContext对象，派生于ControllerContext类，定义了一些额外的过滤器专有属性如下表所示：</p><p><img src="http://files.jb51.net/file_images/article/201703/2017030616001675.png" alt="img"></p><p>抛出的异常通过Exception属性是可以访问的。通过把ExceptionHandled属性设置为true,一个异常过滤器可以报告它已经处理了该异常，应用于一个动作的所有异常过滤器都会被调用。</p><p>需要注意的是：如果一个动作方法的所有异常过滤器均为把ExceptionHandled属性设置为true，MVC框架将使用默认的ASP.NET异常处理程序。</p><p>Result属性有异常过滤器使用，以告诉MVC框架要做什么，异常过滤器的两个主要应用是记录该异常到日志，并把适当的消息显示给用户。下面的代码将演示通过创建一个自定义的异常过滤器，当一个特定的钟类的未处理异常出现时，把该用户重定向到一个指定的错误页面。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExectionAttribute</span>:<span class="title">FilterAttribute</span>,<span class="title">IExceptionFilter</span></span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> OnException(ExceptionContext filterContext)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(!filterContext.ExceptionHandled&amp;&amp;</span><br><span class="line">        filterContext.Exception <span class="keyword">is</span> NullReferenceException)</span><br><span class="line">      &#123;</span><br><span class="line">        filterContext.Result = <span class="keyword">new</span> RedirectResult(<span class="string">"~/Content/SpecialErrorPage.html"</span>);</span><br><span class="line">        filterContext.ExceptionHandled = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在项目根目录添加一个名为Content的文件夹，在该文件夹下创建SpeciErrorPage.html文件，当异常被处理时，将以这个错误页面显示个用户。该页面代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sorry<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is a Excetption test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  There was aNullReferenceException while renderingHome's Index action </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在控制器中应用MyExection异常过滤器，并主动让其抛出一个空引用异常，以便测试。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">  &#123;</span><br><span class="line">    [<span class="meta">MyExection</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullReferenceException();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p> <img src="http://files.jb51.net/file_images/article/201703/2017030616001676.png" alt="img"></p><p>总结：本文章简单总结了对过滤器的理解以及如何使用MVC框架内置基本的过滤器和如何自定义过滤器及应用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一、过滤器简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.1、理解什么是过滤器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、过滤器（Filters）就是向请求处理管道中注入额外的逻辑。提供了一个简单而优雅的方式来实现横切关注点。&lt;/p&gt;
&lt;p&gt;2、所谓的过滤器（Filters），MVC框架里面的过滤器完全不同于ASP.NET平台里面的Request.Filters和Response.Filter对象，它们主要是实现请求和响应流的传输。通常我们所说的过滤器是指MVC框架里面的过滤器。&lt;/p&gt;
&lt;p&gt;3、过滤器可以注入一些代码逻辑到请求处理管道中，是基于C#的Attribute的实现。当负责调用Action的类ControllerActionInvoker在调用执行Action的时候会检查Action上面的Attribute并查看这些Attribute是否实现了指定的接口，以便进行额外的代码注入处理
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="filters" scheme="https://luox78.github.io/tags/filters/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET08</title>
    <link href="https://luox78.github.io/2018/02/28/ASP.NET08/"/>
    <id>https://luox78.github.io/2018/02/28/ASP.NET08/</id>
    <published>2018-02-28T11:29:06.105Z</published>
    <updated>2018-02-28T13:46:35.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置错误页"><a href="#配置错误页" class="headerlink" title="配置错误页"></a>配置错误页</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;customErrors mode=<span class="string">"On"</span> defaultRedirect=<span class="string">"~/test2/404.htm"</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">error</span> statusCode=<span class="string">"403"</span> redirect=<span class="string">"NoAccess.htm"</span> /&gt;</span><br><span class="line">      &lt;<span class="keyword">error</span> statusCode=<span class="string">"404"</span> redirect=<span class="string">"FileNotFound.htm"</span> /&gt;</span><br><span class="line">    &lt;/customErrors&gt;</span><br><span class="line">---------------------------在Application_Error中发生错误时转向另外一个页面------------------------</span><br><span class="line">protected void Application_Error(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> errorMsg = Context.<span class="keyword">Error</span>.Message + Environment.NewLine + Context.<span class="keyword">Error</span>.StackTrace + <span class="string">"【"</span> + DateTime.<span class="built_in">Now</span>.ToString() + <span class="string">"】"</span> + Environment.NewLine + <span class="string">"===================================================="</span> + Environment.NewLine;</span><br><span class="line">            File.AppendAllText(<span class="built_in">Server</span>.MapPath(<span class="string">"~/log.txt"</span>), errorMsg);</span><br><span class="line">            <span class="built_in">Response</span>.Redirect(<span class="string">"~/test2/404.htm"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>mvc中只能将静态页面放在根目录或者创建一个Error控制器<a id="more"></a></p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><a href="https://luox78.github.io/2018/02/01/cache/">https://luox78.github.io/2018/02/01/cache/</a></p><p>分布式：一个业务分拆多个子业务，部署在不同的服务器上（redis缓存）</p><p>集群：同一个业务，部署在多个服务器上</p><h3 id="创建缓存"><a href="#创建缓存" class="headerlink" title="创建缓存"></a>创建缓存</h3><ul><li><p>Cache[“key”]=value;</p></li><li><p>Cache.Insert();</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void <span class="keyword">Insert</span>(<span class="keyword">string</span> <span class="keyword">key</span>, <span class="keyword">object</span> <span class="keyword">value</span>, CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, CacheItemPriority <span class="keyword">priority</span>, CacheItemRemovedCallback onRemoveCallback);</span><br></pre></td></tr></table></figure><p>dependencies：缓存依赖，一旦依赖的东西改变缓存失效</p><p>absoluteExpiration：绝对过期时间</p><p>slidingExpiration：滑动过期时间（相对每次使用之后）</p><p>priority：被移除优先级</p><p>onRemoveCallback：被移除回调函数</p></li></ul><p>文件依赖例子</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public ActionResult Test4()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(HttpRuntime.Cache[<span class="string">"Time"</span>] == <span class="built_in">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">string</span> <span class="built_in">time</span> = GetTime();</span><br><span class="line">                HttpRuntime.Cache.Insert(<span class="string">"Time"</span>, <span class="built_in">time</span>,<span class="keyword">new</span> CacheDependency(Server.MapPath(<span class="string">"~/Views/Cache/Cache.txt"</span>)));</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">View</span>(model:<span class="built_in">time</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">View</span>(model:HttpRuntime.Cache[<span class="string">"Time"</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟耗时请求</span></span><br><span class="line">        public <span class="keyword">string</span> GetTime()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">System</span>.Threading.Thread.<span class="built_in">Sleep</span>(<span class="number">3000</span>);</span><br><span class="line">            <span class="keyword">return</span> DateTime.Now.ToString();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">HttpRuntime</span><span class="selector-class">.Cache</span><span class="selector-class">.Insert</span>("<span class="selector-tag">Time</span>", <span class="selector-tag">DateTime</span><span class="selector-class">.Now</span><span class="selector-class">.ToString</span>(), <span class="selector-tag">null</span>, <span class="selector-tag">Cache</span><span class="selector-class">.NoAbsoluteExpiration</span>, <span class="selector-tag">TimeSpan</span><span class="selector-class">.FromSeconds</span>(10<span class="selector-class">.0</span>));</span><br></pre></td></tr></table></figure><p>使用Cache.NoAbsoluteExpiration跳过设置绝对时间</p><h3 id="数据库依赖"><a href="#数据库依赖" class="headerlink" title="数据库依赖"></a>数据库依赖</h3><ol><li>数据库缓存依赖</li></ol><p>-S服务器名称  -E集成身份验证  -ed启动 -d数据库名称  -et指定缓冲依赖的表名 -t表名<br>在vs2010的命令提示符中运行（切换到aspnet_regsql.exe所在的目录）<br>aspnet_regsql -S steve-pc -E -ed -d apsxDb -et -t TblComments</p><p>缓存依赖禁用该数据库<br>aspnet_regsql -S steve-pc -E -dd -d apsxDb</p><ol><li><p>依赖于数据库的web.config配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.web</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caching</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">sqlCacheDependency</span> <span class="attr">enabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">databases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"apsxDbEntityName"</span> <span class="attr">connectionStringName</span>=<span class="string">"connStr"</span> <span class="attr">pollTime</span>=<span class="string">"500"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">databases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">sqlCacheDependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">caching</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">system.web</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">System</span>.Web.Caching.SqlCacheDependency dep = <span class="keyword">new</span> <span class="keyword">System</span>.Web.Caching.SqlCacheDependency(<span class="string">"apsxDbEntityName"</span>, <span class="string">"Aspx_Students"</span>);<span class="comment">//webconfig里面的配置名+表名</span></span><br><span class="line">Cache.Insert(<span class="string">"list"</span>, list, dep);</span><br></pre></td></tr></table></figure></li></ol><p>缓存使用场景第一个：访问量大，变化比较少   典型场景：京东菜单项变化比较少，访问又特别大 </p><h2 id="HttpModule"><a href="#HttpModule" class="headerlink" title="HttpModule"></a>HttpModule</h2><p>创建一个实现了IHttpModule接口的类。<br>在Init方法中为HttpAplication参数注册事件。<br>在web.config中配置使用具体的HttpModule</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">httpModules</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"m1"</span> <span class="attr">type</span>=<span class="string">"Ajax.CRUD.UI.test2.TestModule,应用程序集的名称"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">httpModules</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StopIP</span> : <span class="title">IHttpModule</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="comment">//throw new NotImplementedException();</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           context.BeginRequest += <span class="keyword">new</span> EventHandler(context_BeginRequest);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">context_BeginRequest</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           HttpApplication ha = sender <span class="keyword">as</span> HttpApplication;</span><br><span class="line">           <span class="keyword">if</span> (ha.Request.UserHostAddress == <span class="string">"192.168.1.100"</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               ha.Response.Redirect(<span class="string">"~/EP1.htm"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置错误页&quot;&gt;&lt;a href=&quot;#配置错误页&quot; class=&quot;headerlink&quot; title=&quot;配置错误页&quot;&gt;&lt;/a&gt;配置错误页&lt;/h2&gt;&lt;figure class=&quot;highlight vbscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;customErrors mode=&lt;span class=&quot;string&quot;&gt;&quot;On&quot;&lt;/span&gt; defaultRedirect=&lt;span class=&quot;string&quot;&gt;&quot;~/test2/404.htm&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt; statusCode=&lt;span class=&quot;string&quot;&gt;&quot;403&quot;&lt;/span&gt; redirect=&lt;span class=&quot;string&quot;&gt;&quot;NoAccess.htm&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt; statusCode=&lt;span class=&quot;string&quot;&gt;&quot;404&quot;&lt;/span&gt; redirect=&lt;span class=&quot;string&quot;&gt;&quot;FileNotFound.htm&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/customErrors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------在Application_Error中发生错误时转向另外一个页面------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;protected void Application_Error(object sender, EventArgs e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; errorMsg = Context.&lt;span class=&quot;keyword&quot;&gt;Error&lt;/span&gt;.Message + Environment.NewLine + Context.&lt;span class=&quot;keyword&quot;&gt;Error&lt;/span&gt;.StackTrace + &lt;span class=&quot;string&quot;&gt;&quot;【&quot;&lt;/span&gt; + DateTime.&lt;span class=&quot;built_in&quot;&gt;Now&lt;/span&gt;.ToString() + &lt;span class=&quot;string&quot;&gt;&quot;】&quot;&lt;/span&gt; + Environment.NewLine + &lt;span class=&quot;string&quot;&gt;&quot;====================================================&quot;&lt;/span&gt; + Environment.NewLine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            File.AppendAllText(&lt;span class=&quot;built_in&quot;&gt;Server&lt;/span&gt;.MapPath(&lt;span class=&quot;string&quot;&gt;&quot;~/log.txt&quot;&lt;/span&gt;), errorMsg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;Response&lt;/span&gt;.Redirect(&lt;span class=&quot;string&quot;&gt;&quot;~/test2/404.htm&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mvc中只能将静态页面放在根目录或者创建一个Error控制器
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="cache" scheme="https://luox78.github.io/tags/cache/"/>
    
      <category term="错误页" scheme="https://luox78.github.io/tags/%E9%94%99%E8%AF%AF%E9%A1%B5/"/>
    
      <category term="HttpModule" scheme="https://luox78.github.io/tags/HttpModule/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET07</title>
    <link href="https://luox78.github.io/2018/02/27/ASP.NET07/"/>
    <id>https://luox78.github.io/2018/02/27/ASP.NET07/</id>
    <published>2018-02-27T11:28:27.526Z</published>
    <updated>2018-02-28T13:41:37.781Z</updated>
    
    <content type="html"><![CDATA[<p>AJAX:”Asynchronous JavaScript and XML”<br>中文意思：异步JavaScript和XML。<br>指一种创建交互式网页应用的网页开发技术。<a id="more"></a></p><h2 id="XmlHttpRequest对象"><a href="#XmlHttpRequest对象" class="headerlink" title="XmlHttpRequest对象"></a>XmlHttpRequest对象</h2><h3 id="AJAX优点"><a href="#AJAX优点" class="headerlink" title="AJAX优点"></a>AJAX优点</h3><p>Ajax在本质上是一个浏览器端的技术<br>Ajax技术之主要目的在于局部交换客户端及服务器间之数据<br>这个技术的主角XMLHttpRequest 的最主要特点，在于能够不用重新载入整个版面来更新资料，也就是所谓的Refresh without Reload(轻刷新)<br>与服务器之间的沟通，完全是透过Javascript 来实行<br>使用XMLHttpRequest 本身传送的数据量很小，所以反应会更快，也就让网络程式更像一个桌面应用程序<br>AJAX 就是运用Javascript 在后台悄悄帮你去跟服务器要资料，最后再由Javascript 或DOM 来帮你呈现结果，因为所有动作都是由Javascript 代劳，所以省去了网页重载的麻烦，使用者也感受不到等待的痛苦</p><h3 id="异步请求基本步骤"><a href="#异步请求基本步骤" class="headerlink" title="异步请求基本步骤"></a>异步请求基本步骤</h3><p>使用XMLHttpRequest对象</p><p>按照下面模式，可以同步地XMLHttpRequest对象：</p><p>创建对象； - new  (叫助手过来)<br>创建请求； - open (告诉他要去做的事情)<br>发送请求； - send (去吧)</p><h3 id="readyState属性"><a href="#readyState属性" class="headerlink" title="readyState属性"></a>readyState属性</h3><p>readyState属性指出了XMLHttpRequest对象在发送/接收数据过程中所处的几个状态。XMLHttpRequest对象会经历5种不同的状态。</p><p>0：未初始化。new完后;<br>1：已打开。对象已经创建并初始化，但还未调用send方法<br>2：已发送。已经调用send 方法，但该对象正在等待状态码和头的返回；<br>3：正在接收。已经接收了部分数据，但还不能使用该对象的属性和方法，因为状态和响应头不完整；<br>4：已加载。所有数据接收完毕</p><h3 id="XMLHttpRequest对象属性"><a href="#XMLHttpRequest对象属性" class="headerlink" title="XMLHttpRequest对象属性"></a>XMLHttpRequest对象属性</h3><p>一、onreadystatechange属性，设置回调函数。<br>二、readyState属性，获取当前XMLHttpRequest对象执行的状态：</p><pre><code>1&gt; 0表示以创建XMLHttpRequest对象，但是还没有初始化，即没有调用open()方法设置XMLHttpRequest对象。2&gt;1表示创建了XMLHttpRequest对象，并且调用了open()方法进行初始化，但是还没有调用send()方法。3&gt;3表示浏览器正在接受服务器的响应数据。4&gt;所有数据已经被接受完毕。</code></pre><p>三、status属性，服务器返回的http状态码。（&gt;=200 and &lt;300、304未修改，读取缓存。都表示成功）<br>四、statusText属性，服务器返回的状态码对应的友好的文字说明，比如200对应的OK.<br>五、responseText属性，以字符串方式获取服务器对客户端的响应。<br>六、responseXml属性，当请求的是一个xml文件时，或者响应头中Content-Type为：text/xml或application/xml时，返回一个XmlDocument对象（Dom节点对象），支持标准的dom的成员，比如：childNodes、documentElement、firstChild、lastChild、nextSibling、nodeName、nodeType、nodeValue、parentNode、doctype等。</p><h3 id="XMLHttpRequest对象常用方法"><a href="#XMLHttpRequest对象常用方法" class="headerlink" title="XMLHttpRequest对象常用方法"></a>XMLHttpRequest对象常用方法</h3><p>一、open(“get”,”url”,true)初始化，如果第三个参数为false,则js等待请求完毕后才会继续执行。<br>二、setRequestHeader(“”,””)增加http请求头信息。在open()之后，send()之前调用。<br>三、send(null);发送请求。send()方法的参数表示为在请求报文体中发送的数据内容。为了最大化的浏览器兼容问题，如果没有请求报文体就传递null。get请求没有请求报文体，所以一般为null。使用post请求时才需要设置报文体。<br>四、getResponseHeader(“Content-Type”),根据响应的报文头获得报文内容。<br>五、getAllResponseHeaders();获取所有的响应报文头内容。<br>六、abort();取消当前的http请求，取消之后如果要重新发起请求，建议重新创建一个XMLHttpRequest对象。</p><h3 id="Ajax使用注意"><a href="#Ajax使用注意" class="headerlink" title="Ajax使用注意"></a>Ajax使用注意</h3><ol><li>xhr只能向同一个域中的相同端口号、相同协议的url发起请求，不能跨域,否则会引起错误。</li><li>为了浏览器兼容,get请求时最好为send()传递null参数。</li><li>在创建了xhr对象后立刻设置onreadystatechange事件，这样就能监视到所有的状态。如果不需要监视其他状态只监视readyState==4的状态则可以在send()之前设置。</li><li>get请求时，请求中的QueryString的参数名称与参数值最好使用encodeURIComponent()进行编码。否则在某些浏览器下无法获取该值，比如IE.</li><li>post请求时，为了像表单那样提交数据需要设置请求的Content-Type为：application/x-www-form-urlencoded。send(“键=值&amp;键=值”)</li><li>解析json格式时eval(“(“+json+”)”)。但有安全性问题</li></ol><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>cshtml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    Layout = "~/Views/Shared/_Layout.cshtml";</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>click(get)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv1"</span>&gt;</span>Time<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>click(post)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dv2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@section scripts&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Get</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> xhr;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (XMLHttpRequest) &#123;</span></span><br><span class="line"><span class="actionscript">                xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHttp"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            xhr.open(<span class="string">"get"</span>,<span class="string">"@Url.Action("</span>GetTime<span class="string">")"</span>);</span></span><br><span class="line"><span class="actionscript">            xhr.onreadystatechange=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">"dv1"</span>).innerText=xhr.responseText;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            xhr.send();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Post</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"btn2"</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> xhr;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (XMLHttpRequest) &#123;</span></span><br><span class="line"><span class="actionscript">                xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHttp"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            xhr.open(<span class="string">"post"</span>, <span class="string">"@Url.Action("</span>GetName<span class="string">")"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//加头</span></span></span><br><span class="line"><span class="actionscript">            xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="actionscript">            xhr.onreadystatechange=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.getElementById(<span class="string">"dv2"</span>).innerText=xhr.responseText;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//send里面发送数据</span></span></span><br><span class="line"><span class="actionscript">            xhr.send(<span class="string">"name=luox78"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> ActionResult <span class="title">AjaxTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> View();</span><br><span class="line">     &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetTime</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> DateTime.Now.ToString();</span><br><span class="line">     &#125;</span><br><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetName</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="基于AjaxHelper的Ajax"><a href="#基于AjaxHelper的Ajax" class="headerlink" title="基于AjaxHelper的Ajax"></a>基于AjaxHelper的Ajax</h2><p>MVC框架本身提供了AjaxHelper类用于Ajax异步请求，所以如果你想省事，就用这种方式吧~</p><p>AjaxHelper帮助器方法：</p><table><thead><tr><th>Helper method</th><th>Description</th></tr></thead><tbody><tr><td>Ajax.ActionLink</td><td>Creates a hyperlink to a controller action that fires an Ajax request when clicked</td></tr><tr><td>Ajax.RouteLink</td><td>Similar to Ajax.ActionLink, but generates a link to a particular route instead of a named controller action</td></tr><tr><td>Ajax.BeginForm</td><td>Creates a form element that submits its data to a particular controller action using Ajax</td></tr><tr><td>Ajax.BeginRouteForm</td><td>Similar to Ajax.BeginForm, but creates a form that sub- mits its data to a particular route instead of a named control- ler action</td></tr><tr><td>Ajax.GlobalizationScript</td><td>Creates an HTML script element that references a script that contains culture information</td></tr><tr><td>Ajax.JavaScriptStringEncode</td><td>Encodes a string to make sure that it can safely be used inside JavaScript</td></tr></tbody></table><p>上面的方法貌似很多，但是实际开发中用到的就两个帮助器方法而已：</p><p> Ajax.ActionLink()和Ajax.BeginForm()</p><p>这里有个问题：怎样让项目知道我们用的是MVC自带的Ajax呢？</p><h3 id="导入js"><a href="#导入js" class="headerlink" title="导入js"></a>导入js</h3><p>A、在Web.config里边配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="builtin-name">add</span> <span class="attribute">key</span>=<span class="string">"UnobtrusiveJavaScriptEnabled"</span> <span class="attribute">value</span>=<span class="string">"true"</span> /&gt;</span><br></pre></td></tr></table></figure><p>B、在页面中引用下面的js类库即可：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="selector-tag">section</span> scripts&#123;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">" @Url.Content("</span>~/Scripts/jquery<span class="selector-class">.unobtrusive-ajax</span><span class="selector-class">.js</span><span class="string">")"</span>&gt;&lt;/script&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般更为常见的是在布局页/Views/Shared/_Layout.cshtml 中引入，例如：</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>＠ViewBag.Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"~/Scripts/jquery-1.8.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"~/Scripts/jquery.unobtrusive-ajax.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ＠RenderBody（）</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><h3 id="Ajax-ActionLink-："><a href="#Ajax-ActionLink-：" class="headerlink" title="Ajax.ActionLink()："></a><strong>Ajax.ActionLink()：</strong></h3><p>　　向客户端输出一个链接地址，当单击这个链接时可以Ajax调用Controller中的方法，Ajax.ActionLink()方法有许多重载，下面是其重载之一：</p><p>　 public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, string actionName, object routeValues, AjaxOptions ajaxOptions);</p><p><em>　　linkText</em>：是显示在客户端的文本</p><p><em>　　actionName</em>：是Action的名字，默认情况下我们会使用当前的Controller。</p><p><em>　　routeValues</em>：将传入到Controller中方法的参数</p><p><em>　　ajaxOptions</em>：配置Ajax的一些选项</p><table><thead><tr><th>Confirm</th><th>获取或设置提交请求之前，显示在确认窗口中的消息。</th></tr></thead><tbody><tr><td>HttpMethod</td><td>获取或设置 HTTP 请求方法（“Get”或“Post”）。</td></tr><tr><td>InsertionMode</td><td>获取或设置指定如何将响应插入目标 DOM 元素的模式。</td></tr><tr><td>LoadingElementId</td><td>获取或设置加载 Ajax 函数时要显示的 HTML 元素的 <strong>id</strong> 特性。</td></tr><tr><td>OnBegin</td><td>获取或设置更新页面之前，恰好调用的 JavaScript 函数的名称。</td></tr><tr><td>OnComplete</td><td>获取或设置实例化响应数据之后但更新页面之前，要调用的 JavaScript 函数。</td></tr><tr><td>OnFailure</td><td>获取或设置页面更新失败时，要调用的 JavaScript 函数。</td></tr><tr><td>OnSuccess</td><td>获取或设置成功更新页面之后，要调用的 JavaScript 函数。</td></tr><tr><td>UpdateTargetId</td><td>获取或设置要使用服务器响应来更新的 DOM 元素的 ID。</td></tr><tr><td>Url</td><td>获取或设置要向其发送请求的 URL。</td></tr></tbody></table><hr><p><strong>备注：</strong></p><ul><li>OnComplete和OnSuccess的区别：OnComplete是获取了Http请求时引发的，此时页面还没有进行更新，OnSuccess是在页面已经更新后引发的。</li><li>当加载数据须要花较长时候，为了避免假死状况，该当给用户一个反馈信息，如“正在加载…”字样。在 MVC 的 Unobtrusive Ajax 中经用AjaxOptions选项的 LoadingElementId 和 LoadingElementDuration 两个属性可轻松做到这一点，例如下面的设置：</li></ul><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AjaxOptions <span class="attr">ajaxOpts</span> = new AjaxOptions &#123;</span><br><span class="line">        <span class="attr">UpdateTargetId</span> = <span class="string">"tableBody"</span>，</span><br><span class="line">        <span class="attr">Url</span> = Url.Action（<span class="string">"GetPeopleData"</span>），</span><br><span class="line">        <span class="attr">LoadingElementId</span> = <span class="string">"loading"</span>，</span><br><span class="line">        <span class="attr">LoadingElementDuration</span> = <span class="number">1000</span>，</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><ul><li>对于URL，如果我们设置如下：</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AjaxOptions <span class="attr">ajaxOpts</span> = new AjaxOptions &#123;</span><br><span class="line">        <span class="attr">UpdateTargetId</span> = <span class="string">"tableBody"</span>，</span><br><span class="line">        <span class="attr">Url</span> = Url.Action（<span class="string">"GetPeopleData"</span>）</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>然后查看它生成的 form 属性：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="attribute">id</span>=<span class="string">"form0"</span> <span class="attribute">action</span>=<span class="string">"/People/GetPeople"</span> <span class="attribute">method</span>=<span class="string">"post"</span> <span class="attribute">data-ajax-url</span>=<span class="string">"/People/GetPeopleData"</span> <span class="attribute">data-ajax-</span>=<span class="string">"＃tableBody"</span> </span><br><span class="line"><span class="attribute">data-ajax-mode</span>=<span class="string">"replace"</span> <span class="attribute">data-ajax</span>=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure><p>它生成了两个 Url，分别为 action 属性 和 data-ajax-url 属性的值，前者是 Ajax.BeginForm（） 办法按照当前 controller 和 action 名称生成的，后者是 AjaxOptions 的 Url 属性生成的。当浏览器没有禁用 JavaScript 时，Unobtrusive Ajax JS库会获取 data-ajax-url 属性的值作为 Url 产生 ajax 恳求。当浏览器禁用了 JavaScript 时，天然 action 属性的值决定了默示提交的 Url，自然访问该页面。固然局部未能刷新，但不会让用户体验很差。</p><hr><p> 使用Html.ActionLink方法的一个栗子：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Ajax.ActionLink(<span class="string">"点击我"</span>, <span class="string">"getEntry"</span>, <span class="keyword">new</span> <span class="type"></span>&#123; id = item.Id &#125;, <span class="keyword">new</span> <span class="type">AjaxOptions</span> </span><br><span class="line">&#123; HttpMethod = <span class="string">"Post"</span>, UpdateTargetId = <span class="string">"detailsID"</span>, InsertionMode = InsertionMode.Replace &#125;)</span><br></pre></td></tr></table></figure><p>说明：“点击我”是生产的超链接文字；“getEntry”是当前控制器的Action方法；id = item.Id是向Action方法传递的参数；HttpMethod = “Post”, 说明Ajax请求是post方式的；UpdateTargetId = “detailsID”说明了要更新的html块的Id标记元素；InsertionMode = InsertionMode.Replace说明是替换ID为detailsID的元素里边的内容。</p><h3 id="实际应用："><a href="#实际应用：" class="headerlink" title="实际应用："></a><strong>实际应用：</strong></h3><h4 id="使用Ajax-ActionLink请求返回值为-Json格式的Controller方法"><a href="#使用Ajax-ActionLink请求返回值为-Json格式的Controller方法" class="headerlink" title="使用Ajax.ActionLink请求返回值为 Json格式的Controller方法"></a>使用Ajax.ActionLink请求返回值为 Json格式的Controller方法</h4><p> 在Index.cshtml中使用ActionLink，如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Ajax.ActionLink(<span class="string">"点击我"</span>, <span class="string">"JsonDetails"</span>, <span class="keyword">new</span> <span class="type"></span>&#123; id = item.Id &#125;, </span><br><span class="line"><span class="keyword">new</span> <span class="type">AjaxOptions</span> &#123; HttpMethod = <span class="string">"Post"</span>, InsertionMode = InsertionMode.Replace, OnSuccess = <span class="string">"Show"</span> &#125;)</span><br></pre></td></tr></table></figure><p>相应的Controller：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionResult JsonDetails(<span class="keyword">int</span> id = <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            GuestbookEntry entry = _db.Entries.First(c =&gt; c.Id == id);</span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">Json</span><span class="params">(entry, JsonRequestBehavior.AllowGet)</span></span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>同时需要在Index.cshtml中添加请求成功的相应js函数Show，以便更新ID属性为detailsID的DIV内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">Show</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#detailsID"</span>).html(<span class="string">"姓名："</span> + data.Name + <span class="string">" 消息："</span> + data.Message);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用Ajax-ActionLink-请求返回值为PartialView格式的Controller方法"><a href="#使用Ajax-ActionLink-请求返回值为PartialView格式的Controller方法" class="headerlink" title="使用Ajax.ActionLink 请求返回值为PartialView格式的Controller方法"></a>使用Ajax.ActionLink 请求返回值为PartialView格式的Controller方法</h4><p> 在Index.cshtml中</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Ajax.ActionLink(<span class="string">"AjaxPartialView"</span>, <span class="string">"Details"</span>, <span class="keyword">new</span> <span class="type"></span>&#123; id = item.Id &#125;, </span><br><span class="line"><span class="keyword">new</span> <span class="type">AjaxOptions</span> &#123; HttpMethod = <span class="string">"Get"</span>, UpdateTargetId = <span class="string">"detailsID"</span> &#125;)</span><br></pre></td></tr></table></figure><p>相应的Controller：</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionResult Details(<span class="keyword">int</span> id = <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            GuestbookEntry entry = _db.Entries.First(c =&gt; c.Id == id);</span><br><span class="line">            <span class="keyword">if</span> (Request.IsAjaxRequest())</span><br><span class="line">           &#123;</span><br><span class="line">                <span class="function"><span class="keyword">return</span> <span class="title">PartialView</span><span class="params">(entry)</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">View</span><span class="params">(entry)</span></span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>在这里我们使用Request.IsAjaxRequest()来判断是否为Ajax请求，如果是则返回PartialView，否则返回View。最后，返回的内容会直接更新到ID属性为detailsID的DIV中。</p><h3 id="Ajax-BeginForm"><a href="#Ajax-BeginForm" class="headerlink" title="Ajax.BeginForm"></a><strong>Ajax.BeginForm</strong></h3><p> 这个方法用于异步提交表单，比如一个新增信息的页面Create.cshtml，下面的代码会使表单以Ajax方式提交</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@model</span> <span class="type">MvcApplication5</span>.<span class="type">Models</span>.<span class="type">GuestbookEntry</span></span><br><span class="line">&lt;script <span class="class"><span class="keyword">type</span></span>=<span class="string">"text/javascript"</span> src=<span class="string">" @Url.Content("</span>~/<span class="type">Scripts</span>/jquery.unobtrusive-ajax.<span class="string">js")"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script <span class="class"><span class="keyword">type</span></span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    function success(data) &#123;</span><br><span class="line">        alert(data);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">@&#123;</span><br><span class="line">    <span class="type">ViewBag</span>.<span class="type">Title</span> = <span class="string">"Create"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;<span class="type">Create</span>&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@using</span> (<span class="type">Ajax</span>.<span class="type">BeginForm</span>(<span class="keyword">new</span> <span class="type">AjaxOptions</span> &#123; </span><br><span class="line">    <span class="type">HttpMethod</span>=<span class="string">"Post"</span>,</span><br><span class="line">    <span class="type">OnSuccess</span> = <span class="string">"success"</span></span><br><span class="line">&#125;))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Html</span>.<span class="type">ValidationSummary</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    &lt;fieldset&gt;</span><br><span class="line">        &lt;legend&gt;<span class="type">GuestbookEntry</span>&lt;/legend&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"editor-label"</span>&gt;</span><br><span class="line">            <span class="meta">@Html</span>.<span class="type">LabelFor</span>(model =&gt; model.<span class="type">Name</span>)</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"editor-field"</span>&gt;</span><br><span class="line">            <span class="meta">@Html</span>.<span class="type">EditorFor</span>(model =&gt; model.<span class="type">Name</span>)</span><br><span class="line">            <span class="meta">@Html</span>.<span class="type">ValidationMessageFor</span>(model =&gt; model.<span class="type">Name</span>)</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"editor-label"</span>&gt;</span><br><span class="line">            <span class="meta">@Html</span>.<span class="type">LabelFor</span>(model =&gt; model.<span class="type">Message</span>)</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"editor-field"</span>&gt;</span><br><span class="line">            <span class="meta">@Html</span>.<span class="type">EditorFor</span>(model =&gt; model.<span class="type">Message</span>)</span><br><span class="line">            <span class="meta">@Html</span>.<span class="type">ValidationMessageFor</span>(model =&gt; model.<span class="type">Message</span>)</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"submit"</span> value=<span class="string">"Create"</span> /&gt;</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>控制器的代码如下：</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[HttpPost]</span><br><span class="line"><span class="keyword">public</span> ActionResult Create(GuestbookEntry entry)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ModelState.IsValid)</span><br><span class="line">    &#123;</span><br><span class="line">        entry.DateAdded = DateTime.Now;</span><br><span class="line">        _db.Entries.Add(entry);</span><br><span class="line">        _db.SaveChanges();</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">Content</span><span class="params">(<span class="string">"New Entry successfully added."</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">View</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>注：</p><p>貌似上面的Ajax方法很方便，但是它的工作原理可能大家不是很清楚，这里就大概说一下吧~</p><p>当调用 Ajax.BeginForm 方法后，经由选项 AjaxOptions 对象设置的属性将会被转化成 form 表单的属性，这些属性以 data-ajax 开首，如本示例生成的 form 表单：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="attribute">action</span>=<span class="string">"/GuestBook/Create"</span> <span class="attribute">data-ajax</span>=<span class="string">"true"</span> <span class="attribute">data-ajax-mode</span>=<span class="string">"replace"</span> <span class="attribute">data-ajax-</span>=<span class="string">"＃tableBody"</span> <span class="attribute">id</span>=<span class="string">"form0"</span> <span class="attribute">method</span>=<span class="string">"post"</span>&gt;</span><br></pre></td></tr></table></figure><p>当 Create.cshtml 视图加载完成并浮现 Html 页面时，jquery.unobtrusive-ajax.js 库会寻找所有 data-ajax == true的元素，然后按照其它以 data-ajax 开头的属性值，jQuery 库中的函数将知道如何去执行 Ajax 请求。</p><h2 id="基于JQuery的Ajax"><a href="#基于JQuery的Ajax" class="headerlink" title="基于JQuery的Ajax"></a>基于JQuery的Ajax</h2><h3 id="使用JQuery的Ajax请求返回值为-Json格式的Controller方法"><a href="#使用JQuery的Ajax请求返回值为-Json格式的Controller方法" class="headerlink" title="使用JQuery的Ajax请求返回值为 Json格式的Controller方法"></a>使用JQuery的Ajax请求返回值为 Json格式的Controller方法</h3><p> 原理就是用JQuery的Ajax方法请求Action方法，返回值设为JSON，然后对JSON数据进行处理，例如用js函数进行处理</p><p> 举个栗子： </p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> language=<span class="string">"javascript"</span>&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">                GetRoomInfoList();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">GetRoomInfoList</span><span class="params">()</span> &#123;</span></span><br><span class="line">        showDivLoading();<span class="comment">//异步加载数据时的浮层</span></span><br><span class="line">         $.ajax(&#123;</span><br><span class="line">             type: <span class="string">"Post"</span>,</span><br><span class="line">             url: <span class="string">"@Url.Content("</span>~/Room/GetRoomInfoShipId<span class="string">")"</span>,<span class="comment">//异步请求的URL,就是Room控制器方法GetRoomInfoShipId（long shipId）</span></span><br><span class="line">               dataType: <span class="string">"json"</span>,<span class="comment">//要求返回数据为JSON格式</span></span><br><span class="line">             data:&#123;shipId:$(<span class="string">"#ShipIdForSearch"</span>).val()&#125;,<span class="comment">//异步请求的参数</span></span><br><span class="line">               success: <span class="function"><span class="keyword">function</span><span class="params">(data)</span>&#123;</span></span><br><span class="line">             $(<span class="string">"#RoomInfoListTable"</span>).empty();   <span class="comment">//清空里面的所有内容</span></span><br><span class="line">               $.each(data, <span class="function"><span class="keyword">function</span><span class="params">(i, item)</span>&#123;</span> <span class="comment">//用js拼字符串处理数据，这里是显示所有房型列表信息</span></span><br><span class="line"></span><br><span class="line">                                 var <span class="built_in">str</span>=<span class="string">"&lt;tr&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">" &lt;td&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;span style=\" width:150px;display:block;white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\"&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=item.BaseRoomId;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;/span&gt;"</span></span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;/td&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;td&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;span style=\" width:150px;display:block;white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\"&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=item.ShipId;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;/span&gt;"</span></span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">" &lt;/td&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">" &lt;td&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;span style=\" width:150px;display:block;white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\"&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=item.RoomType;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;/span&gt;"</span></span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">" &lt;/td&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">" &lt;td&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;span style=\" width:150px;display:block;white-space:nowrap; overflow:hidden; text-overflow:ellipsis;\"&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=item.RoomName;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"  &lt;/span&gt;"</span></span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">" &lt;/td&gt;"</span>;</span><br><span class="line">                                 <span class="built_in">str</span>+=<span class="string">"&lt;/tr&gt;"</span>;</span><br><span class="line">                                 $(<span class="string">"#RoomInfoListTable"</span>).append(<span class="built_in">str</span>);        </span><br><span class="line">                         &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">             &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><h3 id="使用JQuery的Ajax-请求返回值为PartialView格式的Controller方法"><a href="#使用JQuery的Ajax-请求返回值为PartialView格式的Controller方法" class="headerlink" title="使用JQuery的Ajax 请求返回值为PartialView格式的Controller方法"></a>使用JQuery的Ajax 请求返回值为PartialView格式的Controller方法</h3><p> 假设有这样的一个Model:</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MvcApplication1.Models</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Team</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Preletter &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p> 通过JQuery异步加载分部视图，Home/Index.cshtml：</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    ViewBag.Title = "Index";</span><br><span class="line">    Layout = "~/Views/Shared/_Layout.cshtml";</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span>通过jQuery异步<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">@section scripts</span><br><span class="line">&#123;</span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">     $(<span class="string">'#a'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">         $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">         url: <span class="string">'@Url.Action("Index","Home")'</span>,</span></span><br><span class="line"><span class="actionscript">         data: &#123; pre: <span class="string">'B'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">         type: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="actionscript">         success: <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'#result'</span>).empty().append(data);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>HomeController控制器中：</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web.Mvc;</span><br><span class="line"><span class="keyword">using</span> MvcApplication1.Models;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MvcApplication1.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">       &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">HttpPost</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"><span class="keyword">string</span> pre</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = GetAllTeams().Where(t =&gt; t.Preletter == pre).ToList();</span><br><span class="line">            ViewBag.msg = <span class="string">"通过jQuery异步方式到达这里~~"</span>;</span><br><span class="line">            <span class="keyword">return</span> PartialView(<span class="string">"TeamY"</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> List&lt;Team&gt; <span class="title">GetAllTeams</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> List&lt;Team&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Team()&#123;Name = <span class="string">"巴西队"</span>, Preletter = <span class="string">"B"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Team()&#123;Name = <span class="string">"克罗地亚队"</span>, Preletter = <span class="string">"K"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Team()&#123;Name = <span class="string">"巴拉圭"</span>, Preletter = <span class="string">"B"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Team()&#123;Name = <span class="string">"韩国"</span>, Preletter = <span class="string">"K"</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>分部视图TeamY.cshtml：</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@model IEnumerable&lt;MvcApplication1.Models.Team&gt; </span><br><span class="line">@&#123;</span><br><span class="line">    var <span class="literal">result</span> = <span class="built_in">string</span>.Empty;</span><br><span class="line">    foreach (var <span class="built_in">item</span> <span class="keyword">in</span> Model)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="literal">result</span> += <span class="built_in">item</span>.Name + <span class="string">","</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@ViewBag.msg.ToString()</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">@<span class="literal">result</span>.Substring(<span class="number">0</span>,<span class="literal">result</span>.Length - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p><strong>3、基于JQuery的表单异步提交</strong></p><p> 举个栗子吧：</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    $(document).ready(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        $(<span class="string">"#form1"</span>).submit(<span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span><br><span class="line">            event.preventDefault();<span class="comment">//阻止默认提交事件，改用JS处理提交事件</span></span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">             type:<span class="string">"Post//表单提交类型 </span></span><br><span class="line"><span class="string">             url: "</span>@Url.Content(<span class="string">"~/User/Create"</span>)<span class="string">",//表单提交的Action方法</span></span><br><span class="line"><span class="string">             data:$("</span><span class="comment">#form1").serialize(), //序列化表单的值为字符串，前提是表单里边的输入标签都要有name属性才可以，序列化后的形式大概是这样的：a=1&amp;b=2&amp;c=3&amp;d=4&amp;e=5</span></span><br><span class="line">             success:<span class="function"><span class="keyword">function</span><span class="params">(msg)</span></span>&#123;</span><br><span class="line">                        $(<span class="string">"#result"</span>).html(msg);     </span><br><span class="line">                    &#125; </span><br><span class="line">                 &#125;); </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">              &#125;);    </span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>但是我觉得如果表单提交的数据少的话，可以用这种，如果多的话，就没有必要了，用MVC自带的更好</p><h2 id="如何提高Ajax性能"><a href="#如何提高Ajax性能" class="headerlink" title="如何提高Ajax性能"></a>如何提高Ajax性能</h2><p>1、适当使用缓存机制</p><p>2、使用CDN内容分发来访问Jquery脚本：</p><p>​     （1）自己公司架设CDN服务器</p><p>​     （2）使用第三方公司的，比如微软，谷歌等公司的CDN，但有时候不太靠谱</p><p>3、JS/CSS文件的打包合并（Bundling）及压缩（Minification）</p><p>将多个JS或CSS文件打包合并成一个文件，并在网站发布之后进行压缩，从而减少HTTP请求次数，提高网络加载速度和页面解析速度。压缩功能实现了对javascript脚本和CSS进行压缩的功能，它能够去除脚本或样式中不必要的空白和注释，同时能够优化脚本变量名的长度</p><p>例如在BundleConfig.cs里面配置捆绑js和css文件：</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Optimization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MvcExample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BundleConfig</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// For more information on Bundling, visit http://go.microsoft.com/fwlink/?LinkId=254725</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterBundles</span>(<span class="params">BundleCollection bundles</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            bundles.Add(<span class="keyword">new</span> ScriptBundle(<span class="string">"~/bundles/jquery"</span>).Include(</span><br><span class="line">                        <span class="string">"~/Scripts/jquery-&#123;version&#125;.js"</span>));</span><br><span class="line"></span><br><span class="line">            bundles.Add(<span class="keyword">new</span> StyleBundle(<span class="string">"~/Content/css"</span>).Include(<span class="string">"~/Content/site.css"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p> 记得在Global.asax中注册一下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">BundleConfig</span><span class="selector-class">.RegisterBundles</span>(<span class="selector-tag">BundleTable</span><span class="selector-class">.Bundles</span>);</span><br></pre></td></tr></table></figure><p>页面引用时可以这样引用:</p><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>@ViewBag.Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    @Styles.Render("~/Content/css")</span><br><span class="line">    @Scripts.Render("~/bundles/jquery")</span><br><span class="line">    @RenderSection("scripts", required: false)</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    @RenderBody()</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href=""><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>启用JS/CSS文件压缩合并：</p><ul><li>Web.config中配置</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;compilation <span class="attribute">debug</span>=<span class="string">"false"</span> <span class="attribute">targetFramework</span>=<span class="string">"4.0"</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>在BundleConfig.cs或Global.asax中添加以下代码即可：</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BundleTable.EnableOptimizations </span>= true<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>4、最好将js脚本文件放在view页面下面一点</p><p>关于ASP.NET MVC和Ajax的故事，暂且讲到这里吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AJAX:”Asynchronous JavaScript and XML”&lt;br&gt;中文意思：异步JavaScript和XML。&lt;br&gt;指一种创建交互式网页应用的网页开发技术。
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="AjaxHelper" scheme="https://luox78.github.io/tags/AjaxHelper/"/>
    
      <category term="Ajax" scheme="https://luox78.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>【HTTP】HTTPS 原理详解</title>
    <link href="https://luox78.github.io/2018/02/26/%E3%80%90HTTP%E3%80%91HTTPS%20%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://luox78.github.io/2018/02/26/【HTTP】HTTPS 原理详解/</id>
    <published>2018-02-26T14:34:46.893Z</published>
    <updated>2018-02-26T14:42:11.925Z</updated>
    
    <content type="html"><![CDATA[<p>前言</p><p>HTTPS（全称：HyperText Transfer Protocol over Secure Socket Layer），其实 HTTPS 并不是一个新鲜协议，Google 很早就开始启用了，初衷是为了保证数据安全。 近两年，Google、Baidu、Facebook 等这样的互联网巨头，不谋而合地开始大力推行 HTTPS， 国内外的大型互联网公司很多也都已经启用了全站 HTTPS，这也是未来互联网发展的趋势。<a id="more"></a></p><p>为鼓励全球网站的 HTTPS 实现，一些互联网公司都提出了自己的要求：</p><p>1）Google 已调整搜索引擎算法，让采用 HTTPS 的网站在搜索中排名更靠前；</p><p>2）从 2017 年开始，Chrome 浏览器已把采用 HTTP 协议的网站标记为不安全网站；</p><p>3）苹果要求 2017 年App Store 中的所有应用都必须使用 HTTPS 加密连接；</p><p>4）当前国内炒的很火热的微信小程序也要求必须使用 HTTPS 协议；</p><p>5）新一代的 HTTP/2 协议的支持需以 HTTPS 为基础。</p><p>等等，因此想必在不久的将来，全网 HTTPS 势在必行。</p><p>概念</p><p>协议</p><p>1、HTTP 协议（HyperText Transfer Protocol，超文本传输协议）：是客户端浏览器或其他程序与Web服务器之间的应用层通信协议 。</p><p>2、HTTPS 协议（HyperText Transfer Protocol over Secure Socket Layer）：可以理解为HTTP+SSL/TLS， 即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL，用于安全的 HTTP 数据传输。</p><p><img src="https://luox78.github.io/images/https1.JPG" alt="img"></p><p>如上图所示 HTTPS 相比 HTTP 多了一层 SSL/TLS</p><p>SSL（Secure Socket Layer，安全套接字层）：1994年为 Netscape 所研发，SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。</p><p>TLS（Transport Layer Security，传输层安全）：其前身是 SSL，它最初的几个版本（SSL 1.0、SSL 2.0、SSL 3.0）由网景公司开发，1999年从 3.1 开始被 IETF 标准化并改名，发展至今已经有 TLS 1.0、TLS 1.1、TLS 1.2 三个版本。SSL3.0和TLS1.0由于存在安全漏洞，已经很少被使用到。TLS 1.3 改动会比较大，目前还在草案阶段，目前使用最广泛的是TLS 1.1、TLS 1.2。</p><p>加密算法：</p><p>据记载，公元前400年，古希腊人就发明了置换密码；在第二次世界大战期间，德国军方启用了“恩尼格玛”密码机，所以密码学在社会发展中有着广泛的用途。</p><p>1、对称加密</p><p>有流式、分组两种，加密和解密都是使用的同一个密钥。</p><p>例如：DES、AES-GCM、ChaCha20-Poly1305等</p><p>2、非对称加密</p><p>加密使用的密钥和解密使用的密钥是不相同的，分别称为：公钥、私钥，公钥和算法都是公开的，私钥是保密的。非对称加密算法性能较低，但是安全性超强，由于其加密特性，非对称加密算法能加密的数据长度也是有限的。</p><p>例如：RSA、DSA、ECDSA、 DH、ECDHE</p><p>3、哈希算法</p><p>将任意长度的信息转换为较短的固定长度的值，通常其长度要比信息小得多，且算法不可逆。</p><p>例如：MD5、SHA-1、SHA-2、SHA-256 等</p><p>4、数字签名</p><p>签名就是在信息的后面再加上一段内容（信息经过hash后的值），可以证明信息没有被修改过。hash值一般都会加密后（也就是签名）再和信息一起发送，以保证这个hash值不被修改。</p><p>详解</p><p>一、HTTP访问过程</p><p><img src="https://luox78.github.io/images/https2.JPG" alt="img"></p><p>抓包如下：</p><p>如上图所示，HTTP请求过程中，客户端与服务器之间没有任何身份确认的过程，数据全部明文传输，“裸奔”在互联网上，所以很容易遭到黑客的攻击，如下：</p><p><img src="https://luox78.github.io/images/https3.JPG" alt="img"></p><p>可以看到，客户端发出的请求很容易被黑客截获，如果此时黑客冒充服务器，则其可返回任意信息给客户端，而不被客户端察觉，所以我们经常会听到一词“劫持”，现象如下：</p><p>下面两图中，浏览器中填入的是相同的URL，左边是正确响应，而右边则是被劫持后的响应</p><p><img src="https://t11.baidu.com/it/u=2571857014,1313083240&amp;fm=173&amp;s=C8186E968602911990B1246903000063&amp;w=621&amp;h=241&amp;img.JPG" alt="img"></p><p>所以 HTTP 传输面临的风险有：</p><p>（1） 窃听风险：黑客可以获知通信内容。</p><p>（2） 篡改风险：黑客可以修改通信内容。</p><p>（3） 冒充风险：黑客可以冒充他人身份参与通信。</p><p>二、HTTP 向 HTTPS 演化的过程</p><p>第一步：为了防止上述现象的发生，人们想到一个办法：对传输的信息加密（即使黑客截获，也无法破解）</p><p><img src="https://luox78.github.io/images/https4.JPG" alt="img"></p><p>如上图所示，此种方式属于对称加密，双方拥有相同的密钥，信息得到安全传输，但此种方式的缺点是：</p><p>（1）不同的客户端、服务器数量庞大，所以双方都需要维护大量的密钥，维护成本很高</p><p>（2）因每个客户端、服务器的安全级别不同，密钥极易泄露</p><p>第二步：既然使用对称加密时，密钥维护这么繁琐，那我们就用非对称加密试试</p><p><img src="https://luox78.github.io/images/https5.JPG" alt="img"></p><p>如上图所示，客户端用公钥对请求内容加密，服务器使用私钥对内容解密，反之亦然，但上述过程也存在缺点：</p><p>（1）公钥是公开的（也就是黑客也会有公钥），所以第 ④ 步私钥加密的信息，如果被黑客截获，其可以使用公钥进行解密，获取其中的内容</p><p>第三步：非对称加密既然也有缺陷，那我们就将对称加密，非对称加密两者结合起来，取其精华、去其糟粕，发挥两者的各自的优势</p><p><img src="https://luox78.github.io/images/https6.JPG" alt="img"></p><p>如上图所示</p><p>（1）第 ③ 步时，客户端说：（咱们后续回话采用对称加密吧，这是对称加密的算法和对称密钥）这段话用公钥进行加密，然后传给服务器</p><p>（2）服务器收到信息后，用私钥解密，提取出对称加密算法和对称密钥后，服务器说：（好的）对称密钥加密</p><p>（3）后续两者之间信息的传输就可以使用对称加密的方式了</p><p>遇到的问题：</p><p>（1）客户端如何获得公钥</p><p>（2）如何确认服务器是真实的而不是黑客</p><p>第四步：获取公钥与确认服务器身份</p><p><img src="https://t11.baidu.com/it/u=2238262966,367688593&amp;fm=173&amp;s=04B845328D50DC03545549DA030050B2&amp;w=640&amp;h=226&amp;img.PNG" alt="img"></p><p>1、获取公钥</p><p>（1）提供一个下载公钥的地址，回话前让客户端去下载。（缺点：下载地址有可能是假的；客户端每次在回话前都先去下载公钥也很麻烦）</p><p>（2）回话开始时，服务器把公钥发给客户端（缺点：黑客冒充服务器，发送给客户端假的公钥）</p><p>2、那有木有一种方式既可以安全的获取公钥，又能防止黑客冒充呢？ 那就需要用到终极武器了：SSL 证书（申购）</p><p><img src="https://luox78.github.io/images/https7.JPG" alt="img"></p><p>如上图所示，在第 ② 步时服务器发送了一个SSL证书给客户端，SSL 证书中包含的具体内容有：</p><p>（1）证书的发布机构CA</p><p>（2）证书的有效期</p><p>（3）公钥</p><p>（4）证书所有者</p><p>（5）签名</p><p>………</p><p>3、客户端在接受到服务端发来的SSL证书时，会对证书的真伪进行校验，以浏览器为例说明如下：</p><p>（1）首先浏览器读取证书中的证书所有者、有效期等信息进行一一校验</p><p>（2）浏览器开始查找操作系统中已内置的受信任的证书发布机构CA，与服务器发来的证书中的颁发者CA比对，用于校验证书是否为合法机构颁发</p><p>（3）如果找不到，浏览器就会报错，说明服务器发来的证书是不可信任的。</p><p>（4）如果找到，那么浏览器就会从操作系统中取出 颁发者CA 的公钥，然后对服务器发来的证书里面的签名进行解密</p><p>（5）浏览器使用相同的hash算法计算出服务器发来的证书的hash值，将这个计算的hash值与证书中签名做对比</p><p>（6）对比结果一致，则证明服务器发来的证书合法，没有被冒充</p><p>（7）此时浏览器就可以读取证书中的公钥，用于后续加密了</p><p>4、所以通过发送SSL证书的形式，既解决了公钥获取问题，又解决了黑客冒充问题，一箭双雕，HTTPS加密过程也就此形成</p><p>所以相比HTTP，HTTPS 传输更加安全</p><p>（1） 所有信息都是加密传播，黑客无法窃听。</p><p>（2） 具有校验机制，一旦被篡改，通信双方会立刻发现。</p><p>（3） 配备身份证书，防止身份被冒充。</p><p>总结</p><p>综上所述，相比 HTTP 协议，HTTPS 协议增加了很多握手、加密解密等流程，虽然过程很复杂，但其可以保证数据传输的安全。所以在这个互联网膨胀的时代，其中隐藏着各种看不见的危机，为了保证数据的安全，维护网络稳定，建议大家多多推广HTTPS。</p><p>HTTPS 缺点：</p><p>（1）SSL 证书费用很高，以及其在服务器上的部署、更新维护非常繁琐</p><p>（2）HTTPS 降低用户访问速度（多次握手）</p><p>（3）网站改用HTTPS 以后，由HTTP 跳转到 HTTPS 的方式增加了用户访问耗时（多数网站采用302跳转）</p><p>（4）HTTPS 涉及到的安全算法会消耗 CPU 资源，需要增加大量机器（https访问过程需要加解密）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;HTTPS（全称：HyperText Transfer Protocol over Secure Socket Layer），其实 HTTPS 并不是一个新鲜协议，Google 很早就开始启用了，初衷是为了保证数据安全。 近两年，Google、Baidu、Facebook 等这样的互联网巨头，不谋而合地开始大力推行 HTTPS， 国内外的大型互联网公司很多也都已经启用了全站 HTTPS，这也是未来互联网发展的趋势。
    
    </summary>
    
      <category term="DailyLearning" scheme="https://luox78.github.io/categories/DailyLearning/"/>
    
    
      <category term="https" scheme="https://luox78.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC 视图</title>
    <link href="https://luox78.github.io/2018/02/13/ASP.NET-MVC-%E8%A7%86%E5%9B%BE/"/>
    <id>https://luox78.github.io/2018/02/13/ASP.NET-MVC-视图/</id>
    <published>2018-02-13T13:55:17.368Z</published>
    <updated>2018-03-03T15:12:31.128Z</updated>
    
    <content type="html"><![CDATA[<p> 设计并非外观怎样，感觉如何。设计是（解决）如何工作的问题  –<em>Steve Jobs</em></p><h2 id="视图引擎的结构与性能"><a href="#视图引擎的结构与性能" class="headerlink" title="视图引擎的结构与性能"></a>视图引擎的结构与性能</h2><p>视图引擎是位浏览器生成html输出的组件</p><p>控制器—数据—&gt;视图模板—–&gt;html</p><h3 id="视图引擎机制"><a href="#视图引擎机制" class="headerlink" title="视图引擎机制"></a>视图引擎机制</h3><p>在asp.net mvc中，视图引擎只是一个实现固定接口（<code>IViewEngine</code>）的类。<a id="more"></a></p><p>每个应用程序可以有一个或多个视图引擎。asp.net mvc5中默认两个Razor，Aspx</p><h4 id="视图引擎类（检测已注册的试图引擎）"><a href="#视图引擎类（检测已注册的试图引擎）" class="headerlink" title="视图引擎类（检测已注册的试图引擎）"></a>视图引擎类（检测已注册的试图引擎）</h4><p><code>ViewEngines</code>类跟踪当前已安装的引擎的系统资源库</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">System.Web.Mvc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>表示对应用程序可用的视图引擎的集合。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ViewEngines</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> ViewEngineCollection _engines;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>获取视图引擎。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>视图引擎。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ViewEngineCollection Engines</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">get</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> ViewEngines._engines;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">ViewEngines</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      ViewEngineCollection engineCollection = <span class="keyword">new</span> ViewEngineCollection();</span><br><span class="line">      engineCollection.Add((IViewEngine) <span class="keyword">new</span> WebFormViewEngine());</span><br><span class="line">      engineCollection.Add((IViewEngine) <span class="keyword">new</span> RazorViewEngine());</span><br><span class="line">      ViewEngines._engines = engineCollection;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引擎集合<code>_engines</code>中初始化两个默认视图引擎</p><h4 id="解析视图引擎"><a href="#解析视图引擎" class="headerlink" title="解析视图引擎"></a>解析视图引擎</h4><p>视图引擎是实现<code>IViewEngine</code>接口的类，引擎会以架构的名义检索视图对象（实际响应的所需所有信息的容器）</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>定义视图引擎所需的方法。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IViewEngine</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>使用指定的控制器上下文来查找指定的部分视图。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>部分视图。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="controllerContext"&gt;</span>控制器上下文。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="partialViewName"&gt;</span>部分视图的名称。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="useCache"&gt;</span>若指定视图引擎返回缓存的视图（如果存在缓存的视图），则为 true；否则为 false。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">ViewEngineResult <span class="title">FindPartialView</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> partialViewName, <span class="keyword">bool</span> useCache</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>使用指定的控制器上下文来查找指定的视图。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>页视图。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="controllerContext"&gt;</span>控制器上下文。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="viewName"&gt;</span>视图的名称。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="masterName"&gt;</span>母版的名称。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="useCache"&gt;</span>若指定视图引擎返回缓存的视图（如果存在缓存的视图），则为 true；否则为 false。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function">ViewEngineResult <span class="title">FindView</span>(<span class="params">ControllerContext controllerContext, <span class="keyword">string</span> viewName, <span class="keyword">string</span> masterName, <span class="keyword">bool</span> useCache</span>)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>使用指定的控制器上下文来释放指定的视图。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="controllerContext"&gt;</span>控制器上下文。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="view"&gt;</span>视图。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReleaseView</span>(<span class="params">ControllerContext controllerContext, IView view</span>)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>视图引擎<code>findview</code>返回的<code>ViewEngineResult</code>包含三个元素：视图对象，对应的视图引擎，视图模板位置列表</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ViewEngineResult</span></span><br><span class="line">  &#123;</span><br><span class="line">    。。。</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>获取或设置搜索的位置。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>搜索的位置。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> IEnumerable&lt;<span class="keyword">string</span>&gt; SearchedLocations &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>获取或设置视图。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>视图。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> IView View &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>获取或设置视图引擎。<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>视图引擎。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> IViewEngine ViewEngine &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="视图引擎调用者是谁"><a href="#视图引擎调用者是谁" class="headerlink" title="视图引擎调用者是谁"></a>视图引擎调用者是谁</h4><p>controller与viewengine一起工作明显是由mvc框架实现的，更细一步，控制器和视图引擎的活动是由一个外部管理器对象（操作调用程序）进行协调的。</p><p>操作调用程序由负责处理HTTP处理程序直接触发。</p><p>操作调用程序主要做两件事：1. 执行控制器的方法并保存操作结果 2. 处理操作结果。</p><p><img src="https://luox78.github.io/images/操作调用程序时序图.png" alt="https://luox78.github.io/images/操作调用程序时序图.png"></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ViewResult:ViewResultBase</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewResult</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">string</span> MasterName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> ViewEngineResult <span class="title">FindView</span>(<span class="params">ControllerContext context</span>)</span>;</span><br><span class="line"></span><br><span class="line">ViewResultBase:ActionResult</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> ViewEngineResult <span class="title">FindView</span>(<span class="params">ControllerContext context</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span>;</span><br></pre></td></tr></table></figure><p>操作调用程序调用ExecuteResult</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">override</span> void ExecuteResult(ControllerContext context)</span><br><span class="line">&#123;</span><br><span class="line">    。。。</span><br><span class="line">    ViewEngineResult result = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.View == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="keyword">this</span>.FindView(context);</span><br><span class="line">        <span class="keyword">this</span>.View = result.View;</span><br><span class="line">    &#125;</span><br><span class="line">    。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ExecuteResult</code>会调用<code>FindView</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> ViewEngineResult <span class="title">FindView</span>(<span class="params">ControllerContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ViewEngineResult result = <span class="keyword">base</span>.ViewEngineCollection.FindView(context, <span class="keyword">base</span>.ViewName, <span class="keyword">this</span>.MasterName);   <span class="keyword">if</span> (result.View != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">string</span> str <span class="keyword">in</span> result.SearchedLocations)</span><br><span class="line">    &#123;</span><br><span class="line">        builder.AppendLine();</span><br><span class="line">        builder.Append(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="keyword">string</span>.Format(CultureInfo.CurrentCulture, MvcResources.Common_ViewNotFound, <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; <span class="keyword">base</span>.ViewName, builder &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FindView</code>此时会调用<code>ViewEngine</code>里面的方法，遍历模板列表，没有抛出包含所有列表的信息的异常</p><p><code>ExecuteResult</code>调用完<code>FindView</code>，执行<code>this.View.Render(viewContext, output);</code>将结果输出到响应流，这里<code>viewContext</code>中= <code>new ViewContext(context, this.View, this.ViewData, this.TempData, output);</code>包含了传入view里面的<code>viewdata</code>，同时强类型模型也是通过<code>viewdata</code>传入的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TModel Model</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">get</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ViewData.Model;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public override <span class="keyword">void</span> ExecuteResult(ControllerContext <span class="keyword">context</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">context</span> == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        throw <span class="keyword">new</span> ArgumentNullException(<span class="string">"context"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span><span class="variable">.IsNullOrEmpty</span>(<span class="keyword">this</span><span class="variable">.ViewName</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span><span class="variable">.ViewName</span> = <span class="keyword">context</span><span class="variable">.RouteData</span><span class="variable">.GetRequiredString</span>(<span class="string">"action"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找视图</span></span><br><span class="line">    ViewEngineResult result = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span><span class="variable">.View</span> == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="keyword">this</span><span class="variable">.FindView</span>(<span class="keyword">context</span>);</span><br><span class="line">        <span class="keyword">this</span><span class="variable">.View</span> = result<span class="variable">.View</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    TextWriter <span class="keyword">output</span> = <span class="keyword">context</span><span class="variable">.HttpContext</span><span class="variable">.Response</span><span class="variable">.Output</span>;</span><br><span class="line">    ViewContext viewContext = <span class="keyword">new</span> ViewContext(<span class="keyword">context</span>, <span class="keyword">this</span><span class="variable">.View</span>, <span class="keyword">this</span><span class="variable">.ViewData</span>, <span class="keyword">this</span><span class="variable">.TempData</span>, <span class="keyword">output</span>);</span><br><span class="line">    <span class="keyword">this</span><span class="variable">.View</span><span class="variable">.Render</span>(viewContext, <span class="keyword">output</span>);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result<span class="variable">.ViewEngine</span><span class="variable">.ReleaseView</span>(<span class="keyword">context</span>, <span class="keyword">this</span><span class="variable">.View</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="视图对象View"><a href="#视图对象View" class="headerlink" title="视图对象View"></a>视图对象View</h4><p><code>public IView View { get; [CompilerGenerated] private set; }</code></p><p>视图对象是实现IView接口的实例，视图对象的唯一目的是编写一些HTML响应到文本编辑器</p><h3 id="视图模板定义"><a href="#视图模板定义" class="headerlink" title="视图模板定义"></a>视图模板定义</h3><h4 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h4><p>在任务处理结束时，控制器要找出呈现给用户的下一个视图的名称。但视图名称转换成对应的HTML还需要一些额外的步骤</p><p>1。确定使用哪个视图引擎可以成功处理该视图的请求 2。视图名称必须匹配到一个html布局，并基于该布局创建一个试图对象 3。从获取视图名称开始，ViewResult对象就会按照视图引擎出现在ViewEngines.Engines集合中顺序，对所有已经安装的视图引擎进行插叙</p><h4 id="默认规则和文件夹"><a href="#默认规则和文件夹" class="headerlink" title="默认规则和文件夹"></a>默认规则和文件夹</h4><p>默认情况下系统会在View文件夹下找，controller名对应的文件夹下action对应的后缀为cshtml、vbhtml的文件（Razor）</p><h4 id="用于视图的模板"><a href="#用于视图的模板" class="headerlink" title="用于视图的模板"></a>用于视图的模板</h4><p>aspx视图引擎与webform中aspx页面语法基本一致，最大的不同在于，mvc中aspx并不是公共资源，不通i过特殊设置不能直接访问，所有的请求都是有controller接受和回复，对应的aspx页面只不过是回复的模板</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionResult About()</span><br><span class="line">&#123;</span><br><span class="line">    ViewBag.Message = <span class="string">"Your application description page."</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">View</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>About.cshtml，这里通过viewbag传递的值</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@&#123;</span></span><br><span class="line">    ViewBag.Title = <span class="string">"About"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">&lt;h2&gt;</span><span class="meta">@ViewBag.Title.&lt;/h2&gt;</span></span><br><span class="line"><span class="variable">&lt;h3&gt;</span><span class="meta">@ViewBag.Message&lt;/h3&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">&lt;p&gt;</span>Use this area to provide additional information.<span class="variable">&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><h4 id="母版视图"><a href="#母版视图" class="headerlink" title="母版视图"></a>母版视图</h4><ol><li><p>在 cshtml中直接指定</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    Layout = <span class="string">"Index.cshtml"</span><span class="comment">;</span></span><br><span class="line">    ViewBag.Title = <span class="string">"About"</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认的layout在<code>_ViewStart.cshtml</code>中指定</p></li></ol><h2 id="HTML帮助器"><a href="#HTML帮助器" class="headerlink" title="HTML帮助器"></a>HTML帮助器</h2><p>asp.net mvc中创建html视图使用的不是webform中的空间而是HTML帮助器。</p><p>HTML帮助器就是一个简单的HTML工厂，返回的是没mvchtmlstring，内部实现也是使用stringbuilder进行拼接，视图引擎解析</p><h3 id="基础帮助器"><a href="#基础帮助器" class="headerlink" title="基础帮助器"></a>基础帮助器</h3><p><code>BeginForm,BeginRouteForm</code></p><p><code>EndForm</code></p><p><code>CheckBox,CheckBoxFor</code></p><p><code>Hidden,HiddenFor</code></p><p><code>Password,PasswordFor</code>….</p><p>用法是<code>@Html.ActionLink(...)</code></p><p><code>BeginForm,BeginRouteForm</code>区别是带Route可以导航到任何已注册路由的任何位置，BeginForm只能使用控制器，action等属性</p><p><code>CheckBox,CheckBoxFor</code>区别：带For参数只接受lamada表达式</p><p>注意：HTML帮助器是视图引擎的内置属性，所以不同的视图引擎帮助器是不同的，尽管默认的两个细节都是差不多的，但内部还是有些不同的</p><p>下面举一些例子</p><h4 id="呈现HTML表单"><a href="#呈现HTML表单" class="headerlink" title="呈现HTML表单"></a>呈现HTML表单</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">using</span> (Html.BeginForm(<span class="string">"Index"</span>, <span class="string">"Home"</span>))</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BeginForm代表《form》，using中finally会添加《/form》，BeginForm当然还有很多重载</p><h4 id="呈现输入元素"><a href="#呈现输入元素" class="headerlink" title="呈现输入元素"></a>呈现输入元素</h4><p>再次说明，从功能的角度使用帮助器和直接编写HTML是一样的效果，下面的事例是复选框选中同时禁用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Html</span>.CheckBox(<span class="string">"wode"</span>, <span class="literal">true</span>, <span class="string">htmlAttributes:</span> <span class="keyword">new</span> &#123; disabled = <span class="string">"disabled"</span> &#125;)</span><br></pre></td></tr></table></figure><h4 id="操作链接"><a href="#操作链接" class="headerlink" title="操作链接"></a>操作链接</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">ActionLink</span>("<span class="keyword">index</span>","<span class="keyword">Index</span>")</span><br></pre></td></tr></table></figure><p>对应的html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>index<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>RouteLink帮助器的工作方式差不多相同，可以使用任何已经注册的路由名称来确定生成的URL模式</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Html</span>.RouteLink(<span class="string">"index"</span>, <span class="string">"Default"</span>, <span class="keyword">new</span> &#123; Controller = <span class="string">"Home"</span>, Action = <span class="string">"Index"</span> &#125;)</span><br></pre></td></tr></table></figure><p>如果想在a标签下嵌套其他标签，这时候可以使用UrlHelper来解决</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">a</span> href=<span class="string">"@Url.Action("</span>Index<span class="string">")"</span>&gt;</span><br><span class="line">   <span class="comment"> //添加其他标签</span></span><br><span class="line">&lt;/<span class="keyword">a</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="部分视图"><a href="#部分视图" class="headerlink" title="部分视图"></a>部分视图</h4><p>可以使用Partial和RenderPartial帮助器插入部分视图看。区别是，Partial返回的是字符串，RenderPartial会写入输出流，返回空，所以两者的用法略有不同</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">Partial</span>("<span class="keyword">_PartialForTest</span>")</span><br><span class="line">@&#123; <span class="selector-tag">Html</span><span class="selector-class">.RenderPartial</span>("_<span class="selector-tag">PartialForTest</span>");&#125;</span><br></pre></td></tr></table></figure><h4 id="HtmlHelper其他的原生方法"><a href="#HtmlHelper其他的原生方法" class="headerlink" title="HtmlHelper其他的原生方法"></a>HtmlHelper其他的原生方法</h4><ul><li><code>AntiForgeryToken</code>：创建一个包含口令的隐藏域，Post、Get到controller时添加[ValidateAntiForgeryToken]特性验证</li><li><code>Raw</code>：返回未经编码的原始Html字符串</li><li><code>AttributeEncode</code>：这个方法在效率上比HtmlEncode快很多。但这是有代价的付出的HtmlAttributeEncode只对 左引号（<strong>“</strong>），左括号（<strong>（</strong>），and符合（&amp;）转换为等效的字符实体。</li></ul><p><em>“*<em>HtmlAttributeEncode<strong> 方法的结果字符串只应当用于由双引号括起的属性。使用 </strong>HtmlAttributeEncode*</em> 方法和用单引号括起的属性可能会引起安全问题。”</em></p><p>看大家的选择了，如果仅仅是担心输出HTML代码和JS方面的安全，可以使用<strong>HtmlAttributeEncode</strong> 方法，效率更高！</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Html.AttributeEncode(<span class="string">"&lt;script&gt;alert(\"nihao\")&lt;/script&gt;"</span>)</span><br><span class="line"><span class="symbol">html:</span><span class="variable">&amp;lt</span>;script&gt;alert(<span class="variable">&amp;quot</span>;nihao<span class="variable">&amp;quot</span>;)<span class="variable">&amp;lt</span>;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="模板化帮助器"><a href="#模板化帮助器" class="headerlink" title="模板化帮助器"></a>模板化帮助器</h3><p>一遍遍编写Html模板枯燥且容易出错，模板化帮助器可以很好的解决这一问题</p><p>在asp.net mvc中Editor，Display是两个基本的模板化帮助器</p><h4 id="Display帮助器"><a href="#Display帮助器" class="headerlink" title="Display帮助器"></a>Display帮助器</h4><p>显示viewdata里面的值</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    ViewData[<span class="string">"Title"</span>] = <span class="string">"nihao"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Html</span>.<span class="built_in">Display</span>(<span class="string">"Title"</span>)</span><br></pre></td></tr></table></figure><p>显示model对应属性的值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">DisplayFor</span>(<span class="keyword">model</span> =&gt; model.Title)</span><br></pre></td></tr></table></figure><p>显示model中所有的值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">DisplayForModel</span>()</span><br></pre></td></tr></table></figure><h4 id="Editor帮助器"><a href="#Editor帮助器" class="headerlink" title="Editor帮助器"></a>Editor帮助器</h4><p>Editor帮助器让你可以编辑指定的值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">EditorFor</span>(<span class="keyword">model</span> =&gt; model.Title)</span><br></pre></td></tr></table></figure><p>模板化帮助器可以使用模板进行自定义编辑，比如对于Editor可以将模板文件放在对应的controller下面的EditorTemplates下或者公用的Views/Shared下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">EditorFor</span>(<span class="keyword">model</span> =&gt; model.date,<span class="string">"DateTime"</span>)</span><br></pre></td></tr></table></figure><p>视图引擎会自己找对应文件夹下面的文件</p><h3 id="自定义帮助器"><a href="#自定义帮助器" class="headerlink" title="自定义帮助器"></a>自定义帮助器</h3><p>有时候mvc提供的帮助器下没有我们需要的，这时候可以编辑自定义帮助器</p><h4 id="帮助器结构"><a href="#帮助器结构" class="headerlink" title="帮助器结构"></a>帮助器结构</h4><p>htmlhelper就是一个普通拓展方法</p><h4 id="MvcHtmlString不只是字符串"><a href="#MvcHtmlString不只是字符串" class="headerlink" title="MvcHtmlString不只是字符串"></a>MvcHtmlString不只是字符串</h4><p>自定义帮助器返回对象最好是MvcHtmlString封装对象而不是普通的字符串，实际上，所有的原生的帮助器方法也都是通过stringbuilder然后构造的MvcHtmlString对象，可以通过以下代码轻松的创建MvcHtmlString对象</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MvcHtmlString.<span class="keyword">Create</span>((<span class="keyword">string</span>)str);</span><br></pre></td></tr></table></figure><h4 id="自定义帮助器样例"><a href="#自定义帮助器样例" class="headerlink" title="自定义帮助器样例"></a>自定义帮助器样例</h4><p>添加引用并使用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@using</span> _02.Helper</span><br><span class="line"></span><br><span class="line"><span class="variable">@Html</span>.Title(<span class="string">"自定义帮助器创建的title"</span>)</span><br></pre></td></tr></table></figure><p>简单的拓展方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">TitleHelper</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MvcHtmlString <span class="title">Title</span>(<span class="params"><span class="keyword">this</span> HtmlHelper html, <span class="keyword">string</span> title, <span class="keyword">string</span> className</span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> h1Tag = <span class="keyword">new</span> TagBuilder(<span class="string">"h1"</span>);</span><br><span class="line">          <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(className))</span><br><span class="line">          &#123;</span><br><span class="line">              h1Tag.Attributes[<span class="string">"class"</span>] = className;</span><br><span class="line">          &#125;</span><br><span class="line">          h1Tag.SetInnerText(title);</span><br><span class="line">          <span class="keyword">return</span> MvcHtmlString.Create(h1Tag.ToString());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Razor视图引擎"><a href="#Razor视图引擎" class="headerlink" title="Razor视图引擎"></a>Razor视图引擎</h2><h3 id="视图引擎内部机制"><a href="#视图引擎内部机制" class="headerlink" title="视图引擎内部机制"></a>视图引擎内部机制</h3><h4 id="搜索位置"><a href="#搜索位置" class="headerlink" title="搜索位置"></a>搜索位置</h4><p>视图引擎的构造函数中定义了视图搜索位置的格式</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RazorViewEngine</span>(<span class="params">IViewPageActivator viewPageActivator</span>)</span></span><br><span class="line"><span class="function">      : <span class="title">base</span>(<span class="params">viewPageActivator</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.AreaViewLocationFormats = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">4</span>]</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/&#123;1&#125;/&#123;0&#125;.vbhtml"</span>,</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/Shared/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/Shared/&#123;0&#125;.vbhtml"</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.AreaMasterLocationFormats = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">4</span>]</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/&#123;1&#125;/&#123;0&#125;.vbhtml"</span>,</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/Shared/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/Shared/&#123;0&#125;.vbhtml"</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.AreaPartialViewLocationFormats = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">4</span>]</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/&#123;1&#125;/&#123;0&#125;.vbhtml"</span>,</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/Shared/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Areas/&#123;2&#125;/Views/Shared/&#123;0&#125;.vbhtml"</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.ViewLocationFormats = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">4</span>]</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.vbhtml"</span>,</span><br><span class="line">        <span class="string">"~/Views/Shared/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Views/Shared/&#123;0&#125;.vbhtml"</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.MasterLocationFormats = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">4</span>]</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.vbhtml"</span>,</span><br><span class="line">        <span class="string">"~/Views/Shared/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Views/Shared/&#123;0&#125;.vbhtml"</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.PartialViewLocationFormats = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">4</span>]</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.vbhtml"</span>,</span><br><span class="line">        <span class="string">"~/Views/Shared/&#123;0&#125;.cshtml"</span>,</span><br><span class="line">        <span class="string">"~/Views/Shared/&#123;0&#125;.vbhtml"</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.FileExtensions = <span class="keyword">new</span> <span class="keyword">string</span>[<span class="number">2</span>]</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"cshtml"</span>,</span><br><span class="line">        <span class="string">"vbhtml"</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="代码碎块"><a href="#代码碎块" class="headerlink" title="代码碎块"></a>代码碎块</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">@</span><span class="template-tag">&#123;//<span class="name">code</span>&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>解析器会正确的识别标记 <code>@{&lt;h1&gt;@Viewbag.Title&lt;/h1&gt;}</code></p><p>可以通过@（）插入字符</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;p&gt;</span>@(<span class="string">"hello"</span> + Model.userName)<span class="params">&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>括号中同时可以 放置一个函数</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;@(<span class="function"><span class="keyword">Method</span><span class="params">()</span>)&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="function">//等同于&lt;<span class="title">p</span>&gt;@<span class="comment">&#123;Method()；&#125;</span>&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注释使用@<em>。。。</em>@，使用@@表示@字符</p><p>Razor处理过的视图都是自动编码的，如果想保留原始格式使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">Raw</span>(...)</span><br></pre></td></tr></table></figure><h4 id="条件式代码碎块"><a href="#条件式代码碎块" class="headerlink" title="条件式代码碎块"></a>条件式代码碎块</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"@Model.Css"</span>&gt;</span><br><span class="line">....</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>当Model.Css为null时，解析器理论上会抛出异常，但mvc4之后，条件逻辑已经内置在Razor引擎中了</p><h4 id="Razor视图对象"><a href="#Razor视图对象" class="headerlink" title="Razor视图对象"></a>Razor视图对象</h4><p>Razor引擎生成视图对象可以通过反射dll看到继承自WebViewPage</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">_Page_Views_Home_About_cshtml</span> : <span class="title">WebViewPage</span>&lt;object&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">namespace System.Web.Mvc</span><br><span class="line">&#123;</span><br><span class="line">    using System;</span><br><span class="line">    using System.Globalization;</span><br><span class="line">    using System.IO;</span><br><span class="line">    using System.Runtime.CompilerServices;</span><br><span class="line">    using System.Web;</span><br><span class="line">    using System.Web.Mvc.Properties;</span><br><span class="line">    using System.Web.WebPages;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewPage</span> : <span class="type">WebPageBase</span>, <span class="type">IViewDataContainer</span>, <span class="type">IViewStartPageChild</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> AjaxHelper&lt;<span class="keyword">object</span>&gt; _ajax;</span><br><span class="line">        <span class="keyword">private</span> HttpContextBase _context;</span><br><span class="line">        <span class="keyword">private</span> DynamicViewDataDictionary _dynamicViewData;</span><br><span class="line">        <span class="keyword">private</span> HtmlHelper&lt;<span class="keyword">object</span>&gt; _html;</span><br><span class="line">        <span class="keyword">private</span> ViewDataDictionary _viewData;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> WebViewPage()</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">override</span> void ConfigurePage(WebPageBase parentPage)</span><br><span class="line">        &#123;</span><br><span class="line">            WebViewPage page = parentPage <span class="keyword">as</span> WebViewPage;</span><br><span class="line">            <span class="keyword">if</span> (page == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, MvcResources.CshtmlView_WrongViewBase, new <span class="keyword">object</span>[] &#123; parentPage.get_VirtualPath() &#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.ViewContext = page.ViewContext;</span><br><span class="line">            <span class="keyword">this</span>.ViewData = page.ViewData;</span><br><span class="line">            <span class="keyword">this</span>.InitHelpers();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> void ExecutePageHierarchy()</span><br><span class="line">        &#123;</span><br><span class="line">            TextWriter writer = <span class="keyword">this</span>.ViewContext.Writer;</span><br><span class="line">            <span class="keyword">this</span>.ViewContext.Writer = base.get_Output();</span><br><span class="line">            base.ExecutePageHierarchy();</span><br><span class="line">            <span class="keyword">if</span> (!string.IsNullOrEmpty(<span class="keyword">this</span>.OverridenLayoutPath))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.set_Layout(<span class="keyword">this</span>.OverridenLayoutPath);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.ViewContext.Writer = writer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> virtual void InitHelpers()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Html = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.Ajax = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.Url = new UrlHelper(<span class="keyword">this</span>.ViewContext.RequestContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> virtual void SetViewData(ViewDataDictionary viewData)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>._viewData = viewData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> AjaxHelper&lt;<span class="keyword">object</span>&gt; Ajax</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="keyword">this</span>._ajax == <span class="literal">null</span>) &amp;&amp; (<span class="keyword">this</span>.ViewContext != <span class="literal">null</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._ajax = new AjaxHelper&lt;<span class="keyword">object</span>&gt;(<span class="keyword">this</span>.ViewContext, <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._ajax;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._ajax = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> HttpContextBase Context</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> =&gt; </span><br><span class="line">                (<span class="keyword">this</span>._context ?? <span class="keyword">this</span>.ViewContext.HttpContext);</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._context = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> HtmlHelper&lt;<span class="keyword">object</span>&gt; Html</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="keyword">this</span>._html == <span class="literal">null</span>) &amp;&amp; (<span class="keyword">this</span>.ViewContext != <span class="literal">null</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>._html = new HtmlHelper&lt;<span class="keyword">object</span>&gt;(<span class="keyword">this</span>.ViewContext, <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._html;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._html = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">object</span> Model =&gt;</span><br><span class="line">            <span class="keyword">this</span>.ViewData.Model;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">internal</span> string OverridenLayoutPath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> TempDataDictionary TempData =&gt;</span><br><span class="line">            <span class="keyword">this</span>.ViewContext.TempData;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> UrlHelper Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        [Dynamic]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">object</span> ViewBag</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="keyword">return</span>: Dynamic]</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                Func&lt;ViewDataDictionary&gt; viewDataThunk = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._dynamicViewData == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (viewDataThunk == <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        viewDataThunk = () =&gt; <span class="keyword">this</span>.ViewData;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">this</span>._dynamicViewData = new DynamicViewDataDictionary(viewDataThunk);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._dynamicViewData;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> System.Web.Mvc.ViewContext ViewContext &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ViewDataDictionary ViewData</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>._viewData == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.SetViewData(new ViewDataDictionary());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>._viewData;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.SetViewData(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到View可以使用的对象都在这里面</p><h3 id="设计一个样例视图"><a href="#设计一个样例视图" class="headerlink" title="设计一个样例视图"></a>设计一个样例视图</h3><h4 id="建立视图专用的Model"><a href="#建立视图专用的Model" class="headerlink" title="建立视图专用的Model"></a>建立视图专用的Model</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">namespace</span> <span class="title">_02</span>.<span class="title">Models</span>.<span class="title">Home</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeIndexViewModel</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Str &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在视图中声明model类型</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@model _02<span class="selector-class">.Models</span><span class="selector-class">.Home</span><span class="selector-class">.HomeIndexViewModel</span></span><br></pre></td></tr></table></figure><p>使用Model</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>@Model.Str<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller中添加返回对象</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionResult Index()</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> View(<span class="keyword">new</span> HomeIndexViewModel()</span><br><span class="line">           &#123;</span><br><span class="line">               Str = <span class="string">"传递的数据"</span></span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="定义母版视图"><a href="#定义母版视图" class="headerlink" title="定义母版视图"></a>定义母版视图</h4><p>布局页就是一个普通的<code>cshtml</code>页面但是必须添加<code>@RenderBody()</code>告诉解析器在哪儿注入布局模板</p><p>layout可以使任意路径或设置条件，默认的layout在<code>_VIewStart.cshtml</code>中定义</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@&#123;</span></span><br><span class="line">    <span class="meta">if</span> (Request.<span class="keyword">Browser.IsMobileDevice)</span></span><br><span class="line"><span class="keyword"> </span>   &#123;</span><br><span class="line">        Layout = <span class="string">"About.cshtml"</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过~返回根目录</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Layout</span> = <span class="string">"~/Views/Shared/_Layout.cshtml"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="定义节"><a href="#定义节" class="headerlink" title="定义节"></a>定义节</h4><p><code>RenderBody</code>方法定义了布局注入的单个点，但你可能需要将内容注入到多个位置，在布局模板中，可以通过在希望出现内容的位置放置一个<code>RenderSection</code>的调用来定义注入点</p><p>默认的_Layout中就有关于scripts的节</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RenderSection</span>(<span class="string">"scripts"</span>, <span class="string">required:</span> <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>required: false指的是不是必须的，可以通过@section+名称进行节的编写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@section scripts</span><br><span class="line">&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">"nihao"</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节的默认内容"><a href="#节的默认内容" class="headerlink" title="节的默认内容"></a>节的默认内容</h4><p><code>webform</code>中视图引擎中的母版页可以指定默认内容，Razor没有但是可以通过<code>IsSectionDefined</code>进行判断，添加默认的内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"footer"</span>&gt;</span><br><span class="line">@<span class="keyword">if</span>(IsSectionDefined(<span class="string">"name"</span>))&#123;</span><br><span class="line">      @RenderSection(<span class="string">"name"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      &lt;span&gt;undefined&lt;/span&gt;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="嵌套布局"><a href="#嵌套布局" class="headerlink" title="嵌套布局"></a>嵌套布局</h4><p>布局是可以嵌套的通过指定Layout实现嵌套</p><h4 id="声明式Html帮助器"><a href="#声明式Html帮助器" class="headerlink" title="声明式Html帮助器"></a>声明式Html帮助器</h4><p>通过<code>HtmlHelper</code>创建网页内容如果有很多元素就十分困难，这时候使用声明式Html帮助器就方便很多</p><p>首先在项目中添加App_Code，添加<code>MyHelpers.cshtml</code>，定义一个简单的方法，格式@helper+签名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">helper</span> ShowTitle(string title)</span><br><span class="line">&#123;</span><br><span class="line">    &lt;<span class="selector-tag">h1</span>&gt;@<span class="keyword">title</span>&lt;/<span class="keyword">h1</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">MyHelpers</span>.<span class="keyword">ShowTitle</span>("<span class="keyword">nihao</span>")</span><br></pre></td></tr></table></figure><p>注意在App_Code外编辑的帮助器不会被检测</p><h2 id="视图编码"><a href="#视图编码" class="headerlink" title="视图编码"></a>视图编码</h2><h3 id="视图建模"><a href="#视图建模" class="headerlink" title="视图建模"></a>视图建模</h3><h4 id="ViewData，ViewBag"><a href="#ViewData，ViewBag" class="headerlink" title="ViewData，ViewBag"></a><code>ViewData，ViewBag</code></h4><p>通过这两个对象可以从controller中传值到view中，两个类型都是<code>dynomic</code>，用法：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ViewData[<span class="string">"Title"</span>]=<span class="string">"nihao"</span>;</span><br><span class="line">ViewBag.<span class="built_in">Title</span>=<span class="string">"nihao"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">view</span>中：</span><br><span class="line"><span class="comment">@ViewData["Title"]</span></span><br><span class="line"><span class="comment">@</span>ViewBag.<span class="built_in">Title</span></span><br></pre></td></tr></table></figure><h4 id="强类型视图模型"><a href="#强类型视图模型" class="headerlink" title="强类型视图模型"></a>强类型视图模型</h4><p>上面已经说过</p><p>应尽量减少<code>viewbag，viewdata</code>，因为使用<code>viewmodel</code>更易维护，同时注意的是这里的model是视图模型，应尽量减少直接将数据模型当做视图模型</p><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><h4 id="更改视图引擎检索格式"><a href="#更改视图引擎检索格式" class="headerlink" title="更改视图引擎检索格式"></a>更改视图引擎检索格式</h4><p>创建自己的检索格式，项目中只是用Razor就没必要检索aspx格式的视图，提高效率，同时可以将<code>PartialViews</code>放在不同的地方便于管理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _02.App_Start</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewFormatViewEngine</span> :</span> RazorViewEngine</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">NewFormatViewEngine</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.MasterLocationFormats = base.MasterLocationFormats;</span><br><span class="line">            <span class="keyword">this</span>.ViewLocationFormats = <span class="keyword">new</span> <span class="built_in">string</span>[]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"~/Views/&#123;1&#125;/&#123;0&#125;.cshtml"</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">this</span>.PartialViewLocationFormats = <span class="keyword">new</span> <span class="built_in">string</span>[]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"~/PartialViews/&#123;1&#125;/&#123;0&#125;.cshtml"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在App_Start中创建自己的新类继承自<code>RazorViewEngine</code></p><p>在<code>Global.asax</code>中，清空原来的引擎，添加新的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcApplication</span> :</span> System.Web.HttpApplication</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">。。。</span><br><span class="line">            ViewEngines.Engines.Clear();</span><br><span class="line">            ViewEngines.Engines.Add(<span class="keyword">new</span> NewFormatViewEngine());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>需要注意的是要添加Web.config配置对应的视图引擎，这里直接复制Views里面的即可</p><p>已经可以使用了，文件夹PartialViews ==&gt; Home ==&gt; Home_Contact_PartialView.cshtml</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">Partial</span>("<span class="keyword">Home_Contact_PartialView</span>")</span><br></pre></td></tr></table></figure><h4 id="呈现操作"><a href="#呈现操作" class="headerlink" title="呈现操作"></a>呈现操作</h4><p>当需要呈现一个固定不变的视图或者需要控制器提供数据的视图的时候使用呈现操作即可</p><p>菜单例子：控制中添加返回<code>PartialView</code>的方法Menu</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> PartialView(<span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"menu1"</span>,</span><br><span class="line">                <span class="string">"menu2"</span>,</span><br><span class="line">                <span class="string">"menu3"</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>创建对应的视图</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@model</span> IList<span class="variable">&lt;string&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">&lt;div&gt;</span></span><br><span class="line">    <span class="meta">@foreach</span> (var str in Model)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">&lt;a&gt;</span><span class="meta">@str&lt;/a&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Html</span>.<span class="keyword">Action</span>("<span class="keyword">Menu</span>")</span><br></pre></td></tr></table></figure><p>与@Html.Partial一样<code>ActionRender</code>也是写入到响应流，Action直接返回html字符串</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 设计并非外观怎样，感觉如何。设计是（解决）如何工作的问题  –&lt;em&gt;Steve Jobs&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;视图引擎的结构与性能&quot;&gt;&lt;a href=&quot;#视图引擎的结构与性能&quot; class=&quot;headerlink&quot; title=&quot;视图引擎的结构与性能&quot;&gt;&lt;/a&gt;视图引擎的结构与性能&lt;/h2&gt;&lt;p&gt;视图引擎是位浏览器生成html输出的组件&lt;/p&gt;
&lt;p&gt;控制器—数据—&amp;gt;视图模板—–&amp;gt;html&lt;/p&gt;
&lt;h3 id=&quot;视图引擎机制&quot;&gt;&lt;a href=&quot;#视图引擎机制&quot; class=&quot;headerlink&quot; title=&quot;视图引擎机制&quot;&gt;&lt;/a&gt;视图引擎机制&lt;/h3&gt;&lt;p&gt;在asp.net mvc中，视图引擎只是一个实现固定接口（&lt;code&gt;IViewEngine&lt;/code&gt;）的类。
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="ASP.NET MVC5 编程实战" scheme="https://luox78.github.io/tags/ASP-NET-MVC5-%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET06</title>
    <link href="https://luox78.github.io/2018/02/10/ASP.NET06/"/>
    <id>https://luox78.github.io/2018/02/10/ASP.NET06/</id>
    <published>2018-02-10T11:13:43.949Z</published>
    <updated>2018-02-12T13:35:02.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="httprequest一些成员"><a href="#httprequest一些成员" class="headerlink" title="httprequest一些成员"></a>httprequest一些成员</h2><ul><li><p><code>Request.UrlReferrer</code>获取请求该资源的原地址</p><p>用处：判断host是否为本站</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            var uri = <span class="built_in">context</span>.Request.UrlReferrer<span class="comment">;</span></span><br><span class="line">            if (uri == null <span class="title">||</span> uri.Host != <span class="string">"localhost"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">context</span>.Response.ContentType = <span class="string">"text/plain"</span><span class="comment">;</span></span><br><span class="line">                <span class="built_in">context</span>.Response.Write(<span class="string">"forbid"</span>)<span class="comment">;</span></span><br><span class="line">                <span class="built_in">context</span>.Response<span class="meta">.End</span>()<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">context</span>.Response.ContentType = <span class="string">"image/jpg"</span><span class="comment">;</span></span><br><span class="line">            <span class="built_in">context</span>.Response.WriteFile(<span class="string">"536896a693f71.jpg"</span>)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>只有在img请求和localhost下才能访问</p></li><li><p><code>Request.UserHostAddress</code>获得访问者的IP地址<a id="more"></a></p></li></ul><ul><li><code>context.Request.MapPath()</code>将虚拟路径转换为磁盘上的物理路径</li></ul><p>其他：</p><p>1、 （*）<code>Request.AppRelativeCurrentExecutionFilePath</code>，获取当前执行请求相对于应用根目录的虚拟路径，以~开头，比如“~/Handler.ashx”，</p><p>2、 （*）<code>Request.PhysicalApplicationPath</code>，获取当前应用的物理路径，比如D:\我的文档\VisualStudio 2008\WebSites\WebSite4\</p><p>3、 （*）<code>Request.PhysicalPath，</code>获取当前请求的物理路径，比如D:\我的文档\VisualStudio 2008\WebSites\WebSite4\Handler.ashx</p><p>4、 （*） <code>Request.RawUrl</code>获得原始请求URL、Request.Url获得请求的URL，区别涉及到URL重写的问题</p><p>5、 （*） <code>Request.UserLanguages</code>获得访问者浏览器支持的语言，可以通过这个实现对不同语言的人显示不同语言的页面。</p><p>6、    <code>Request.Url.GetComponents(UriComponents.HostAndPort,UriFormat.SafeUnescaped)</code>获取当前请求的网站的域名和端口号</p><h2 id="httpresponse一些成员"><a href="#httpresponse一些成员" class="headerlink" title="httpresponse一些成员"></a>httpresponse一些成员</h2><ol><li><p><code>Response.Buffer、Response.BufferOutput</code></p><p>类型bool，设置response是否通过内部缓冲区进行输出，默认true</p></li><li><p><code>Response.Flush()</code></p><p>将服务器缓冲区的数据直接返回到浏览器</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">context</span>.Response.ContentType = <span class="string">"text/html"</span><span class="comment">;</span></span><br><span class="line">            for (int i = <span class="number">0</span><span class="comment">; i &lt; 10; i++)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">context</span>.Response.Write(<span class="string">"这是第"</span> + i + <span class="string">"个输出&lt;br&gt;"</span>)<span class="comment">;</span></span><br><span class="line">                System.Threading.Thread.Sleep(<span class="number">400</span>)<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>循环里面添加一句<code>context.Response.Flush();</code>，实际上会连续发送，从监视工具可以看出，第一次全是等待时间，第二次全是接受时间，但浏览器自身会等待全部接受完成之后才显示</p></li><li><p><code>Response.Clear()</code></p><p>直接清空缓冲区，没有发送的数据会丢失</p></li><li><p><code>Response.ContentEncoding</code></p><p>输出流的编码</p></li><li><p><code>Response.OutputStream</code></p><p>输出流</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">context</span>.Response.ContentType = <span class="string">"image/jpg"</span>;</span><br><span class="line">           //以下载的方式</span><br><span class="line">           //<span class="built_in">context</span>.Response.AppendHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=\""</span> + HttpUtility.UrlEncode(<span class="string">"536896a693f71.jpg"</span>, System.Text.Encoding.UTF8) + <span class="string">"\""</span>);        <span class="built_in">context</span>.Response.OutputStream.Write(File.ReadAllBytes(<span class="built_in">context</span>.Request.MapPath(<span class="string">"536896a693f71.jpg"</span>)), <span class="number">0</span>, File.ReadAllBytes(<span class="built_in">context</span>.Request.MapPath(<span class="string">"536896a693f71.jpg"</span>)).Length);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Response.End()</code></p><p>终止响应，将之前缓存中的数据发给浏览器，End()之后的代码不会被继续执行,End方法里调用了Flush()方法。</p></li></ol><h2 id="Server属性-Type-HttpServerUtility"><a href="#Server属性-Type-HttpServerUtility" class="headerlink" title="Server属性(Type HttpServerUtility)"></a>Server属性(Type HttpServerUtility)</h2><p>注意：Server里面的方法基本上都是调用<code>HttpUtility</code>类中相应方法。推荐使用<code>HttpUtility</code>，因为有的地方很难拿到Server对象，而且Server的存在是为以前ASP程序员习惯而留的。</p><ol><li><p><code>MapPath</code></p><p>取得文件的物理路径</p></li><li><p><code>Execute</code> 方法和 <code>Transfer</code>方法</p><p>两个都是服务器里执行动态页面，跟重定向有本质区别，不能内部重定向到ashx，否则会报错“执行子请求出错”</p><p><code>Transfer</code>：第一个页面直接调用第二个页面，执行完第二个页面后不再返回第一个页面，立即响应到客户端浏览器。<br><code>Execute</code>：第一个页面直接调用第二个页面，执行完第二个页面后再返回第一个页面执行，最后响应到客户端浏览器。</p></li><li><p><code>HtmlEncode</code>方法和<code>HtmlDecode</code>方法</p><p><code>HtmlEncode</code>将string以html编码，即将html里面特殊的符号用&amp;XX替换</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">context</span>.Response.ContentType = <span class="string">"text/html"</span><span class="comment">;</span></span><br><span class="line">           string str = <span class="string">"&lt;script&gt;alert('nihao')&lt;/script&gt;"</span><span class="comment">;</span></span><br><span class="line">           <span class="built_in">context</span>.Response.Write(str)<span class="comment">;</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>不加<code>HtmlEncode</code>会执行script代码，加上<code>HttpUtility.HtmlEncode(str)</code>之后源文件会变成</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="keyword">lt</span>;script&amp;<span class="keyword">gt</span>;alert<span class="comment">(&amp;#39;nihao&amp;#39;)</span>&amp;<span class="keyword">lt</span>;/script&amp;<span class="keyword">gt</span>;<span class="keyword">gt</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>UrlEncode</code>方法和<code>UrlDecode</code>方法</p><p>将url进行编码（解码）成http认识的格式（ASCII码），中文规定使用UTF-8，又称作百分号编码（percent encoding）</p><p>使用时应该对正确的位置进行编码，如参数位置，参数路由等</p><p><strong>编码方式</strong>：字符对应的ASCII码 =&gt; 转成对应的16进制 =&gt; 前面加上百分号（%）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">string search</span> = <span class="string">"你好呀"</span>;</span><br><span class="line"><span class="attribute">string url</span> = <span class="string">"https://www.baidu.com?search="</span> + HttpUtility.UrlEncode(search);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com?search=<span class="symbol">%e4</span><span class="symbol">%bd</span><span class="symbol">%a0</span><span class="symbol">%e5</span><span class="symbol">%a5</span><span class="symbol">%bd</span><span class="symbol">%e5</span><span class="symbol">%91</span><span class="symbol">%80</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;httprequest一些成员&quot;&gt;&lt;a href=&quot;#httprequest一些成员&quot; class=&quot;headerlink&quot; title=&quot;httprequest一些成员&quot;&gt;&lt;/a&gt;httprequest一些成员&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Request.UrlReferrer&lt;/code&gt;获取请求该资源的原地址&lt;/p&gt;
&lt;p&gt;用处：判断host是否为本站&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void ProcessRequest(HttpContext &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var uri = &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Request.UrlReferrer&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (uri == null &lt;span class=&quot;title&quot;&gt;||&lt;/span&gt; uri.Host != &lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response.ContentType = &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response.Write(&lt;span class=&quot;string&quot;&gt;&quot;forbid&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response&lt;span class=&quot;meta&quot;&gt;.End&lt;/span&gt;()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response.ContentType = &lt;span class=&quot;string&quot;&gt;&quot;image/jpg&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;context&lt;/span&gt;.Response.WriteFile(&lt;span class=&quot;string&quot;&gt;&quot;536896a693f71.jpg&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只有在img请求和localhost下才能访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Request.UserHostAddress&lt;/code&gt;获得访问者的IP地址
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="HttpRequest" scheme="https://luox78.github.io/tags/HttpRequest/"/>
    
      <category term="HttpResponse" scheme="https://luox78.github.io/tags/HttpResponse/"/>
    
      <category term="HttpUtility" scheme="https://luox78.github.io/tags/HttpUtility/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET05</title>
    <link href="https://luox78.github.io/2018/02/09/ASP.NET05/"/>
    <id>https://luox78.github.io/2018/02/09/ASP.NET05/</id>
    <published>2018-02-09T13:16:12.426Z</published>
    <updated>2018-02-09T16:21:17.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建缩略图"><a href="#创建缩略图" class="headerlink" title="创建缩略图"></a>创建缩略图</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = context.Request.Files[<span class="number">0</span>]; </span><br><span class="line"><span class="comment">//从上传图片创建大图</span></span><br><span class="line"> <span class="keyword">using</span> (<span class="keyword">var</span> bigImage = Image.FromStream(file.InputStream))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//等比创建小图</span></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> smallImage = <span class="keyword">new</span> <span class="type">Bitmap</span>(<span class="number">200</span>, <span class="number">200</span> * bigImage.Height / bigImage.Width))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//创建画布将大图画入小图</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> graphics = Graphics.FromImage(smallImage))</span><br><span class="line">                &#123;</span><br><span class="line">                    graphics.DrawImage(bigImage, <span class="number">0</span>, <span class="number">0</span>, smallImage.Width, smallImage.Height);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//保存</span></span><br><span class="line">                bigImage.Save(context.Server.MapPath(Guid.NewGuid() + <span class="string">"_big.jpg"</span>));</span><br><span class="line">                smallImage.Save(context.Server.MapPath(Guid.NewGuid() + <span class="string">"_small.jpg"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="WebForm介绍"><a href="#WebForm介绍" class="headerlink" title="WebForm介绍"></a>WebForm介绍</h2><p>WebForm分为两个文件aspx和aspx.cs</p><p>aspx是页面模板，是页面描述文件，就是html+js+css的内容，和aspx.cs结合的更好，不用像一般处理程序那样程序员自己去输出HTML字符串或读取填充模板，控件都是定义在aspx中，内联的JavaScript、CSS也是写在aspx中的</p><p>前台页面上的@Page指令集。</p><p>服务端的C#代码是定义在aspx.cs中。aspx控制页面长相，cs控制程序逻辑，这种“前aspx后cs”的方式就被称为CodeBehind(代码后置)。</p><p>强调：后台页面可以把Page_Load看成是WinForm里的Load事件(“最先运行”)。</p><p>1.直接在后台通过Response.Write(“内容”);</p><ul><li>aspx中也可以访问cs中定义的非私有的成员</li><li>缺点：全都输出在页面的最上面。</li></ul><p>2.使用&lt;%%&gt;在前台页面指定输出。</p><ul><li>可以编写复杂的C#代码， for等所有C#代码都可以写在aspx中</li></ul><p>如：&lt;%=UserName %&gt;&lt;%=SayHello(); %&gt;&lt;%if (UserName == “aaa”) { UserName = “bbb”; } %&gt;    </p><h3 id="深入理解aspx"><a href="#深入理解aspx" class="headerlink" title="深入理解aspx"></a>深入理解aspx</h3><p>创建一个webform，对应的aspx.cs：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> partial <span class="class"><span class="keyword">class</span> <span class="title">WebForm1</span> :</span> System.Web.UI.Page</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span><span class="params">(object sender, EventArgs e)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到它集成System.Web.UI.Page，转到page元数据看到</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class<span class="built_in"> Page </span>: TemplateControl, IHttpHandler</span><br></pre></td></tr></table></figure><p><strong>Page继承自IHttpHandler</strong>，可以得出其实Page就是一个进一步封装的类，这时候我向class WebForm1中添加protected字段</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> _num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>aspx页面添加一句</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">_num </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure><p>运行可以看到10出现在html页面，为什么aspx可以访问cs里面的内容呢，看aspx头部有一个<code>Inherits=&quot;_43.WebForm1&quot;</code>从字面上看，它是再说继承自_43.WebForm1，事实上aspx编译之后确实如此，</p><p>为了证明这一点，我向aspx里添加一句并拖一个控件进去，为了获取页面编译完成后dll的位置</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">"Button1"</span> <span class="attr">runat</span>=<span class="string">"server"</span> <span class="attr">Text</span>=<span class="string">"Button"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">System.Reflection.Assembly.GetExecutingAssembly().Location </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure><p>同时往pageload中添加</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Response.Write(System.Reflection.Assembly.GetExecutingAssembly().Location);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>html显示的是</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uox78<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\T</span>emp<span class="symbol">\T</span>emporary<span class="symbol">\A</span>SP.NET<span class="symbol">\F</span>iles<span class="symbol">\r</span>oot<span class="symbol">\2</span>d000352<span class="symbol">\6</span>7fdd243<span class="symbol">\a</span>ssembly<span class="symbol">\d</span>l3<span class="symbol">\f</span>d7cca4a<span class="symbol">\c</span>f2ad37e_aea1d301<span class="symbol">\4</span>3.dll</span><br><span class="line">10  Button C:<span class="symbol">\U</span>sers<span class="symbol">\l</span>uox78<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\T</span>emp<span class="symbol">\T</span>emporary<span class="symbol">\A</span>SP.NET<span class="symbol">\F</span>iles<span class="symbol">\r</span>oot<span class="symbol">\2</span>d000352<span class="symbol">\6</span>7fdd243<span class="symbol">\A</span>pp_Web_amvk3cjo.dll</span><br></pre></td></tr></table></figure><p>分别用reflector打开，看到<strong>cs派生类里是ASP.webform1_aspx，而page页面程序集ASP命名空间下就是webform1_aspx</strong>，所以aspx页面可以访问cs里面的字段可以解释了，这时候打开ASP.webform1_aspx里面有一个方法</p><p><img src="https://luox78.github.io/images/cs_dll.png" alt="https://luox78.github.io/images/cs_dll.png"></p><p><img src="https://luox78.github.io/images/aspx_dll.png" alt="https://luox78.github.io/images/aspx_dll.png"></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DebuggerNonUserCode</span>]</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">FrameworkInitialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">base</span>.FrameworkInitialize();</span><br><span class="line">    <span class="keyword">this</span>.__BuildControlTree(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">base</span>.AddWrappedFileDependencies(__fileDependencies);</span><br><span class="line">    <span class="keyword">base</span>.Request.ValidateInput();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this.__BuildControlTree(this);这句代表aspx里面的所有空间都被编译成了控件树，点开</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[DebuggerNonUserCode]</span><br><span class="line"><span class="keyword">private</span> void __BuildControlTree(webform1_aspx __ctrl)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.InitializeCulture();</span><br><span class="line">    LiteralControl control = <span class="keyword">this</span>.__BuildControl__control2();</span><br><span class="line">    IParserAccessor accessor = __ctrl;</span><br><span class="line">    accessor.AddParsedSubObject(control);</span><br><span class="line">    HtmlHead head = <span class="keyword">this</span>.__BuildControl__control3();</span><br><span class="line">    accessor.AddParsedSubObject(head);</span><br><span class="line">    LiteralControl control2 = <span class="keyword">this</span>.__BuildControl__control6();</span><br><span class="line">    accessor.AddParsedSubObject(control2);</span><br><span class="line">    HtmlForm form = <span class="keyword">this</span>.__BuildControlform1();</span><br><span class="line">    accessor.AddParsedSubObject(form);</span><br><span class="line">    LiteralControl control3 = <span class="keyword">this</span>.__BuildControl__control7();</span><br><span class="line">    accessor.AddParsedSubObject(control3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>貌似里面创建很多html元素对象，这里我们就知道，所有的aspx页面里面的东西都会被编译成对应的对象，这时候回顾一下aspx页面body里面的内容</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">runat</span>=<span class="string">"server"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">_num </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">"Button1"</span> <span class="attr">runat</span>=<span class="string">"server"</span> <span class="attr">Text</span>=<span class="string">"Button"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby">System.Reflection.Assembly.GetExecutingAssembly().Location </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>显示body，然后form，form里面有button，<code>__BuildControlTree</code>，里面也印证了这一点，我们打开创建form的方法</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[DebuggerNonUserCode]</span><br><span class="line">private HtmlForm __BuildControlform1()</span><br><span class="line">&#123;</span><br><span class="line">    HtmlForm form = new HtmlForm()<span class="comment">;</span></span><br><span class="line">    <span class="keyword">base.form1 </span>= form<span class="comment">;</span></span><br><span class="line">    form.ID = <span class="string">"form1"</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">Button </span><span class="keyword">button </span>= this.__BuildControlButton1()<span class="comment">;</span></span><br><span class="line">    IParserAccessor accessor = form<span class="comment">;</span></span><br><span class="line">    accessor.<span class="keyword">AddParsedSubObject(button);</span></span><br><span class="line"><span class="keyword"> </span>   form.SetRenderMethodDelegate(new RenderMethod(this.__Renderform1))<span class="comment">;</span></span><br><span class="line">    object[] parameters = new object[<span class="number">5</span>]<span class="comment">;</span></span><br><span class="line">    parameters[<span class="number">0</span>] = form<span class="comment">;</span></span><br><span class="line">    parameters[<span class="number">2</span>] = <span class="number">0x131</span><span class="comment">;</span></span><br><span class="line">    parameters[<span class="number">3</span>] = <span class="number">0x20</span><span class="comment">;</span></span><br><span class="line">    parameters[<span class="number">4</span>] = false<span class="comment">;</span></span><br><span class="line">    this.__PageInspector_SetTraceData(parameters)<span class="comment">;</span></span><br><span class="line">    return form<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面设置了form的一些属性同时创建了button，此时我们往html添加新的代码</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span></span><br><span class="line"><span class="perl">        &#123;</span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>nihao<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">runat</span>=<span class="string">"server"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl">_num </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">"Button1"</span> <span class="attr">runat</span>=<span class="string">"server"</span> <span class="attr">Text</span>=<span class="string">"Button"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl">System.Reflection.Assembly.GetExecutingAssembly().Location </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>添加了一个循环以便我们查看dll里面如何处理C#代码的，编译之后发现__BuildControlTree里面多了一句</p><pre><code>__ctrl.SetRenderMethodDelegate(new RenderMethod(this.__Render__control1));</code></pre><p>点开 _Render_control1</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> void __Render__control1(<span class="type">HtmlTextWriter</span> __w, <span class="type">Control</span> parameterContainer)</span><br><span class="line">&#123;</span><br><span class="line">    int num2;</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">parameters</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">160</span>, <span class="number">0x44</span>, <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(parameters);</span><br><span class="line">    __w.<span class="type">Write</span>(<span class="string">"\r\n\r\n&lt;!DOCTYPE html&gt;\r\n\r\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n"</span>);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray2</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray2);</span><br><span class="line">    parameterContainer.<span class="type">Controls</span>[<span class="number">0</span>].<span class="type">RenderControl</span>(__w);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray3</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x162</span>, <span class="number">14</span>, <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray3);</span><br><span class="line">    __w.<span class="type">Write</span>(<span class="string">"\r\n&lt;body&gt;\r\n    "</span>);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray4</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray4);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray5</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x170</span>, <span class="number">0x2c</span>, <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray5);</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i = num2 + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">object</span>[] <span class="title">objArray6</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">        <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray6);</span><br><span class="line">        <span class="class"><span class="keyword">object</span>[] <span class="title">objArray7</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x19c</span>, <span class="number">0x1a</span>, <span class="literal">true</span> &#125;;</span><br><span class="line">        <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray7);</span><br><span class="line">        __w.<span class="type">Write</span>(<span class="string">"\r\n    &lt;h1&gt;nihao&lt;/h1&gt;\r\n    "</span>);</span><br><span class="line">        <span class="class"><span class="keyword">object</span>[] <span class="title">objArray8</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">        <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray8);</span><br><span class="line">        <span class="class"><span class="keyword">object</span>[] <span class="title">objArray9</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x1b6</span>, <span class="number">7</span>, <span class="literal">false</span> &#125;;</span><br><span class="line">        <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray9);</span><br><span class="line">        num2 = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray10</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray10);</span><br><span class="line">    parameterContainer.<span class="type">Controls</span>[<span class="number">1</span>].<span class="type">RenderControl</span>(__w);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray11</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w, <span class="string">"/WebForm1.aspx"</span>, <span class="number">0x2c1</span>, <span class="number">20</span>, <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_BeginRenderTracing(objArray11);</span><br><span class="line">    __w.<span class="type">Write</span>(<span class="string">"\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n"</span>);</span><br><span class="line">    <span class="class"><span class="keyword">object</span>[] <span class="title">objArray12</span> </span>= <span class="keyword">new</span> <span class="class"><span class="keyword">object</span>[] </span>&#123; __w &#125;;</span><br><span class="line">    <span class="keyword">this</span>.__PageInspector_EndRenderTracing(objArray12);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到for循环直接在里面，<strong>原来C#是直接和html元素一起编译成方法，最后转换成元素对象的</strong>，这时候或许你会有疑问cs里面是如何访问这些控件的，查看cs的dll可以看到</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WebForm1</span> : <span class="title">Page</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">protected</span> <span class="keyword">int</span> _num = <span class="number">10</span>;</span><br><span class="line">       <span class="keyword">protected</span> Button Button1;</span><br><span class="line">       <span class="keyword">protected</span> HtmlForm form1;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">base</span>.Response.Write(Assembly.GetExecutingAssembly().Location);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>一旦你在aspx中创建了控件，cs里面就会有对应的protected字段（在designer.cs中），cs里对控件属性的修改继承自他的aspx的那个类会进行相应的更改，并将它反应到最终生成的页面上</p><p><strong>总结：</strong></p><p><img src="https://luox78.github.io/images/IHttpHandler.png" alt="https://luox78.github.io/images/IHttpHandler.png"></p><h2 id="IsPostBack"><a href="#IsPostBack" class="headerlink" title="IsPostBack"></a>IsPostBack</h2><p>用于判断是第一次get页面还是post回发</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>cs里pageload时</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Page_Load</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           Response.Write(<span class="keyword">this</span>.IsPostBack);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>aspx中（aspx中form里面的button控件只会生成submit不会生成button）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form1"</span> <span class="attr">runat</span>=<span class="string">"server"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">asp:Button</span> <span class="attr">ID</span>=<span class="string">"Button1"</span> <span class="attr">runat</span>=<span class="string">"server"</span> <span class="attr">Text</span>=<span class="string">"Button"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览会看到只有第一次get是false，回发的都是true</p><h3 id="如何实现的"><a href="#如何实现的" class="headerlink" title="如何实现的"></a>如何实现的</h3><p>既然服务器控件生成的是html form那我自己写一个</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> id=<span class="string">"form1"</span> method=<span class="string">"post"</span> action=<span class="string">"WebForm3.aspx"</span>&gt;</span><br><span class="line">       &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> name=<span class="string">"name"</span> value=<span class="string">"tijiao"</span> /&gt;</span><br><span class="line">   &lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>cs里面跟上面一样，这时候运行会发现永远都是false，浏览器查看source我们就可以看出问题，runat serve的html里面多出了很多隐藏域，先将结果 IsPostBack是通过form中的隐藏域提交给服务器，如果没有接受到，那就是第一次请求，收到了肯定是回发。同时引出我们的下一部分viewstate</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.IsPostBack用来判断表单是否是回发。（不是第一次请求），是点击表单的提交按钮回发过来的。是否是回发与get请求还是Post请求无关。但是一般情况下回发都是Post请求。一般Get请求都是第一次加载。</p><p>2.只有当使用服务器端表单<code>&lt;form runat=&quot;server&quot;&gt;</code>IsPostBack才可以使用。如果使用客户端表单，则IsPostBack永远都是False.因为当使用服务器端表单的时候会自动生成一个隐藏域,才该隐藏域中，服务器写入了一些内容，通过这些内容就可以判断是否是回发。如果使用的是普通html表单，则需要自己写代码来判断是否是回发。</p><p>3.IsPostBack的使用方式，为什么要使用IsPostBack</p><p>4.<strong>用处</strong>：使用IsPostBack可以知道是不是第一次请求，通过viewstate可以将第一次加载的数据停留在页面中减少数据加载的次数。避免了每次点击按钮回发都重新加载一次数据。</p><h2 id="ViewState"><a href="#ViewState" class="headerlink" title="ViewState"></a>ViewState</h2><p>viewstate（视图状态），顾名思义就是view的aspx空间的值状态</p><p>pageload中添加</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewState[<span class="string">"key"</span>] = <span class="string">"nihao"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>生成html里面有一个隐藏域为viewstate</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">type</span>=<span class="string">"hidden"</span> <span class="attribute">name</span>=<span class="string">"__VIEWSTATE"</span> <span class="attribute">id</span>=<span class="string">"__VIEWSTATE"</span> <span class="attribute">value</span>=<span class="string">"P2yIH8jxqJKNyRGQn/BloDXHiGVvbfXBTzveFGTePfqct88mOSTSDiAJmfi3kLBaX+RRjSBf0RgEBmgfYTh1nQOXlqCGoRY2ccoHhM5M+buITfYkgxbsmXLRjBckuKji"</span> /&gt;</span><br></pre></td></tr></table></figure><p>value里面的值中就包含了nihao，下次解析的时候，我们不需要再次向页面传值也会显示，cs中的事件里面的改值就是通过这样实现的</p><p><strong>缺点：</strong> 加大网站的流量、降低访问速度、机密数据放到表单中会有数据欺骗等安全性问题。</p><p><strong>禁用ViewState</strong> ：在asp顶部添加EnableViewState=”false”</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@<span class="built_in"> Page </span><span class="attribute">Language</span>=<span class="string">"C#"</span> <span class="attribute">AutoEventWireup</span>=<span class="string">"true"</span> <span class="attribute">CodeBehind</span>=<span class="string">"WebForm2.aspx.cs"</span> <span class="attribute">Inherits</span>=<span class="string">"_43.WebForm2"</span> <span class="attribute">EnableViewState</span>=<span class="string">"false"</span>%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建缩略图&quot;&gt;&lt;a href=&quot;#创建缩略图&quot; class=&quot;headerlink&quot; title=&quot;创建缩略图&quot;&gt;&lt;/a&gt;创建缩略图&lt;/h2&gt;&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; file = context.Request.Files[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//从上传图片创建大图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bigImage = Image.FromStream(file.InputStream))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//等比创建小图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; smallImage = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Bitmap&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; * bigImage.Height / bigImage.Width))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//创建画布将大图画入小图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; graphics = Graphics.FromImage(smallImage))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    graphics.DrawImage(bigImage, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, smallImage.Width, smallImage.Height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;//保存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                bigImage.Save(context.Server.MapPath(Guid.NewGuid() + &lt;span class=&quot;string&quot;&gt;&quot;_big.jpg&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                smallImage.Save(context.Server.MapPath(Guid.NewGuid() + &lt;span class=&quot;string&quot;&gt;&quot;_small.jpg&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="缩略图" scheme="https://luox78.github.io/tags/%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
    
      <category term="viewstate" scheme="https://luox78.github.io/tags/viewstate/"/>
    
      <category term="深入理解aspx" scheme="https://luox78.github.io/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3aspx/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC 控制器</title>
    <link href="https://luox78.github.io/2018/02/07/ASP.NET%20MVC%20%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>https://luox78.github.io/2018/02/07/ASP.NET MVC 控制器/</id>
    <published>2018-02-07T12:43:32.626Z</published>
    <updated>2018-02-09T13:42:53.603Z</updated>
    
    <content type="html"><![CDATA[<p> 人么总说事件会改变一切，当实际上你必须自己动手去改变一切——<em>Andy Warhol</em></p><h2 id="对输入请求进行路由"><a href="#对输入请求进行路由" class="headerlink" title="对输入请求进行路由"></a>对输入请求进行路由</h2><p>在软件中，URI（统一资源标识符）是指通过一个位置或者名称来引用资源。</p><p>当URI通过位置来识别资源是，就叫做URL（统一定位符）</p><p>当URI通过名称标志资源时，就叫做URN（统一资源名称）</p><p>ASP.NET MVC 旨在处理更通用的URI，ASP.NET Web Forms只要处理位置感知的物理资源<a id="more"></a></p><h3 id="模拟ASP-NET-MVC运行时"><a href="#模拟ASP-NET-MVC运行时" class="headerlink" title="模拟ASP.NET MVC运行时"></a>模拟ASP.NET MVC运行时</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ProcessRequest</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//map对应的参数</span></span><br><span class="line">            <span class="keyword">var</span> segments = context.Request.Url.Segments;</span><br><span class="line">            <span class="keyword">var</span> controller = segments[<span class="number">1</span>].TrimEnd(<span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">var</span> action = segments[<span class="number">2</span>].TrimEnd(<span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">var</span> param = segments[<span class="number">3</span>].TrimEnd(<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过反射实例化对应的controller</span></span><br><span class="line">            <span class="keyword">var</span> fullname = <span class="string">$"<span class="subst">&#123;<span class="keyword">this</span>.GetType().Namespace&#125;</span>.<span class="subst">&#123;controller&#125;</span>"</span>;</span><br><span class="line">            <span class="keyword">var</span> controllerType = Type.GetType(fullname);</span><br><span class="line">            <span class="keyword">var</span> instance = Activator.CreateInstance(controllerType);</span><br><span class="line">            <span class="keyword">var</span> methodInfo =</span><br><span class="line">                controllerType.GetMethod(action, BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);</span><br><span class="line">            <span class="keyword">var</span> res = methodInfo.Invoke(instance, <span class="literal">null</span>) <span class="keyword">as</span> <span class="keyword">string</span>;<span class="comment">//假设没参数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">            context.Response.Write(res);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>controller类中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> _0101</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个简单的例子模拟了ASP.NET MVC使用的基本机制，处理请求的组件是控制器类，通过request的url映射到专门的控制器类进行处理</p><h3 id="应用程序路由"><a href="#应用程序路由" class="headerlink" title="应用程序路由"></a>应用程序路由</h3><h4 id="url模式与路由"><a href="#url模式与路由" class="headerlink" title="url模式与路由"></a>url模式与路由</h4><p>路由：代表URL绝对路径的模式匹配字符串，即没有协议，IP地址，端口号的url字符串</p><p>比如：<a href="http://localhost:3462/home/test" target="_blank" rel="noopener">http://localhost:3462/home/test</a>    ==&gt;    /home/test</p><p>路由可以是常量也可以是占位符，mvc系统默认的路由是{controller}/{action}/{id}，它可以匹配如Home/Index/1子类的路由</p><h4 id="定义应用程序路由"><a href="#定义应用程序路由" class="headerlink" title="定义应用程序路由"></a>定义应用程序路由</h4><p>mvc中路由是在<code>Global.asax</code>下被注册</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcApplication</span> :</span> System.Web.HttpApplication</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Application_Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对应的类在<code>App_Start/RouteConfig.cs</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteConfig</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterRoutes</span><span class="params">(RouteCollection routes)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            routes.IgnoreRoute(<span class="string">"&#123;resource&#125;.axd/&#123;*pathInfo&#125;"</span>);</span><br><span class="line"></span><br><span class="line">            routes.MapRoute(</span><br><span class="line">                name: <span class="string">"Default"</span>,</span><br><span class="line">                url: <span class="string">"&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;"</span>,</span><br><span class="line">                defaults: <span class="keyword">new</span> &#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, id = UrlParameter.Optional &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>路由集合routes添加路由一般通过<code>MapRoute</code>进行配置，但如果你的路由有<code>MapRoute</code>不支持的参数可以使用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var<span class="built_in"> route </span>= newRoute(<span class="built_in">..</span>);</span><br><span class="line">RouteTable.Routes.<span class="builtin-name">Add</span>(<span class="string">"RouteName"</span>,route);</span><br></pre></td></tr></table></figure><p>进行添加，<code>maproute</code>里面的参数：</p><p>name：路由名</p><p>url：url匹配模式</p><p>defaults：该url默认值对象</p><p>如<a href="http://localhost:3462/并没有输入controller/action但处理程序会匹配到默认值，导航到http://localhost:3462/Home/Index下" target="_blank" rel="noopener">http://localhost:3462/并没有输入controller/action但处理程序会匹配到默认值，导航到http://localhost:3462/Home/Index下</a></p><h4 id="处理路由"><a href="#处理路由" class="headerlink" title="处理路由"></a>处理路由</h4><p>ASP.NET url路由模块总是根据注册的顺序进行匹配，所以前一项设置默认值会导致后一项永远得不到匹配</p><p>路由同时可以添加约束列表,MapRoute的一个重载</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static<span class="built_in"> Route </span>MapRoute(this RouteCollection routes, string name, string url, object defaults, object constraints);</span><br></pre></td></tr></table></figure><p>可以利用正则表达式将不正确的url拒之门外</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">routes.MapRoute(</span><br><span class="line"><span class="symbol">              name:</span> <span class="string">"Product"</span>,</span><br><span class="line"><span class="symbol">              url:</span> <span class="string">"&#123;controller&#125;/&#123;productid&#125;/&#123;locale&#125;"</span>,</span><br><span class="line"><span class="symbol">              defaults:</span> <span class="class">new </span>&#123; controller = <span class="string">"Home"</span>, action = <span class="string">"Index"</span>, locale = <span class="string">"cn-ch"</span> &#125;,</span><br><span class="line"><span class="symbol">              constraints:</span> <span class="class">new </span>&#123; productid = @<span class="string">"\d&#123;4&#125;"</span>, locale = <span class="string">"[a-zA-Z]&#123;2&#125;-[a-zA-Z]&#123;2&#125;"</span> &#125;</span><br><span class="line">          );</span><br></pre></td></tr></table></figure><h4 id="路由处理程序"><a href="#路由处理程序" class="headerlink" title="路由处理程序"></a>路由处理程序</h4><p>路由处理程序实现了<code>IRouteHandler</code>的接口</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>IRouteHandler</span><br><span class="line">    &#123;</span><br><span class="line">        IHttpHandler GetHttpHandler(RequestContext requestContext);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>RequestContext</code>中封装了路由的相关信息，MVC框架并没有提供很对内置的路由处理程序，因为自定义路由的需求并不普遍</p><h4 id="处理物理文件的请求"><a href="#处理物理文件的请求" class="headerlink" title="处理物理文件的请求"></a>处理物理文件的请求</h4><p>在<code>RouteConfig.cs</code>下添加<code>routes.RouteExistingFiles = true;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterRoutes</span><span class="params">(RouteCollection routes)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            routes.RouteExistingFiles = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="阻止已定义的路由"><a href="#阻止已定义的路由" class="headerlink" title="阻止已定义的路由"></a>阻止已定义的路由</h4><p>相同地方</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">routes.IgnoreRoute(<span class="string">"&#123;resource&#125;.axd/&#123;*pathInfo&#125;"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="控制器类"><a href="#控制器类" class="headerlink" title="控制器类"></a>控制器类</h2><h3 id="编写控制器类"><a href="#编写控制器类" class="headerlink" title="编写控制器类"></a>编写控制器类</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> View();</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">    [<span class="meta">NonAction</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> ActionResult <span class="title">About</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">       。。。</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       [<span class="meta">ActionName(<span class="meta-string">"About"</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Qunimalegebi</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">       ....</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> <code>[NonAction]</code>阻止action绑定到About方法上</p><p><code>[ActionName(&quot;About&quot;)]</code>指定Qunimalegebi方法的绑定action name</p><h3 id="操作和http动词"><a href="#操作和http动词" class="headerlink" title="操作和http动词"></a>操作和http动词</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[AcceptVerbs(HttpVerbs.Get|HttpVerbs.Post)]</span><br><span class="line">        <span class="keyword">public</span> ActionResult Contact()</span><br><span class="line">        &#123;</span><br><span class="line">            ViewBag.Message = <span class="string">"Your contact page."</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">View</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>通过<code>AcceptVerbs</code>特性绑定http请求方式，<code>httpverbs</code>枚举类型值</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">HttpVerbs</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Get = <span class="number">1</span>,</span><br><span class="line">        Post = <span class="number">2</span>,</span><br><span class="line">        Put = <span class="number">4</span>,</span><br><span class="line">        Delete = <span class="number">8</span>,</span><br><span class="line">        Head = <span class="number">16</span>,</span><br><span class="line">        Patch = <span class="number">32</span>,</span><br><span class="line">        Options = <span class="number">64</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>利用“|”可以响应多个请求方式</p><h3 id="处理输入数据"><a href="#处理输入数据" class="headerlink" title="处理输入数据"></a>处理输入数据</h3><h4 id="获取request对象中的输入数据"><a href="#获取request对象中的输入数据" class="headerlink" title="获取request对象中的输入数据"></a>获取request对象中的输入数据</h4><p>request中包含<code>form，querystring，cookie，header</code>等数据</p><h4 id="从路由中获取输入数据"><a href="#从路由中获取输入数据" class="headerlink" title="从路由中获取输入数据"></a>从路由中获取输入数据</h4><p>路由和上面得一致，controller中</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var str</span> = RouteData.Values[<span class="string">"locale"</span>];</span><br></pre></td></tr></table></figure><p>url：<a href="http://localhost:4426/home/1111/en-ed?data=11" target="_blank" rel="noopener">http://localhost:4426/home/1111/en-ed?data=11</a></p><p>str为en-ed，所以routedata捕获的是定义好的路由值，同时根据上述路由会匹配到第一个时直接结束，所以str2位null</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var str2 = RouteData.Values[<span class="string">"id"</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="利用valueprovider字典获取所有来源的值"><a href="#利用valueprovider字典获取所有来源的值" class="headerlink" title="利用valueprovider字典获取所有来源的值"></a>利用<code>valueprovider</code>字典获取所有来源的值</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str6 = ValueProvider.GetValue(<span class="string">"locale"</span>).AttemptedValue;<span class="comment">//路由的值</span></span><br><span class="line"><span class="keyword">var</span> str7 = ValueProvider.GetValue(<span class="string">"data"</span>).AttemptedValue;<span class="comment">//get值</span></span><br></pre></td></tr></table></figure><p><code>ValueProvider.GetValue(&quot;data&quot;)</code>会有两个属性</p><p><code>RawValue</code> Object类型原始值</p><p><code>AttemptedValue</code> string 强转成string类型的值</p><h3 id="产生操作结果"><a href="#产生操作结果" class="headerlink" title="产生操作结果"></a>产生操作结果</h3><p>controller类中大部分方法返回的都是<code>ActionResult</code>类型，下面就看看<code>ActionResult</code>类是什么</p><h4 id="actionresult构造"><a href="#actionresult构造" class="headerlink" title="actionresult构造"></a>actionresult构造</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ActionResult</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ActionResult</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>actionresult</code>类是抽象类，定义了一个方法为ExecuteResult。该方法为具体派生类执行时触发的一系列动作</p><h4 id="一些派生类"><a href="#一些派生类" class="headerlink" title="一些派生类"></a>一些派生类</h4><ul><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.contentresult.aspx" target="_blank" rel="noopener">ContentResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.emptyresult.aspx" target="_blank" rel="noopener">EmptyResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.fileresult.aspx" target="_blank" rel="noopener">FileResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.httpunauthorizedresult.aspx" target="_blank" rel="noopener">HttpUnauthorizedResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.javascriptresult.aspx" target="_blank" rel="noopener">JavaScriptResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.jsonresult.aspx" target="_blank" rel="noopener">JsonResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.redirectresult.aspx" target="_blank" rel="noopener">RedirectResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.redirecttorouteresult.aspx" target="_blank" rel="noopener">RedirectToRouteResult</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/system.web.mvc.viewresultbase.aspx" target="_blank" rel="noopener">ViewResultBase</a></li></ul><p><code>FileResult</code>派生</p><ul><li><code>FilePathResult</code>: 直接将一个文件发送给客户端</li></ul><p>可以通过更改报文头实现直接下载，不用浏览器解析</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">GetFile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">       </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> image = <span class="keyword">new</span> FilePathResult(<span class="string">"~/多云.jpg"</span>, <span class="string">"image/jpg"</span>);</span><br><span class="line">           Response.AddHeader(<span class="string">"Content-Disposition"</span>, <span class="string">$"attachment;filename=\"<span class="subst">&#123;HttpUtility.UrlDecode(<span class="string">"多云.jpg"</span>)&#125;</span>\""</span>);</span><br><span class="line"> </span><br><span class="line">           <span class="keyword">return</span> image;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li><code>FileContentResult</code>: 返回byte字节给客户端（比如图片）</li><li><code>FileStreamResult</code>: 返回流</li></ul><h4 id="深入执行操作结果的机制"><a href="#深入执行操作结果的机制" class="headerlink" title="深入执行操作结果的机制"></a>深入执行操作结果的机制</h4><p>控制器中我添加了以下方法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public ActionResult GetScript()</span><br><span class="line">        &#123;</span><br><span class="line">            string<span class="built_in"> script </span>= <span class="string">"alert('hello')"</span>;</span><br><span class="line">            return JavaScript(script);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看到返回的是JavaScript(script)；转到controller类定义可以看到</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">internal</span> <span class="keyword">virtual</span> JavaScriptResult <span class="title">JavaScript</span>(<span class="params"><span class="keyword">string</span> script</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> JavaScriptResult()</span><br><span class="line">  &#123;</span><br><span class="line">  Script=script  </span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以JavaScript(script)不过就是controller类的一个帮助方法而已，充当<code>JavaScriptResul</code>t的对象工厂的角色，类似的如View(),大家都知道View参数默认值是View文件夹下面控制器名文件夹下面的index，所以不传参数并不代表没有参数，<code>JavaScriptResult</code>实现</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JavaScriptResult</span> : <span class="title">ActionResult</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Script&#123;<span class="keyword">get</span>;<span class="keyword">set</span>;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExecuteResult</span>(<span class="params">ControllerContext context</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(context == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(context));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> response = context.HttpContext.Response;</span><br><span class="line">    response.ContentType = <span class="string">"application/x-javascript"</span>;</span><br><span class="line">    <span class="keyword">if</span>(Script != <span class="literal">null</span>)</span><br><span class="line">    response.Write(Script);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>JavaScriptResult</code>里面仍然是调用的<code>response.ContentType,response.write</code></p><p>注意：</p><ul><li>如果控制器没有返回<code>ActionResult</code>，不会抛出异常，mvc框架会将return中的任何值封装成<code>ContentResult</code>对象序列化返回，没有返回值会映射成<code>EmptyResult</code></li><li>mvc中只dotNet 4.5 之后可以使用<code>async/await</code>语法执行异步操作响应界面</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 人么总说事件会改变一切，当实际上你必须自己动手去改变一切——&lt;em&gt;Andy Warhol&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;对输入请求进行路由&quot;&gt;&lt;a href=&quot;#对输入请求进行路由&quot; class=&quot;headerlink&quot; title=&quot;对输入请求进行路由&quot;&gt;&lt;/a&gt;对输入请求进行路由&lt;/h2&gt;&lt;p&gt;在软件中，URI（统一资源标识符）是指通过一个位置或者名称来引用资源。&lt;/p&gt;
&lt;p&gt;当URI通过位置来识别资源是，就叫做URL（统一定位符）&lt;/p&gt;
&lt;p&gt;当URI通过名称标志资源时，就叫做URN（统一资源名称）&lt;/p&gt;
&lt;p&gt;ASP.NET MVC 旨在处理更通用的URI，ASP.NET Web Forms只要处理位置感知的物理资源
    
    </summary>
    
      <category term="ASP.NET MVC" scheme="https://luox78.github.io/categories/ASP-NET-MVC/"/>
    
    
      <category term="ASP.NET MVC5 编程实战" scheme="https://luox78.github.io/tags/ASP-NET-MVC5-%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>CSharp高效编程摘记</title>
    <link href="https://luox78.github.io/2018/02/07/CSharp%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B%E6%91%98%E8%AE%B0/"/>
    <id>https://luox78.github.io/2018/02/07/CSharp高效编程摘记/</id>
    <published>2018-02-07T12:10:04.134Z</published>
    <updated>2018-02-12T13:35:01.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询语法-query-syntax-的一个用处"><a href="#查询语法-query-syntax-的一个用处" class="headerlink" title="查询语法(query syntax)的一个用处"></a>查询语法(query syntax)的一个用处</h2><p><strong>循环创建集合|数组</strong>时，用查询语法(query syntax)会比普通控制流程的结构好点，</p><p>主要体现在：</p><ul><li>命令式的版本有时非常难以理解，要是没有注释或文档，后续维护人员将要重读整段代码才能进行开发。</li><li>另外，查询语法比循环结构能提供更具组合性的API。查询语法将很自然的把代码分解成小块代码，每一块仅仅对序列中元素进行单一的操作。查询语法的延迟执行模型也让开发者能将这些单一的操作组合成多步操作，且在一次遍历序列时完整执行。<a id="more"></a></li></ul><p>例子：用二元组生成坐标，返回的二元组按照其离远点距离的逆序排列</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;Tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; ProduceIndices()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> storage = <span class="keyword">new</span> List&lt;Tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">100</span>; y++)</span><br><span class="line">            <span class="keyword">if</span>(x + y &lt; <span class="number">100</span>)</span><br><span class="line">                storage.Add(Tuple.Create(x, y));</span><br><span class="line"></span><br><span class="line">    storage.Sort((point1, point2) =&gt; </span><br><span class="line">    (</span><br><span class="line">        point2.Item1 * point2.Item1 + point2.Item2 * point2.Item2</span><br><span class="line">    ).CompareTo(</span><br><span class="line">        point1.Item1 * point1.Item1 + point1.Item2 * point1.Item2</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IEnumerable&lt;Tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; QueryIndices()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">from</span> x <span class="keyword">in</span> Enumerable.Range(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">           <span class="keyword">from</span> y <span class="keyword">in</span> Enumerable.Range(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">           <span class="keyword">where</span> x + y &lt; <span class="number">100</span></span><br><span class="line">           <span class="keyword">orderby</span> (x*x + y*y) <span class="keyword">descending</span></span><br><span class="line">           <span class="keyword">select</span> Tuple.Create(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用具名参数-named-parameter-减少重载"><a href="#使用具名参数-named-parameter-减少重载" class="headerlink" title="使用具名参数(named parameter)减少重载"></a>使用具名参数(named parameter)减少重载</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test2</span>(<span class="params"><span class="keyword">string</span> firstName,<span class="keyword">string</span> secondName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Console.WriteLine(<span class="string">$"<span class="subst">&#123;firstName&#125;</span><span class="subst">&#123;secondName&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test2(secondName: <span class="string">"78"</span>, firstName: <span class="string">"luox"</span>);<span class="comment">//luox78</span></span><br></pre></td></tr></table></figure><h2 id="理解几个等同性判断之间的关系"><a href="#理解几个等同性判断之间的关系" class="headerlink" title="理解几个等同性判断之间的关系"></a>理解几个等同性判断之间的关系</h2><p>当创建自定义类型时(无论是class还是struct)，应为类型定义”等同性”的含义。C#提供了4种不同的函数来判断两个对象是否”相等”：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">ReferenceEquals</span>(<span class="params"><span class="keyword">object</span> left, <span class="keyword">object</span> right</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> left, <span class="keyword">object</span> right</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Equals</span>(<span class="params"><span class="keyword">object</span> right</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="keyword">operator</span> ==(MyClass left, MyClass right);</span><br></pre></td></tr></table></figure><p><code>Object.ReferenceEquals()</code>和<code>Object.Equals()</code>这两个系统提供的静态方法，永远都不需要重新定义。</p><p><code>Object.ReferenceEquals()</code>判断的是对象引用，判断的是否拥有同样的对象标识(object identity)，所以若将一个值类型与它自身进行比较，方法返回的是<code>false</code>，因为值类型会进行装箱操作，造成引用地址不同。</p><p><code>Object.Equals()</code>对于引用类型默认使用对象标识判断，即跟<code>Object.ReferenceEquals()</code>一样，但对于值类型，因为System.ValueType重写了<code>Object.Equals()</code>方法，所以比较的是值是否相等(主要是struct)，但System.ValueType是所有值类型的基类，故实现比较时，用的是反射，效率并不高。</p><p>综上所述，自定义类型实现自己的比较方法就比较重要了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> : <span class="type">IEquatable</span>&lt;<span class="type">Student</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> int Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> string Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> bool Equals(<span class="keyword">object</span> obj)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Object.ReferenceEquals(obj, <span class="literal">null</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (Object.ReferenceEquals(<span class="keyword">this</span>, obj))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.GetType() != obj.GetType())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Equals(obj <span class="keyword">as</span> Student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> bool Equals(Student other)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Id != other.Id)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Name != other.Name)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，重写<code>Equals</code>方法时，需要同时重写<code>GetHashCode()</code>方法，详细可查看条目7。</p><p><code>operator==()</code>则相对简单。只要创建的是值类型，都必须重定义<code>operator==()</code>。理由和重写System.ValueType的<code>Equals</code>是一样的。而引用类型则应该避免重写<code>operator==()</code>。</p><h2 id="运行时常量-readonly-和编译期常量-const"><a href="#运行时常量-readonly-和编译期常量-const" class="headerlink" title="运行时常量(readonly)和编译期常量(const)"></a>运行时常量(readonly)和编译期常量(const)</h2><p>C#有两种类型的常量：<strong>编译期常量</strong>和<strong>运行时常量</strong>。两者有截然不同的行为，使用不当的话，会造成性能问题，如果没法确定，则使用慢点，但能保证正确的运行时常量。<br>运行时常量使用<code>readonly</code>关键字声明，编译期常量则使用<code>const</code>关键字声明：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明编译期常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> Millennium = <span class="number">2000</span>;</span><br><span class="line"><span class="comment">//声明运行时常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">int</span> ThisYear = <span class="number">2017</span>;</span><br></pre></td></tr></table></figure><p>二者最重要的区别在于,<code>readonly</code>值是运行时解析的，而<code>const</code>是在生成IL码就已经确定。</p><p><code>const</code>声明的常量必须不能改变，若改变了，则需要重新编译所有引用的程序集。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查询语法-query-syntax-的一个用处&quot;&gt;&lt;a href=&quot;#查询语法-query-syntax-的一个用处&quot; class=&quot;headerlink&quot; title=&quot;查询语法(query syntax)的一个用处&quot;&gt;&lt;/a&gt;查询语法(query syntax)的一个用处&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;循环创建集合|数组&lt;/strong&gt;时，用查询语法(query syntax)会比普通控制流程的结构好点，&lt;/p&gt;
&lt;p&gt;主要体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令式的版本有时非常难以理解，要是没有注释或文档，后续维护人员将要重读整段代码才能进行开发。&lt;/li&gt;
&lt;li&gt;另外，查询语法比循环结构能提供更具组合性的API。查询语法将很自然的把代码分解成小块代码，每一块仅仅对序列中元素进行单一的操作。查询语法的延迟执行模型也让开发者能将这些单一的操作组合成多步操作，且在一次遍历序列时完整执行。
    
    </summary>
    
      <category term="C#" scheme="https://luox78.github.io/categories/C/"/>
    
    
      <category term="tips" scheme="https://luox78.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET04</title>
    <link href="https://luox78.github.io/2018/02/06/ASP.NET04/"/>
    <id>https://luox78.github.io/2018/02/06/ASP.NET04/</id>
    <published>2018-02-06T15:28:55.215Z</published>
    <updated>2018-02-07T12:42:43.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h4 id="html中添加表单"><a href="#html中添加表单" class="headerlink" title="html中添加表单"></a><strong>html中添加表单</strong></h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span> action=<span class="string">"ProcessUpload.ashx"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"file"</span> name=<span class="string">"file1"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"upload"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>文件上传注意点：</p><ol><li>必须使用<code>post</code></li><li>form中<code>enctype=&quot;multipart/form-data&quot;</code>，使用表单快</li><li>添加文件域 <code>&lt;input type=&quot;file&quot; name=&quot;file1&quot;/&gt;</code><a id="more"></a></li></ol><p><code>enctype</code>默认为application。。键值对形式，使用<code>multipart/form-data</code>后，request报文会生成分割符，将传输的数据进行块分割，以二进制形式发送到服务器</p><h4 id="ProcessUpload-ashx中处理上传的文件"><a href="#ProcessUpload-ashx中处理上传的文件" class="headerlink" title="ProcessUpload.ashx中处理上传的文件"></a><strong>ProcessUpload.ashx中处理上传的文件</strong></h4><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">file</span> = context.Request.Files[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">string</span> <span class="keyword">filename</span> = Path.GetFileName(<span class="keyword">file</span>.FileName);</span><br><span class="line"><span class="keyword">string</span> saveFilename = Guid.NewGuid().ToString() + <span class="string">"_"</span> + <span class="keyword">filename</span>;</span><br><span class="line"><span class="keyword">file</span>.SaveAs(context.Server.MapPath(<span class="string">"upload/"</span> + saveFilename));</span><br></pre></td></tr></table></figure><p><code>context.Request.Files[0]</code>获取上传的第一个文件</p><p><code>string filename = Path.GetFileName(file.FileName)</code>因为上传时文件名为绝对路径</p><p><code>string saveFilename = Guid.NewGuid().ToString() + &quot;_&quot; + filename;</code>保存文件的名字采用Guid加上原文件名字。</p><p><code>file.SaveAs(context.Server.MapPath(&quot;upload/&quot; + saveFilename));</code>SaveAs中使用的是绝对路径，所以可以将上传的文件放入任意地方！</p><p>此次我上传的是style.css，保存在\upload\689ea264-84b0-4124-989e-998f0ecb12e4_style.css下</p><h4 id="大量数据存储解决方法"><a href="#大量数据存储解决方法" class="headerlink" title="大量数据存储解决方法"></a>大量数据存储解决方法</h4><p>当碰到大量图片等数据时，放在一个文件夹显然不合适，这时候应该拆分为多层文件夹，将文件名与对应的位置信息存储在数据库中</p><p>解决方法，可以取每次上传文件的<code>hashcode</code>（共32位）与<code>0xf（1111）</code>做&amp;运算得到0-15之间的一个数作为第一层文件夹的名字，第二层分层将<code>hashcode</code>右移四位再做与，为下一层目录，。。一共可以产生16^8次方个文件夹</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> ProcessRequest(HttpContext <span class="keyword">context</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.ContentType</span> = <span class="string">"text/plain"</span>;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">context</span><span class="variable">.Request</span><span class="variable">.Files</span><span class="variable">.Count</span> == <span class="number">0</span>)<span class="comment">//无文件退出</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(<span class="string">"failed"</span>);</span><br><span class="line">           <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.End</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> file = <span class="keyword">context</span><span class="variable">.Request</span><span class="variable">.Files</span>[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">string</span> filename = System<span class="variable">.IO</span><span class="variable">.Path</span><span class="variable">.GetFileName</span>(file<span class="variable">.FileName</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">string</span> dir1 = (file<span class="variable">.GetHashCode</span>() &amp; <span class="number">0</span>xF)<span class="variable">.ToString</span>();<span class="comment">//第一层</span></span><br><span class="line">       <span class="keyword">string</span> dir2 = (file<span class="variable">.GetHashCode</span>() &gt;&gt; <span class="number">4</span> &amp; <span class="number">0</span>xF)<span class="variable">.ToString</span>();<span class="comment">//第二层</span></span><br><span class="line">       System<span class="variable">.IO</span><span class="variable">.Directory</span><span class="variable">.CreateDirectory</span>(<span class="keyword">context</span><span class="variable">.Server</span><span class="variable">.MapPath</span>(<span class="string">"upload"</span>) + <span class="string">"/"</span> + dir1 + <span class="string">"/"</span> + dir2);<span class="comment">//创建文件夹</span></span><br><span class="line"></span><br><span class="line">       file<span class="variable">.SaveAs</span>(<span class="keyword">context</span><span class="variable">.Server</span><span class="variable">.MapPath</span>(<span class="string">"Upload"</span>) + <span class="string">"/"</span> + dir1 + <span class="string">"/"</span> + dir2 + <span class="string">"/"</span> + Guid<span class="variable">.NewGuid</span>() + filename);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(<span class="string">"success"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>html：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ProcessDownload.ashx?id=BackButton.jpg"</span>&gt;</span>BackButton.jpg<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ProcessDownload.ashx?id=Computer.png"</span>&gt;</span>Computer.png<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ProcessDownload.ashx?id=Credentials_ENU.xml"</span>&gt;</span>Credentials_ENU.xml<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ashx:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void ProcessRequest(HttpContext <span class="built_in">context</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">context</span>.Response.ContentType = <span class="string">"text/plain"</span><span class="comment">;</span></span><br><span class="line">       string filename = <span class="built_in">context</span>.Request[<span class="string">"id"</span>]<span class="comment">;</span></span><br><span class="line">       <span class="built_in">context</span>.Response.<span class="keyword">AddHeader("Content-Disposition", </span><span class="string">"attachment;filename="</span> + <span class="string">"\""</span> + HttpUtility.UrlDecode(filename) + <span class="string">"\""</span>)<span class="comment">;</span></span><br><span class="line">       <span class="built_in">context</span>.Response.WriteFile(<span class="string">"Download/"</span> + filename)<span class="comment">;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>context.Response.AddHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + &quot;\&quot;&quot; + HttpUtility.UrlDecode(filename) + &quot;\&quot;&quot;);</code>添加回复报文头 ：这是一个附件不用解析，同时文件名使用<code>HttpUtility.UrlDecode(filename)</code>是将<strong>中文转换成 对应的编码</strong>，防止乱码</p><p><code>context.Response.WriteFile(&quot;Download/&quot; + filename);</code>将文件以二进制直接返回</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; title=&quot;文件上传&quot;&gt;&lt;/a&gt;文件上传&lt;/h2&gt;&lt;h4 id=&quot;html中添加表单&quot;&gt;&lt;a href=&quot;#html中添加表单&quot; class=&quot;headerlink&quot; title=&quot;html中添加表单&quot;&gt;&lt;/a&gt;&lt;strong&gt;html中添加表单&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;form&lt;/span&gt; method=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt; enctype=&lt;span class=&quot;string&quot;&gt;&quot;multipart/form-data&quot;&lt;/span&gt; action=&lt;span class=&quot;string&quot;&gt;&quot;ProcessUpload.ashx&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;file1&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&quot;upload&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;文件上传注意点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必须使用&lt;code&gt;post&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;form中&lt;code&gt;enctype=&amp;quot;multipart/form-data&amp;quot;&lt;/code&gt;，使用表单快&lt;/li&gt;
&lt;li&gt;添加文件域 &lt;code&gt;&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;file1&amp;quot;/&amp;gt;&lt;/code&gt;
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="文件上传下载" scheme="https://luox78.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET03</title>
    <link href="https://luox78.github.io/2018/02/05/ASP.NET03/"/>
    <id>https://luox78.github.io/2018/02/05/ASP.NET03/</id>
    <published>2018-02-05T13:51:02.563Z</published>
    <updated>2018-02-05T15:37:06.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ASP-NET简单三层步骤"><a href="#ASP-NET简单三层步骤" class="headerlink" title="ASP.NET简单三层步骤"></a>ASP.NET简单三层步骤</h2><ol><li>建立好相应的文件夹</li></ol><table><thead><tr><th>文件夹</th><th>用处</th></tr></thead><tbody><tr><td>CURD.BLL</td><td>CURD的业务逻辑层</td></tr><tr><td>CURD.DAL</td><td>CURD的数据访问层</td></tr><tr><td>CURD.Model</td><td>CURD的传输层模型（本次将数据库模型与dto混为一谈）</td></tr><tr><td>CURD.UI</td><td>CURD的网页端</td></tr></tbody></table> <a id="more"></a><ol><li><p>CURD.UI<br>创建好模板Register.html</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> method=<span class="string">"post"</span> action=<span class="string">"Register.ashx"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;loginid&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;password&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password1"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;comfirm&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password2"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"注册"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>创建好Register的一般处理程序（请求页面）</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> ProcessRequest(HttpContext <span class="keyword">context</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.ContentType</span> = <span class="string">"text/html"</span>;</span><br><span class="line">         <span class="keyword">string</span> id = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"id"</span>];</span><br><span class="line">         <span class="keyword">string</span> password1 = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"password1"</span>];</span><br><span class="line">         <span class="keyword">string</span> password2 = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"password2"</span>];</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//读取模板</span></span><br><span class="line">         <span class="keyword">string</span> html = File<span class="variable">.ReadAllText</span>(<span class="keyword">context</span><span class="variable">.Server</span><span class="variable">.MapPath</span>(<span class="string">"Template/Register.html"</span>));</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (id == <span class="literal">null</span> || password1 == <span class="literal">null</span> || password2 == <span class="literal">null</span>)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">//第一次直接返回页面</span></span><br><span class="line">             <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(html);</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (password1 != password2)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">//密码不正确返回，并替换告知</span></span><br><span class="line">             html = html<span class="variable">.Replace</span>(<span class="string">"&lt;input type=\"password\" name=\"password2\"&gt;"</span>,</span><br><span class="line">                 <span class="string">"&lt;input type=\"password\" name=\"password2\"&gt;两次密码不一致"</span>);</span><br><span class="line">             <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(html);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         &#123;</span><br><span class="line">            <span class="comment">//todo 插入注册信息，返回成功还是失败</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建对应的Model</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CURD.Model</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> AutoId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>只在dal层进行数据库操作</p><p>这里只添加一个方法，就是注册</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> int Add(User user)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//可以设置成读取配置文件constr，返回成功1，失败-1</span></span><br><span class="line">            string constr = <span class="string">"data source=”LUOX78“的WIN;initial catalog=school;integrated security=true"</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> con = <span class="keyword">new</span> <span class="type">SqlConnection</span>(constr))</span><br><span class="line">                &#123;</span><br><span class="line">                    string sql = <span class="string">"insert into Users(loginId,loginPwd) values(@id,@pwd)"</span>;</span><br><span class="line">                    <span class="keyword">var</span> pms = <span class="keyword">new</span> <span class="type">SqlParameter</span>[]</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="type">SqlParameter</span>(<span class="string">"@id"</span>,user.Id),</span><br><span class="line">                        <span class="keyword">new</span> <span class="type">SqlParameter</span>(<span class="string">"@pwd"</span>,user.Password)</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">using</span> (<span class="keyword">var</span> cmd = <span class="keyword">new</span> <span class="type">SqlCommand</span>(sql, con))</span><br><span class="line">                    &#123;</span><br><span class="line">                        cmd.Parameters.AddRange(pms);</span><br><span class="line">                        con.Open();</span><br><span class="line">                        cmd.ExecuteNonQuery();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(e);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>bll调用dal并返回成功还是失败</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">CURD.BLL</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UsersBll</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> UsersDal db=<span class="keyword">new</span> UsersDal();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Add</span>(<span class="params">User user</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> db.Add(user) == <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UI层补全验证的步骤</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">UsersBll userService = <span class="keyword">new</span> <span class="type">UsersBll</span>();</span><br><span class="line">                <span class="keyword">var</span> res = userService.Add(<span class="keyword">new</span> <span class="type">User</span>()</span><br><span class="line">                &#123;</span><br><span class="line">                    Id = id,</span><br><span class="line">                    Password = password1</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (res)</span><br><span class="line">                &#123;</span><br><span class="line">                    context.Response.Write(<span class="string">"注册成功"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    context.Response.Write(<span class="string">"注册失败"</span>);</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ASP-NET简单三层步骤&quot;&gt;&lt;a href=&quot;#ASP-NET简单三层步骤&quot; class=&quot;headerlink&quot; title=&quot;ASP.NET简单三层步骤&quot;&gt;&lt;/a&gt;ASP.NET简单三层步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;建立好相应的文件夹&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件夹&lt;/th&gt;
&lt;th&gt;用处&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CURD.BLL&lt;/td&gt;
&lt;td&gt;CURD的业务逻辑层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CURD.DAL&lt;/td&gt;
&lt;td&gt;CURD的数据访问层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CURD.Model&lt;/td&gt;
&lt;td&gt;CURD的传输层模型（本次将数据库模型与dto混为一谈）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CURD.UI&lt;/td&gt;
&lt;td&gt;CURD的网页端&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="简单三层" scheme="https://luox78.github.io/tags/%E7%AE%80%E5%8D%95%E4%B8%89%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET02</title>
    <link href="https://luox78.github.io/2018/02/04/ASP.NET02/"/>
    <id>https://luox78.github.io/2018/02/04/ASP.NET02/</id>
    <published>2018-02-04T04:03:15.281Z</published>
    <updated>2018-02-04T12:04:27.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建IIS本地服务器"><a href="#搭建IIS本地服务器" class="headerlink" title="搭建IIS本地服务器"></a>搭建IIS本地服务器</h2><p>打开服务</p><p><img src="https://luox78.github.io/images/IIS01.png" alt="https://luox78.github.io/images/IIS01.png"><br><a id="more"></a><br>打开IIS管理器</p><p><img src="https://luox78.github.io/images/IIS02.png" alt="https://luox78.github.io/images/IIS02.png"></p><p>新建网站</p><p><img src="https://luox78.github.io/images/IIS03.png" alt="https://luox78.github.io/images/IIS03.png"></p><p>浏览新建立的网站</p><p><img src="https://luox78.github.io/images/IIS04.png" alt="https://luox78.github.io/images/IIS04.png"></p><p>问题：</p><p>数据库访问用户权限问题：更改网站用户为netservice</p><p><img src="https://luox78.github.io/images/IIS数据库问题改身份.png" alt="https://luox78.github.io/images/IIS数据库问题改身份.png"></p><p>目录浏览权限问题</p><p><img src="https://luox78.github.io/images/IIS目录浏览权限.png" alt="https://luox78.github.io/images/IIS目录浏览权限.png"></p><p>dotnet版本问题</p><p><img src="https://luox78.github.io/images/IIS修改dotnet版本.png" alt="https://luox78.github.io/images/IIS修改dotnet版本.png"></p><h2 id="IIS处理用户请求与响应过程"><a href="#IIS处理用户请求与响应过程" class="headerlink" title="IIS处理用户请求与响应过程"></a>IIS处理用户请求与响应过程</h2><ol><li>URL封装报文</li><li>http.sys内核模块监听对某个端口的请求</li><li>读取注册表获取哪个进程可以处理该请求</li><li>inetinfo.exe处理请求启动w3wp.exe，分动态资源与静态资源</li><li>对于静态资源直接找到磁盘上的文件返回</li><li>对于动态资源，找到处理该动态页面的<code>dll</code>，对于<code>aspx</code>找到aspnet.isapi.dll(C++)寄宿在w3wp.exe运行</li><li>aspnet.isapi.dll开启dotnet运行时</li><li>获取一个实现了<code>IISAPIRuntime</code>接口的对象<code>ISAPIRuntime</code>，调用<code>ProcessRequest</code>方法(参数之一ecb是传入的数据句柄)</li><li><code>ProcessRequest</code>对请求报文进行简单的封装成<code>ISAPIWorkerRequest</code>（wk）对象</li><li>调用<code>HttpRuntime.ProcessRequest(wk)</code>对wk进行详细封装成<code>HttpContext</code>对象包含<code>HttpRequest</code>，<code>HttpResponse</code></li><li>通过工厂模式【1】创建一个<code>HttpApplication</code>对象后调用<code>ProcessRequest</code>方法</li><li>。。。</li></ol><p><img src="https://luox78.github.io/images/相信过程.png" alt="https://luox78.github.io/images/相信过程.png"></p><p>【1】</p><p><strong>为什么使用工厂模式</strong>：</p><p>初始化工作如果是很长一段代码，说明要做的工作很多，将很多工作装入一个方法中，相当于将很多鸡蛋放在一个篮子里，是很危险的，这也是有悖于Java<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener">面向对象</a>的原则，面向对象的封装(Encapsulation)和分派(Delegation)告诉我们，尽量将长的代码分派“切割”成每段，将每段再“封装”起来(减少段和段之间耦合联系性)，这样，就会将风险分散，以后如果需要修改，只要更改每段，不会再发生牵一动百的事情</p><p><strong>如何使用工厂模式：</strong></p><p>使用接口派生实体类，通过工厂模式创建不同的对象</p><p><strong>简单工厂：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ISample <span class="title">creator</span><span class="params">(<span class="keyword">int</span> which)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (which==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SampleA();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (which==<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SampleB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在你的程序中,如果要创建<code>ISample</code>的实列时候可以使用</p><p><code>ISample sampleA=Factory.creator(1);</code></p><p><strong>抽象工厂：</strong></p><p>工厂模式中有: 工厂方法(Factory Method) <a href="https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82" target="_blank" rel="noopener">抽象工厂</a>(Abstract Factory).</p><p><strong>这两个模式区别在于需要创建对象的复杂程度上。如果我们创建对象的方法变得复杂了,如上面工厂方法中是创建一个对象Sample,如果我们还有新的产品接口Sample2.</strong></p><p>这里假设：Sample有两个实体类SampleA和SampleB，而Sample2也有两个实体类Sample2A和Sample2B</p><p>那么，我们就将上例中Factory变成<a href="https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E7%B1%BB" target="_blank" rel="noopener">抽象类</a>,将共同部分封装在抽象类中,不同部分使用子类实现，下面就是将上例中的Factory拓展成抽象工厂:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">Sample</span> creator();</span><br><span class="line">    public <span class="keyword">abstract</span> <span class="type">Sample2</span> creator(<span class="type">String</span> name);</span><br><span class="line">&#125;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    public <span class="type">Sample</span> creator()&#123;</span><br><span class="line">        .........</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">SampleA</span></span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="type">Sample2</span> creator(<span class="type">String</span> name)&#123;</span><br><span class="line">        .........</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Sample2A</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BombFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span></span>&#123;</span><br><span class="line">    public <span class="type">Sample</span> creator()&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">SampleB</span></span><br><span class="line">    &#125;</span><br><span class="line">    public <span class="type">Sample2</span> creator(<span class="type">String</span> name)&#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Sample2B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://baike.baidu.com/item/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/9852061?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/9852061?fr=aladdin</a></p></blockquote><h2 id="创建一个简单的ASP-NET"><a href="#创建一个简单的ASP-NET" class="headerlink" title="创建一个简单的ASP.NET"></a>创建一个简单的ASP.NET</h2><p>新建html登录界面</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> method=<span class="string">"post"</span> action=<span class="string">"LoginHandler.ashx"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;loginid&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"id"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span>&gt;password&lt;/<span class="keyword">label</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">br</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"submit"</span> value=<span class="string">"login"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure><p>编写LoginHandler.ashx</p><p>从页面获取值的方式：</p><p>get：<code>context.Request.QueryString[&quot;id&quot;]</code></p><p>post：<code>context.Request.Form[&quot;id&quot;]</code></p><p>通用：<code>context.Request[&quot;id&quot;]</code> || <code>context.Request.Params[&quot;id&quot;]</code></p><p>这里我简单的连接数据库进行判断</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> id = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"id"</span>];</span><br><span class="line">       <span class="keyword">string</span> password = <span class="keyword">context</span><span class="variable">.Request</span>[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">string</span> constr = <span class="string">"data source=”LUOX78“的WIN;initial catalog=school;integrated security=true"</span>;</span><br><span class="line">       <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">       using (<span class="keyword">var</span> con = <span class="keyword">new</span> SqlConnection(constr))</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">string</span> sql = <span class="string">"select count(*) from Users where loginId=@id and loginPwd=@pwd"</span>;</span><br><span class="line">           <span class="keyword">var</span> pms = <span class="keyword">new</span> SqlParameter[]</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">new</span> SqlParameter(<span class="string">"@id"</span>,id),</span><br><span class="line">               <span class="keyword">new</span> SqlParameter(<span class="string">"@pwd"</span>,password)</span><br><span class="line">           &#125;;</span><br><span class="line">           using (<span class="keyword">var</span> cmd = <span class="keyword">new</span> SqlCommand(sql, con))</span><br><span class="line">           &#123;</span><br><span class="line">               cmd<span class="variable">.Parameters</span><span class="variable">.AddRange</span>(pms);</span><br><span class="line">               con<span class="variable">.Open</span>();</span><br><span class="line">               res = (<span class="keyword">int</span>)cmd<span class="variable">.ExecuteScalar</span>();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">context</span><span class="variable">.Response</span><span class="variable">.Write</span>(res &gt; <span class="number">0</span> ? <span class="string">"登陆成功"</span> : <span class="string">"失败"</span>);</span><br></pre></td></tr></table></figure><p>登录错误应该重定向，此时response返回的是302，浏览器重新get</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">context</span><span class="selector-class">.Response</span><span class="selector-class">.Redirect</span>("<span class="selector-tag">login</span><span class="selector-class">.html</span>");</span><br></pre></td></tr></table></figure><p>有时一般处理程序会进行读取返回</p><p>获取页面绝对路径使用<code>context.Server.MapPath(&quot;login.html&quot;);</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var html = <span class="keyword">File</span>.ReadAllText(<span class="string">"path"</span>);</span><br><span class="line"><span class="comment">//todo 添加处理</span></span><br><span class="line">context.Response.<span class="keyword">Write</span>(html);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建IIS本地服务器&quot;&gt;&lt;a href=&quot;#搭建IIS本地服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建IIS本地服务器&quot;&gt;&lt;/a&gt;搭建IIS本地服务器&lt;/h2&gt;&lt;p&gt;打开服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://luox78.github.io/images/IIS01.png&quot; alt=&quot;https://luox78.github.io/images/IIS01.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ASP.NET" scheme="https://luox78.github.io/categories/ASP-NET/"/>
    
    
      <category term="IIS请求流程" scheme="https://luox78.github.io/tags/IIS%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    
      <category term="工厂模式" scheme="https://luox78.github.io/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
